{
  "prop_types": {
    "HyperdivType": {
      "name": "HyperdivType",
      "markdown": "[HyperdivType](/reference/prop-types/HyperdivType)",
      "doc": "\n    `HyperdivType` is the base class of all Hyperdiv types.\n\n    Hyperdiv types are used to dynamically type-check component prop\n    values, and to render those values into shapes suitable for\n    sending to the UI.\n\n    The core purpose of a Hyperdiv type is to provide two methods,\n    `parse` and `render`:\n\n    * `parse(value)` will dynamically check that `value` is in the right\n      shape for the given type. It may also coerce or transform the\n      value into a canonical shape.\n\n    * `render(value)` takes a *parsed value* of the given type and\n      transforms it into a shape suitable to be sent to the browser.\n\n    Custom types used to define internal state props don't have\n    to implement `render`.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "Any": {
      "name": "Any",
      "markdown": "[Any](/reference/prop-types/Any)",
      "doc": "The universal type that accepts any value.",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": true
    },
    "ClampedNumber": {
      "name": "ClampedNumber",
      "markdown": "[ClampedNumber](/reference/prop-types/ClampedNumber)",
      "doc": "\n    `ClampedNumber(num_type, low, high)` creates a Hyperdiv type that\n    accepts values of numeric Python type `num_type` that are between\n    `low` and `high` (inclusive). If `low` or `high` are set to `None`,\n    the interval is open on that end.\n\n    `ClampedNumber(int, low=None, high=None)` is equivalent to `Int`,\n    because the interval is open at both ends.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "ClampedInt": {
      "name": "ClampedInt",
      "markdown": "[ClampedInt](/reference/prop-types/ClampedInt)",
      "doc": "\n    `ClampedInt(low, high)` creates a Hyperdiv type that\n    accepts values of numeric Python type `int` that are between\n    `low` and `high` (inclusive). If `low` or `high` are set to `None`,\n    the interval is open on that end.\n\n    `ClampedInt()` is equivalent to `Int`, because the interval is\n    open at both ends.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "ClampedFloat": {
      "name": "ClampedFloat",
      "markdown": "[ClampedFloat](/reference/prop-types/ClampedFloat)",
      "doc": "\n    `ClampedFloat(low, high)` creates a Hyperdiv type that\n    accepts values of numeric Python type `float` that are between\n    `low` and `high` (inclusive). If `low` or `high` are set to `None`,\n    the interval is open on that end.\n\n    `ClampedFloat()` is equivalent to `Float`, because the interval is\n    open at both ends.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "Constant": {
      "name": "Constant",
      "markdown": "[Constant](/reference/prop-types/Constant)",
      "doc": "A prop with type `Constant(c)` accepts only the constant `c`.",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "Float": {
      "name": "Float",
      "markdown": "[Native](/reference/prop-types/Native)(float, coercible_types=[int])",
      "doc": "\n    Accepts only Python `float` and `int` values. `int` values are\n    coerced to `float` by calling `float()` on them.\n    ",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": true
    },
    "List": {
      "name": "List",
      "markdown": "[List](/reference/prop-types/List)",
      "doc": "\n    `List(typ)` Creates a type that accepts Python tuples or lists of\n    values with Hyperdiv type `typ`. The individual elements of the\n    given tuple/list will be parsed with `typ.parse`, and rendered\n    with `typ.render`.\n\n    The internally stored prop value will be a tuple of parsed values.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "Tuple": {
      "name": "Tuple",
      "markdown": "[Tuple](/reference/prop-types/Tuple)",
      "doc": "\n    `Tuple(type1, type2, ... typeN)` creates a Hyperdiv type that\n    accepts Python tuples of the shape `(value1, value2, ... valueN)`\n    such that `value1` has Hyperdiv type `type1`, `value2` has\n    Hyperdiv type `type2`, and so on.\n\n    For example `hd.Tuple(hd.Int, hd.PureString)` will accept values\n    like `(1, \"Hello\")`, `(50, \"Bunnies\")`, etc.\n\n    The internally stored value is a tuple of values parsed by their\n    respective types.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "Native": {
      "name": "Native",
      "markdown": "[Native](/reference/prop-types/Native)",
      "doc": "\n    `Native(typ)` will accept values only from the Python type\n    `typ`. It will type-check values `v` with `isinstance(v, typ)` and\n    raise an error if that check returns `False`.\n\n    However, `Native` can be constructed by passing an extra argument,\n    `coercible_types`:\n\n    `Native(typ, coercible_types=[typ1, typ2, ...])` will accept\n    values from `typ`, as well as `typ1`, `typ2`, etc. However, it\n    will coerce all values `v` to `typ` by calling `typ(v)` on them.\n\n    If `typ(v)` fails, that error will be raised.\n\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "Int": {
      "name": "Int",
      "markdown": "[Native](/reference/prop-types/Native)(int)",
      "doc": " Accepts only Python `int` values.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": true
    },
    "String": {
      "name": "String",
      "markdown": "[Native](/reference/prop-types/Native)(str, coercible_types=[object])",
      "doc": " Coerces any given value into a Python string by calling `str()` on it.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": true
    },
    "PureString": {
      "name": "PureString",
      "markdown": "[Native](/reference/prop-types/Native)(str)",
      "doc": " Accepts only Python `str` values.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": true
    },
    "Bool": {
      "name": "Bool",
      "markdown": "[Native](/reference/prop-types/Native)(bool)",
      "doc": " Accepts only Python `bool` values, namely `True` and `False`.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": true
    },
    "OneOf": {
      "name": "OneOf",
      "markdown": "[OneOf](/reference/prop-types/OneOf)",
      "doc": "\n    `OneOf(*values)` creates a Hyperdiv type that accepts one of the\n    given values and raises `ValueError` otherwise.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "OneOrMoreOf": {
      "name": "OneOrMoreOf",
      "markdown": "[OneOrMoreOf](/reference/prop-types/OneOrMoreOf)",
      "doc": "\n    `OneOrMoreOf(*values)` is a Hyperdiv type that accepts a tuple\n    made of a subset of the values in `*values` and raises\n    `ValueError` otherwise.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "Optional": {
      "name": "Optional",
      "markdown": "[Optional](/reference/prop-types/Optional)",
      "doc": "\n    `Optional(typ)` creates a type that, in addition to the values\n    accepted by `typ`, also accepts the value `None`.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "Union": {
      "name": "Union",
      "markdown": "[Union](/reference/prop-types/Union)",
      "doc": "\n    `Union(typ1, typ2)` creates a type that accepts values of either\n    `typ1` or `typ2`. It tries to parse the value with `typ1` first,\n    and if that fails, it tries `typ2`.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "BoolEvent": {
      "name": "BoolEvent",
      "markdown": "[Event](/reference/prop-types/Event)([Bool](/reference/prop-types/Bool))",
      "doc": " A @prop_type(Event) type that accepts @prop_type(Bool) values.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": true
    },
    "StringEvent": {
      "name": "StringEvent",
      "markdown": "[Event](/reference/prop-types/Event)([String](/reference/prop-types/String))",
      "doc": " A @prop_type(Event) type that accepts @prop_type(String) values.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": true
    },
    "Event": {
      "name": "Event",
      "markdown": "[Event](/reference/prop-types/Event)",
      "doc": "\n    `Event(typ)` creates an event type out of an existing Hyperdiv\n    type `typ`. This type represents events. For example\n    @prop_type(BoolEvent) is used to represent mouse clicks.\n\n    A prop with type `Event(typ)` will accept the values of `typ`, but\n    automatically reset back to the prop's default value at the end of\n    the run.\n\n    In the case of mouse clicks, a `clicked` prop defined with\n    `Prop(BoolEvent, False)` will become `True` for one run when the\n    respective component is clicked, and is automatically reset back\n    to `False` at the end of the run.\n\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "CSSField": {
      "name": "CSSField",
      "markdown": "[CSSField](/reference/prop-types/CSSField)",
      "doc": "\n    `CSSField(field_name, typ)` creates a Hyperdiv type that accepts\n    the values of `typ`, but whose rendered values will be rendered in\n    the UI as CSS, instead of being passed to the UI component as\n    attributes.\n\n    `field_name` is a valid CSS attribute name.\n\n    The `render` method on this type is expected to return a\n    dictionary mapping the field name to a valid CSS value. For a font\n    size prop, the `render` method would return, for example:\n\n    ```\n    { 'font-size': '1rem' }\n    ```\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": true
    },
    "SlotType": {
      "name": "SlotType",
      "markdown": "[SlotType](/reference/prop-types/SlotType)",
      "doc": "\n    The type of Hyperdiv component slots.\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "BackgroundGradient": {
      "name": "BackgroundGradient",
      "markdown": "[BackgroundGradient](/reference/prop-types/BackgroundGradient)",
      "doc": "\n    Represents background color gradient values. The accepted values\n    are either `None`, or 3-tuples `(degree, color_start, color_end)`\n    of types (@prop_type(Int), @prop_type(Color), @prop_type(Color)).\n\n    The `degree` component determines the angle, in degrees, at which\n    to render the gradient. The `start_color` and `end_color` are the\n    two colors between which the gradient will blend.\n\n    ```py\n    hd.box(\n        height=5,\n        width=5,\n        background_gradient=(0, \"red\", \"blue\")\n    )\n    hd.box(\n        height=5,\n        width=5,\n        background_gradient=(45, \"green-200\", \"purple\")\n    )\n    ```\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "Direction": {
      "name": "Direction",
      "markdown": "[OneOf](/reference/prop-types/OneOf)('vertical', 'vertical-reverse', 'horizontal-reverse', 'horizontal', None)",
      "doc": "\n    Represents the layout direction of @component(box) components.\n    ",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "Scroll": {
      "name": "Scroll",
      "markdown": "[Optional](/reference/prop-types/Optional)([Bool](/reference/prop-types/Bool))",
      "doc": "\n    Defines whether the content inside a component can scroll within\n    the component's \"box\". The accepted values are:\n\n    * `None` - Unspecified/default behavior.\n\n    * `True` - The component's contents will scroll when they overflow\n      the component's dimensions.\n\n    * `False` - The component's contents will not scroll.\n\n    ",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "TextGradient": {
      "name": "TextGradient",
      "markdown": "[TextGradient](/reference/prop-types/TextGradient)",
      "doc": "\n    A type that takes the same values as\n    @prop_type(BackgroundGradient) but represents the gradient color\n    of *text* inside a box, as opposed to the background gradient of\n    the box.\n\n    ```py\n    hd.text(\n        \"Gradient\",\n        width=\"fit-content\",\n        font_size=3,\n        font_weight=\"bold\",\n        text_gradient=(0, \"red\", \"blue\")\n    )\n    hd.text(\n        \"Gradient\",\n        width=\"fit-content\",\n        font_size=3,\n        font_weight=\"bold\",\n        text_gradient=(45, \"emerald\", \"rose\")\n    )\n    ```\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "BackgroundColor": {
      "name": "BackgroundColor",
      "markdown": "[Optional](/reference/prop-types/Optional)([Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([Color](/reference/design-tokens/Color)), [ColorConstant](/reference/prop-types/ColorConstant)))",
      "doc": " A type that takes @prop_type(Color) values, used to style the\n backgrounds of components.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "BaseSize": {
      "name": "BaseSize",
      "markdown": "[BaseSize](/reference/prop-types/BaseSize)",
      "doc": "\n    A hyperdiv type that accepts generic size values that can be used\n    to define the widths, heights, padding, margins, of components,\n    gaps between components, border sizes, etc.\n\n    This type accepts the following shapes of values:\n\n    * `None`, an unspecified size, denoting default browser behavior.\n\n    * The string `\"fit-content\"`, denoting that the component should\n      be only large enough to fit its interior content.\n\n    * A bare floating point number or integer, which is implicitly\n      assigned the unit `\"rem\"` (more on this below).\n\n    * A 2-tuple of a number and a unit. For example `(10, \"px\")`,\n      which denotes a size of 10 pixels.\n\n    * A string notation for the 2-tuple notation above, concatenating\n      the number and the unit. For example, `\"10px\"`.\n\n    The supported units are:\n\n    * `rem`: This is the default, when no unit is specified. `rem` is\n      a multiplier of the \"base font size\", which by default is 16\n      pixels. `\"1rem\"` means 16 pixels. `\"0.5rem\"` means 8\n      pixels. `\"2rem\"` means 32 pixels, etc. This is the recommended\n      unit to use, because the entire UI can be scaled up and down by\n      modifying only the base font size.\n\n    * `em`: A multiplier of the font size of the parent\n      component. This works like `rem` but instead of being a\n      multiplier of the root font size, it is a multiplier of the font\n      size of the parent component that the given component is nested\n      inside of.\n\n    * `px`: Pixels.\n\n    * `%`: A percentage of some other value. For example a width of\n      `\"50%\"` on a component means half the width of its parent\n      component.\n\n    * `vh`: A percentage of the *viewport height*. The viewport is the\n      size of the browser window the app is running in.\n\n    * `vw`: A percentage of the *viewport width*.\n\n    Examples:\n\n    ```py\n    def box(width):\n        with hd.box(\n            border=\"1px solid red\",\n            padding=0.5,\n            width=width\n        ):\n            hd.text(width)\n\n    box(\"fit-content\")\n    box(8)\n    box(\"8rem\") # Equivalent to the above\n    box(\"50%\")\n    box(\"10vw\")\n    box(\"90px\")\n\n    hd.markdown(\"## Tuple notation:\")\n\n    box((8, \"rem\"))\n    box((50, \"%\"))\n    box((10, \"vw\"))\n    box((90, \"px\"))\n    ```\n\n    The canonical value stored by this type is either the string\n    `\"fit-content\"` or a tuple of `(value, unit)`.\n\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "Border": {
      "name": "Border",
      "markdown": "[Border](/reference/prop-types/Border)",
      "doc": "\n    A Hyperdiv type for simultaneously defining the four borders of a component.\n\n    The values it accepts are:\n    * `None`, indicating an unspecified border.\n    * The string `\"none\"`, indicating no border.\n    * A `Border` value, which sets all four borders to the same value.\n    * A 4-tuple of `Border` values, which sets each border\n      independently, starting at the top border and going clockwise.\n\n    Example values:\n\n    ```py\n    with hd.box(gap=1):\n        # Unspecified:\n        hd.button(\"Hello\", border=None)\n        # No border:\n        hd.button(\"Hello\", border=\"none\")\n\n        # Set all four border edges to the same value:\n        hd.button(\n            \"Hello\",\n            border=\"0.5 solid neutral\"\n        )\n        # Or, using tuple syntax:\n        hd.button(\n            \"Hello\",\n            border=(0.5, \"solid\", \"neutral\")\n        )\n\n        # Set the border edges independently,\n        # using string syntax:\n        hd.button(\"Hello\", border=(\n            \"0.5 solid neutral\",\n            \"0.5 dashed red\",\n            \"0.5 solid green\",\n            \"0.5 dashed yellow\"\n        ))\n\n        # Set the border edges independently,\n        # using tuple syntax:\n        hd.button(\"Hello\", border=(\n            (0.5, \"solid\", \"neutral\"),\n            (0.5, \"dashed\", \"red\"),\n            (0.5, \"solid\", \"green\"),\n            (0.5, \"dashed\", \"yellow\")\n        ))\n    ```\n\n    String and tuple syntax is interchangeable.\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "BorderEdge": {
      "name": "BorderEdge",
      "markdown": "[BorderEdge](/reference/prop-types/BorderEdge)",
      "doc": "\n    A Hyperdiv type that accepts values defining a single edge of a component's border.\n\n    The value shapes accepted by this type are:\n\n    * The Python value `None`, indicating that the border is unspecified.\n    * The string constant `\"none\"`, indicating no border.\n    * A 3-tuple of values `(size, style, color)`, indicating the size, style, and color\n      of the border.\n    * A string representation of the 3-tuple above, where the tuple is given as a\n      string of the three values, separated by spaces.\n\n\n    Example values:\n    ```py-nodemo\n    # Unspecified:\n    None\n    # No border:\n    \"none\"\n\n    # Using string syntax:\n    \"1 solid red\"\n    \"10px dashed primary\"\n\n    # Using tuple syntax:\n    (1, \"solid\", \"red\")\n    (\"10px\", \"dashed\", \"primary\")\n    ```\n\n    The size part accepts the same values as the `Size` prop type.\n\n    The style part accepts the values `\"solid\"`, `\"dotted\"`, and `\"dashed\"`.\n\n    The color part accepts the same values as the `Color` prop type.\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "BoxSize": {
      "name": "BoxSize",
      "markdown": "[BoxSize](/reference/prop-types/BoxSize)",
      "doc": "\n    A type that accepts size values defining all four edges or corners\n    of a box. It can be used for the padding, margin, border radius,\n    etc., of a Hyperdiv component.\n\n    The values of this type are either\n\n    * A single @prop_type(Size) value, in which case all four dimensions are set\n      simultaneously to that size.\n\n    * A four-tuple of @prop_type(Size) values, in which case the dimensions are\n      set independently.\n\n    The canonical value shape of this type is a four-tuple of\n    canonical @prop_type(Size) shapes.\n\n    Example values:\n\n    ```py-nodemo\n    1.5\n    \"10px\"\n    (10, \"px\")\n    (1, 1, 1, 1)\n    (1, \"10px\", (1.5, \"rem\"), \"2vh\")\n    ```\n\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "CSS": {
      "name": "CSS",
      "markdown": "[CSS](/reference/prop-types/CSS)",
      "doc": "\n    A subclass of @prop_type(HyperdivType) that is used to denote CSS\n    props. A prop whose type is a subclass of `CSS` will be rendered\n    to CSS in the browser, and used to style the component it is\n    attached to, instead of being set as a DOM attribute on that\n    component, which is the case for non-`CSS` props.\n\n    For example, @prop_type(CSSField) is a subclass of `CSS`.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": false
    },
    "Color": {
      "name": "Color",
      "markdown": "[Optional](/reference/prop-types/Optional)([Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([Color](/reference/design-tokens/Color)), [ColorConstant](/reference/prop-types/ColorConstant)))",
      "doc": " Defines the color constants available for use in Hyperdiv. Note that\n although this type supports arbitrary hex/rgb/rgba colors by\n including @prop_type(ColorConstant), it is recommended to use the\n built-in @design_token(Color) design tokens, as these are designed\n to be visually consistent and render correctly in both light and\n dark mode. If you use a @prop_type(ColorConstant), the same color\n will be rendered regardless of mode, unless you explicitly use\n different color constants for each mode.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "DesignToken": {
      "name": "DesignToken",
      "markdown": "[DesignToken](/reference/prop-types/DesignToken)",
      "doc": "\n    `DesignToken(design_token_enum)` creates a Hyperdiv type that\n    accepts any value of the given design token enum.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": false
    },
    "FontSize": {
      "name": "FontSize",
      "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([FontSize](/reference/design-tokens/FontSize)), [BaseSize](/reference/prop-types/BaseSize))",
      "doc": " A type that takes font size values, used to style the font sizes of\n components. In addition to @design_token(FontSize) values, it\n accepts generic @prop_type(BaseSize) values like `3.5` or `10px`.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "Height": {
      "name": "Height",
      "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([Spacing](/reference/design-tokens/Spacing)), [BaseSize](/reference/prop-types/BaseSize))",
      "doc": " A type that takes @prop_type(Size) values and represents the heights\n of components.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "LineHeight": {
      "name": "LineHeight",
      "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([LineHeight](/reference/design-tokens/LineHeight)), [Size](/reference/prop-types/Size))",
      "doc": " A type whose values represent the line heights of text. In addition\n to @design_token(LineHeight) values, it accepts generic\n @prop_type(Size) values like `3.5` or `\"10px\"`, or `\"x-small\"`.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "Size": {
      "name": "Size",
      "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([Spacing](/reference/design-tokens/Spacing)), [BaseSize](/reference/prop-types/BaseSize))",
      "doc": " A type that defines component dimensions and spacing. This type\n accepts `Spacing` tokens in addition to `BaseSize` values.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "Width": {
      "name": "Width",
      "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([Spacing](/reference/design-tokens/Spacing)), [BaseSize](/reference/prop-types/BaseSize))",
      "doc": " A type that takes @prop_type(Size) values and represents the widths\n of components.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "ColorConstant": {
      "name": "ColorConstant",
      "markdown": "[ColorConstant](/reference/prop-types/ColorConstant)",
      "doc": "\n    Defines a hex, rgb, or rgba color constant.\n\n    The accepted value shapes are:\n\n    * Hex: A string of length 7 that starts with a `#`, which is followed\n      by 6 characters in the rage `[0-9a-f]`.\n    * RGB: A tuple of 3 integers in the range `0-255`.\n    * RGBA: A tuple of 4 numbers. The first three are integers in the\n      range `0-255` representing RGB values. The fourth is a float in\n      the range `0-1` representing opacity, where `0` is fully transparent\n      and `1` is fully opaque.\n\n    Examples:\n    ```py\n    hd.box(\n        width=2,\n        height=2,\n        background_color=\"#558833\"\n    )\n    hd.box(\n        width=2,\n        height=2,\n        background_color=(128, 0, 200)\n    )\n    hd.box(\n        width=2,\n        height=2,\n        background_color=(128, 0, 200, 0.5)\n    )\n    ```\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "TimeValue": {
      "name": "TimeValue",
      "markdown": "[TimeValue](/reference/prop-types/TimeValue)",
      "doc": "\n    A type that supports time values. See\n    [here](https://developer.mozilla.org/en-US/docs/Web/CSS/time).\n\n    It accepts a numeric value followed by a unit, where the unit has\n    to be one of `\"s\"` (seconds) or `\"ms\"` (milliseconds).\n\n    The value shape can be either a string, like `\"12ms\"`, or a tuple\n    like `(12, \"ms\")`.\n\n    Examples:\n\n    ```py\n    \"12ms\"\n    \"+12.5ms\"\n    \"-1.6s\"\n    (12, \"ms\")\n    (12.5, \"ms\")\n    (-1.6, \"s\")\n    ```\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "Icon": {
      "name": "Icon",
      "markdown": "[OneOf](/reference/prop-types/OneOf)('badge-ad-fill', 'google', 'reply-all-fill', 'dash-circle-dotted', 'hospital', 'calendar-minus-fill', 'award-fill', 'calculator-fill', 'file-earmark-word', 'columns-gap', 'easel3', 'plus-circle', 'vimeo', 'backspace-fill', 'bag-fill', 'braces', 'card-heading', 'phone-flip', 'search-heart-fill', 'sign-intersection-t', 'skip-forward-circle-fill', 'layer-forward', 'wrench-adjustable-circle-fill', 'h-square-fill', 'clipboard-heart-fill', 'pc-display', 'type-italic', 'plus-circle-dotted', 'calendar-x', 'arrow-down-left', 'airplane-engines', 'shield-x', 'wind', 'sunrise', '5-circle', 'cart-dash-fill', 'brightness-high-fill', 'file-font', 'layer-backward', 'eyedropper', 'taxi-front-fill', 'dice-2', 'badge-wc-fill', 'music-note', 'easel2-fill', 'pie-chart', 'envelope-check', 'messenger', 'r-circle', 'calendar3-event', 'chat-square-dots-fill', 'filetype-mov', 'person-lock', 'play-circle', 'send-slash-fill', 'list-columns', 'front', 'modem-fill', 'building-fill-check', 'droplet-fill', 'earbuds', 'geo-alt', 'wikipedia', 'arrow-bar-down', 'currency-yen', 'question-circle', 'view-stacked', 'bag-dash', 'symmetry-horizontal', 'rewind', 'envelope-open-heart', 'camera-video', 'calendar4-week', 'eject-fill', 'intersect', 'badge-tm', 'archive-fill', 'arrow-up-right', 'layers-fill', 'skip-backward-fill', 'arrow-left', 'speaker-fill', 'badge-hd', 'file-arrow-down', 'person-lines-fill', 'chat-right', 'person-x', 'suit-diamond', 'arrows-expand', 'file-earmark-spreadsheet-fill', 'stopwatch', 'fuel-pump-fill', 'file-x-fill', 'window-split', 'emoji-wink-fill', 'arrow-left-short', 'emoji-expressionless', 'magnet', 'alipay', 'receipt-cutoff', '2-square', 'send-x-fill', 'question', 'basket3', 'cloud-haze-fill', 'sunglasses', 'journal-bookmark-fill', 'diagram-2', 'file-earmark-pdf', 'chat-right-dots', 'stopwatch-fill', 'airplane-fill', 'hand-thumbs-down', 'sign-turn-right-fill', 'sign-no-parking-fill', 'file-font-fill', 'usb-symbol', '7-square-fill', 'pentagon-half', 'rewind-circle-fill', 'badge-vr-fill', 'question-square', 'moon-stars', 'grid', 'filetype-m4p', 'mic-fill', 'broadcast-pin', 'postage-heart', 'body-text', 'eyeglasses', 'calendar3', 'dpad-fill', 'database', 'plus-lg', 'gear-wide', 'list-ul', 'journal-album', 'cash-coin', 'envelope-open', 'bus-front-fill', 'patch-question-fill', 'calendar-fill', 'plus-square-dotted', 'music-player', 'arrow-down-circle-fill', 'check-circle', 'usb-c-fill', 'fingerprint', 'house-down', 'border-inner', 'person-video', 'filetype-psd', 'envelope-check-fill', 'h-square', 'person-plus-fill', 'archive', 'pause', 'x-octagon-fill', 'file-earmark-font', 'clipboard-pulse', 'emoji-angry-fill', '8-circle', 'filter-circle-fill', 'clock-fill', 'bezier', 'pause-btn', 'shift', 'layout-sidebar', 'node-minus-fill', 'github', 'snow3', 'cloud-rain-heavy', 'quora', 'border-middle', 'superscript', 'caret-right-square-fill', 'signpost-fill', 'exclamation-octagon', 'router-fill', 'telephone-plus', 'bag-plus', 'filetype-xml', 'braces-asterisk', 'subtract', 'fast-forward-circle-fill', 'filter-circle', 'filetype-tsx', 'credit-card-2-front', 'badge-ar-fill', 'filetype-pdf', 'folder2', 'sign-turn-right', 'envelope-open-fill', 'question-octagon-fill', 'cursor', 'cup-hot', 'hand-thumbs-up-fill', 'p-square-fill', 'box-arrow-down-right', 'file-earmark-lock-fill', 'list', '1-circle-fill', 'arrow-bar-left', 'r-square', 'clipboard2-data', 'moisture', 'dice-4', 'menu-app-fill', 'life-preserver', 'disc', 'skip-start-btn', 'box-arrow-up-left', 'hdmi-fill', 'cloudy', 'spellcheck', 'pin', 'file-play-fill', 'patch-check-fill', 'arrow-down-short', 'database-fill-lock', 'person-badge', 'house-slash', 'chat-right-quote-fill', 'circle-half', 'box-arrow-in-up-right', 'usb-mini-fill', 'voicemail', 'trash3-fill', 'menu-button-fill', 'door-closed-fill', 'joystick', 'grid-3x2-gap-fill', 'unindent', 'file-earmark-music', 'pip', 'database-dash', 'file-zip-fill', 'cloud-rain-heavy-fill', 'sort-numeric-up', 'markdown-fill', 'record2', 'dice-3', 'rocket-takeoff', 'file-earmark-post-fill', 'bookmark', 'sign-turn-slight-left-fill', 'save2-fill', 'calendar-week', 'cloud-snow-fill', 'file-earmark-code-fill', 'person-vcard', 'building-fill', 'box2-heart', 'cloud-lightning-rain', 'stack', 'file-x', 'arrow-counterclockwise', 'shuffle', 'house-gear-fill', 'chevron-double-down', 'flower1', 'grid-1x2', 'exclude', 'sign-turn-left-fill', 'key-fill', 'badge-wc', 'sort-down-alt', 'building', 'usb-c', 'ear-fill', 'phone', 'terminal-fill', 'cloud-lightning-rain-fill', 'sliders2-vertical', 'terminal-dash', 'envelope-heart', 'bag-plus-fill', 'shop', 'folder-minus', 'signpost-split-fill', 'calendar2-week', 'sticky', 'chat-right-quote', '8-square-fill', 'arrows-collapse', 'arrows-move', 'hdd', 'image-fill', 'graph-down', 'arrow-down-left-circle-fill', 'filetype-mp3', 'laptop', 'mic-mute', 'vinyl-fill', 'code-slash', 'c-circle', 'mailbox', 'arrow-repeat', 'badge-ar', 'align-top', 'trello', 'gear-fill', 'basket3-fill', 'compass-fill', 'hand-thumbs-up', 'arrow-up-short', 'three-dots-vertical', 'database-down', 'qr-code', 'tag-fill', 'percent', 'terminal-x', 'chat-right-dots-fill', 'globe', 'medium', 'clipboard2-check', 'credit-card-2-back-fill', 'filetype-heic', 'sign-dead-end-fill', 'bag-heart-fill', 'cloud-upload-fill', 'snapchat', 'megaphone', 'database-fill-x', 'bucket-fill', 'file-arrow-up-fill', 'rocket-fill', 'bootstrap', 'volume-mute', 'border-style', 'droplet', 'telephone-minus', 'border', 'car-front', 'filter-right', 'badge-8k-fill', 'cloud-lightning-fill', 'indent', 'arrow-left-circle-fill', 'sort-numeric-down', 'clipboard2-pulse-fill', 'ui-radios', 'bookmark-heart-fill', 'fonts', 'file-earmark-spreadsheet', 'sina-weibo', 'c-circle-fill', 'caret-up-square-fill', 'person-add', 'house-fill', 'patch-check', 'fast-forward-btn-fill', 'skip-end-circle', 'text-paragraph', 'chevron-double-up', 'person-down', 'filter-left', 'calendar3-range-fill', 'record-fill', 'emoji-smile-upside-down', 'snow2', 'camera-video-fill', 'bandaid', 'caret-right-square', 'layers', 'align-end', 'sign-turn-slight-left', 'plus-slash-minus', 'cart-x-fill', 'clipboard-check-fill', 'skip-backward-circle', 'calendar2-minus', 'file-earmark-plus-fill', 'envelope-x', 'question-circle-fill', 'music-player-fill', 'chevron-left', 'bookmark-plus-fill', 'alarm-fill', 'rulers', 'calendar4-event', 'arrow-up-circle-fill', 'cloud-slash', 'sign-merge-right-fill', 'building-fill-lock', 'hash', 'building-x', 'database-fill-down', 'train-front-fill', 'hdd-network-fill', 'x-diamond-fill', 'bar-chart-steps', 'file-earmark-ppt-fill', 'optical-audio-fill', 'text-center', '6-circle', 'hurricane', 'rainbow', 'cloud-sun-fill', 'database-check', 'sort-numeric-up-alt', 'person-fill-check', 'journal-check', 'shield-fill-plus', 'emoji-heart-eyes', 'envelope-at-fill', 'file-earmark-image', 'grid-fill', 'wrench', 'unity', 'question-lg', 'caret-left-square', 'arrow-up', 'dice-3-fill', 'chevron-contract', 'skip-forward-circle', 'trash2', 'sim', 'upc-scan', 'type-h2', '2-square-fill', 'badge-sd', 'bullseye', 'eye-slash-fill', 'input-cursor', 'box2', 'file-pdf', 'images', 'tropical-storm', 'tree', 'safe2', 'filetype-mdx', 'trash3', 'window-x', 'box-arrow-in-up-left', 'person-badge-fill', 'thermometer', 'bell-slash', 'pass-fill', 'thermometer-snow', 'patch-exclamation-fill', 'ladder', 'x-circle-fill', 'suit-heart-fill', 'award', 'list-check', 'wifi-2', 'journal', 'arrow-down-up', 'house-down-fill', 'chat-square-heart-fill', 'code-square', 'chat-square-text', 'briefcase', 'gender-ambiguous', 'chat', 'arrow-down-square', 'sunrise-fill', 'calendar3-fill', 'kanban', 'telephone-x-fill', 'cloud-sun', 'brightness-alt-low', 'person-fill-dash', 'sign-no-left-turn-fill', 'credit-card-2-front-fill', 'meta', 'aspect-ratio-fill', 'cpu', 'printer-fill', 'box2-fill', 'envelope-plus-fill', 'cloud-rain', 'calendar2-heart-fill', 'bookmark-heart', 'calendar2-day-fill', 'file-medical', 'box-arrow-in-left', 'file-earmark-slides', 'filetype-ai', 'bug', 'clipboard-data', 'check-all', 'sign-stop', 'telephone', 'browser-chrome', 'collection-fill', 'postcard-heart-fill', 'git', 'tags', 'arrow-up-right-square', 'device-ssd-fill', 'lightning', 'geo-fill', 'skip-forward-fill', 'x', 'sign-intersection-side-fill', 'calendar4-range', 'window-stack', 'calendar-event-fill', 'bookmarks-fill', 'cloud-arrow-up', 'filetype-exe', 'motherboard', 'fast-forward-btn', 'sort-alpha-up', 'arrow-bar-up', 'check2-square', 'folder-plus', 'play-circle-fill', 'badge-ad', 'truck', 'calendar-heart-fill', 'file-earmark-check', 'menu-button-wide', 'align-center', 'chat-square', 'car-front-fill', 'person-fill', 'newspaper', 'heart-half', 'file-excel', 'x-lg', 'align-middle', 'chat-left', 'reception-3', 'file-earmark-arrow-up-fill', 'file-earmark-minus', 'amd', 'bandaid-fill', 'file-lock2-fill', 'lock', 'sign-no-left-turn', 'person-dash', 'hospital-fill', 'thunderbolt', 'music-note-beamed', 'graph-up', 'check2-all', 'browser-safari', 'file-earmark-ruled-fill', 'shield-exclamation', 'sign-yield', 'record-circle-fill', 'file-earmark-richtext', 'sort-down', 'shield-lock-fill', 'chevron-bar-right', 'emoji-wink', 'cloud-haze2', 'envelope-exclamation-fill', 'file-earmark-post', 'sort-up-alt', 'file-earmark-text-fill', 'pencil', 'postcard-fill', 'map', 'brightness-alt-high', 'smartwatch', 'emoji-heart-eyes-fill', 'hand-index-thumb', 'phone-vibrate', 'window-plus', 'geo', 'tree-fill', 'chat-right-text-fill', 'regex', 'motherboard-fill', 'heartbreak', 'rss', 'send-exclamation', 'chat-left-text', 'file-binary', 'house-exclamation-fill', 'calendar-range-fill', '3-circle', '0-circle', 'filetype-ppt', 'cloud-drizzle-fill', 'suit-spade', 'play-btn-fill', 'file-medical-fill', 'calendar2-date', 'flower3', 'grip-horizontal', 'house-exclamation', 'people', 'speedometer', 'cart4', 'cc-square-fill', 'fan', 'printer', 'telephone-minus-fill', 'dash-square-dotted', 'file-earmark-bar-graph', 'filetype-py', 'person-dash-fill', 'usb-drive-fill', 'box-arrow-in-right', 'minecart-loaded', 'hexagon-half', 'file-earmark-play-fill', 'arrows-angle-expand', 'clock-history', 'wechat', 'badge-hd-fill', 'camera-video-off-fill', 'fast-forward', 'file-word', 'ev-station-fill', '3-square-fill', 'fast-forward-circle', 'badge-3d', 'person-x-fill', 'border-bottom', 'door-open', 'steam', 'triangle', 'heart-pulse', 'layout-wtf', 'emoji-sunglasses-fill', 'filetype-sh', 'menu-button-wide-fill', 'cloud-hail-fill', 'cloud-haze2-fill', 'sign-stop-fill', 'chevron-bar-left', 'aspect-ratio', 'lightbulb-off', 'files', 'recycle', 'file-earmark-richtext-fill', 'pinterest', 'diamond-fill', 'cloud-rain-fill', 'filetype-tiff', 'filetype-doc', 'bag-dash-fill', 'info-square', 'house-door', 'check-square-fill', 'usb-micro-fill', 'cart-check-fill', 'pin-map', '5-square-fill', 'clipboard-minus', 'bookmark-fill', 'sort-alpha-down', 'youtube', 'volume-off-fill', 'share', 'card-image', 'webcam-fill', 'dropbox', 'send-check-fill', '6-square-fill', 'calendar3-event-fill', 'file-plus', 'currency-bitcoin', 'clipboard2-pulse', 'exclamation-square', 'building-fill-down', 'arrow-up-right-circle-fill', 'suit-heart', 'record-btn', 'fullscreen', 'send-exclamation-fill', 'emoji-dizzy', 'shop-window', 'file-earmark-font-fill', 'three-dots', 'basket', 'backspace', 'lamp', 'hdd-rack-fill', 'record-circle', 'volume-mute-fill', 'brightness-low-fill', 'camera-fill', 'fuel-pump', 'calendar2-range-fill', 'collection', 'window-desktop', 'journal-code', 'calendar-month', 'building-fill-add', 'calendar-plus', 'cursor-fill', 'crop', 'map-fill', 'stop', 'tiktok', 'file-break-fill', 'dot', 'moon-fill', 'palette-fill', 'sim-fill', 'telephone-x', 'bar-chart-fill', 'bucket', 'arrow-through-heart', 'filetype-gif', 'file-lock2', 'file-earmark-text', 'hand-index', 'collection-play-fill', 'columns', 'balloon-heart-fill', 'file-earmark-lock2-fill', 'stack-overflow', 'chat-square-fill', 'cup', 'hr', 'slash-square-fill', 'signpost-split', 'telephone-plus-fill', 'node-plus-fill', 'box-arrow-in-down-right', 'sliders2', 'chevron-right', 'file-earmark-medical', 'person-exclamation', 'file-image', 'projector-fill', 'pause-fill', 'check-lg', 'filetype-sass', 'cloud-arrow-down-fill', 'calendar', '7-circle', 'bag-check-fill', 'clipboard2', 'repeat-1', 'usb-micro', 'menu-up', 'chat-left-quote', 'instagram', 'valentine', 'x-square-fill', 'buildings', 'arrows-angle-contract', 'cloud-plus-fill', 'pin-map-fill', 'sort-alpha-up-alt', 'router', 'file-earmark-binary-fill', 'palette', 'file-earmark-binary', 'clipboard-x', 'envelope', 'eject', 'projector', 'calendar-month-fill', 'cloud-drizzle', 'building-down', 'chevron-compact-left', 'filetype-ttf', 'toggle-off', 'emoji-expressionless-fill', 'box-arrow-up', 'safe-fill', 'filetype-java', 'p-circle-fill', 'calendar2-month', 'cart-check', 'arrow-right-square', 'bookmark-star-fill', 'easel2', 'palette2', 'postcard-heart', 'folder-symlink-fill', 'megaphone-fill', 'cloud-snow', 'door-closed', 'cloud-moon', 'signpost', 'alt', 'filetype-md', 'layout-three-columns', 'arrow-90deg-up', 'file-earmark-break-fill', 'share-fill', 'android', 'info-square-fill', 'dice-2-fill', 'shield-fill-exclamation', 'dash', 'box-arrow-right', 'filetype-key', 'calendar2-heart', 'arrow-bar-right', 'pause-circle-fill', 'star-fill', 'arrow-90deg-down', 'badge-vo-fill', 'filetype-aac', 'reception-1', 'usb-plug-fill', 'journal-text', 'cash', 'hourglass-split', 'reception-2', 'easel3-fill', 'eye-slash', 'bar-chart', 'cloud-fog-fill', 'filetype-pptx', 'badge-4k', 'camera-reels-fill', 'wrench-adjustable', 'badge-sd-fill', 'globe-americas', 'back', 'chat-square-text-fill', 'filter-square-fill', 'hourglass-top', 'pin-fill', 'clipboard2-heart', 'graph-down-arrow', 'envelope-exclamation', 'align-start', 'battery', 'book-half', 'chat-left-dots', 'stoplights-fill', 'sign-turn-slight-right-fill', 'file-earmark', 'caret-right', 'file-post', 'device-ssd', 'file-earmark-lock2', 'image-alt', 'phone-fill', 'type', 'telephone-forward', 'chat-square-heart', 'pie-chart-fill', 'filetype-xlsx', 'rewind-circle', 'dice-6-fill', 'file-earmark-person-fill', 'chat-square-dots', 'airplane', 'file-earmark-arrow-down-fill', 'scooter', '2-circle-fill', 'file-earmark-diff-fill', 'sign-do-not-enter-fill', 'sd-card', 'clipboard-plus', 'sunset-fill', 'reddit', 'file-word-fill', 'umbrella-fill', 'border-left', 'caret-down-fill', 'globe-europe-africa', 'patch-plus-fill', 'hdd-fill', 'heptagon-half', 'trophy-fill', 'filetype-docx', 'egg', 'pc', 'plugin', 'book', 'envelope-fill', 'cloud-plus', 'bus-front', 'badge-3d-fill', 'filter-square', 'cpu-fill', 'bookmarks', 'mask', 'gear', 'person-check-fill', 'clouds-fill', 'folder-fill', 'building-dash', 'paint-bucket', 'patch-question', 'filetype-php', '3-circle-fill', 'envelope-open-heart-fill', 'box-seam', 'moon-stars-fill', 'pentagon-fill', 'folder-symlink', 'moon', 'input-cursor-text', 'file-earmark-x-fill', 'arrow-return-left', 'stickies-fill', 'file-post-fill', 'puzzle', 'sign-intersection-y', 'building-gear', 'dice-1-fill', 'ui-checks', 'currency-pound', 'file-earmark-plus', 'scissors', 'optical-audio', 'rewind-btn', 'clipboard2-x', 'menu-app', 'binoculars-fill', 'zoom-out', 'c-square', 'cloud-arrow-up-fill', 'grid-3x3-gap-fill', 'rewind-btn-fill', 'exclamation-lg', 'balloon', 'globe2', 'cloud-fog', 'pause-circle', 'arrow-through-heart-fill', 'person-gear', 'badge-8k', 'house-dash', 'coin', 'file-earmark-fill', 'wordpress', 'sign-intersection-side', 'box-arrow-left', 'save-fill', 'filetype.svg', 'mic-mute-fill', 'building-add', 'universal-access', 'truck-front-fill', 'reception-0', 'heartbreak-fill', 'pencil-fill', 'piggy-bank-fill', 'textarea-t', 'shield-lock', 'watch', 'person-plus', 'send-dash-fill', 'badge-vr', 'file-earmark-easel-fill', 'phone-landscape-fill', 'filetype-js', 'receipt', 'mouse-fill', 'file-person', 'quote', '1-square-fill', 'microsoft-teams', 'house-door-fill', 'mouse2', 'memory', 'person-square', 'window-dock', 'ticket-detailed-fill', 'boombox-fill', 'usb-drive', 'exclamation', 'chevron-double-right', 'chat-square-quote', 'database-fill', 'tools', 'journal-richtext', 'folder-check', 'tablet-fill', 'caret-left-fill', 'usb-fill', 'send-plus-fill', 'file-play', 'text-indent-right', 'database-add', 'sign-stop-lights-fill', 'skip-end-circle-fill', 'heart-pulse-fill', 'calendar2-range', 'textarea-resize', 'device-hdd-fill', 'slash-lg', 'file-earmark-zip', 'display-fill', 'database-fill-slash', 'house-lock-fill', 'houses-fill', 'puzzle-fill', 'calendar-day-fill', 'windows', 'bookmark-star', 'inbox-fill', 'forward', 'bag-check', 'chevron-compact-right', 'brush-fill', 'hammer', 'unlock', 'dash-square', 'emoji-smile-upside-down-fill', 'chat-left-dots-fill', 'cup-fill', 'explicit', 'bookmark-check-fill', 'camera2', 'webcam', 'hand-index-thumb-fill', 'prescription2', '123', 'diagram-2-fill', 'paperclip', 'lungs', 'text-left', 'stoplights', 'exclamation-triangle-fill', 'mortarboard', 'sign-merge-left-fill', 'emoji-neutral-fill', 'camera', '0-circle-fill', 'lock-fill', 'file-music', 'file-earmark-check-fill', 'balloon-heart', 'telephone-inbound', 'diagram-3-fill', 'dice-1', 'sign-intersection-fill', 'shield-minus', 'filetype-wav', 'database-lock', 'mailbox2', 'chat-left-text-fill', 'database-exclamation', 'hdd-stack-fill', 'dash-square-fill', 'square-half', 'dice-6', 'incognito', 'keyboard-fill', 'border-center', 'text-indent-left', 'blockquote-right', 'fullscreen-exit', 'file-ruled-fill', 'sun-fill', 'ev-front-fill', 'check2-circle', 'file-arrow-up', 'command', 'person-fill-up', 'usb', 'filter', 'disc-fill', 'globe-asia-australia', 'person-up', 'question-diamond', 'person-fill-add', 'arrow-left-square', 'clipboard-plus-fill', 'caret-down', 'sort-alpha-down-alt', 'brightness-low', 'calendar2-check-fill', 'file-earmark-minus-fill', 'emoji-kiss', 'skip-start-fill', 'sign-railroad', 'file-earmark-ruled', 'piggy-bank', 'arrow-up-left-circle', 'building-check', 'outlet', 'person-fill-x', 'envelope-heart-fill', 'rewind-fill', 'funnel-fill', '4-circle', 'check-square', 'person-heart', 'arrow-return-right', 'thermometer-sun', 'fire', 'record2-fill', 'code', 'shield-shaded', 'file-arrow-down-fill', 'tag', 'tablet-landscape-fill', 'toggles2', 'gear-wide-connected', 'lightning-charge-fill', 'arrow-up-left-circle-fill', 'arrow-down-right-circle', 'bar-chart-line-fill', 'house-heart-fill', 'tv', 'ear', 'database-fill-check', 'heptagon', 'vr', 'eye-fill', 'paragraph', 'symmetry-vertical', 'file-earmark-ppt', 'basket2-fill', 'stop-circle', 'signpost-2-fill', 'shield-fill-minus', 'badge-cc-fill', 'power', 'box-fill', '9-square', 'database-fill-dash', 'clipboard2-fill', 'arrow-up-right-circle', '4-square-fill', 'box-arrow-down', 'house-x-fill', 'text-right', 'peace-fill', 'file-plus-fill', 'person-hearts', 'upload', 'textarea', 'dash-circle-fill', 'house-up', 'sign-merge-left', 'house-up-fill', 'lightning-charge', 'linkedin', 'clipboard-fill', 'inboxes', 'bookmark-x', 'key', 'file-earmark-x', 'pause-btn-fill', 'nvidia', 'border-outer', 'house-dash-fill', 'r-square-fill', 'database-fill-gear', 'currency-exchange', 'volume-off', 'chevron-expand', 'layout-text-window', 'window-dash', 'list-ol', 'train-front', 'heptagon-fill', 'arrow-down-circle', 'suit-club', 'cloud-upload', 'ev-front', 'box-arrow-down-left', 'arrow-down-right', 'cloud-arrow-down', 'box-arrow-up-right', 'clipboard2-plus-fill', 'border-top', 'file-earmark-code', 'envelope-paper-fill', 'skip-start-circle', 'grid-3x3-gap', 'volume-up', 'water', 'arrow-down-right-square-fill', 'person-fill-gear', 'grid-1x2-fill', 'search', 'virus', 'person-fill-exclamation', 'file-richtext-fill', 'union', 'cassette', 'bookmark-x-fill', 'house-check-fill', 'sign-turn-slight-right', 'emoji-kiss-fill', 'emoji-smile', 'clipboard2-minus', 'border-width', 'box-arrow-in-up', 'file-easel', 'filetype-bmp', 'file-code-fill', 'sliders', 'filetype-sql', 'paypal', 'bell-fill', 'database-x', 'bricks', 'cloud-download', 'pin-angle-fill', 'chat-right-heart', 'cloud-sleet', 'fuel-pump-diesel-fill', 'skype', 'reply-all', 'file-ruled', 'eye', 'sign-railroad-fill', 'clock', 'x-diamond', 'slash-circle-fill', 'border-all', 'playstation', 'valentine2', 'database-slash', 'bookmark-plus', 'calendar3-range', 'calculator', 'file-image-fill', 'save2', 'box', 'wallet2', 'grid-3x3', 'dpad', 'house-slash-fill', 'distribute-vertical', 'plus-square', 'send-dash', 'exclamation-triangle', 'plus-square-fill', 'virus2', 'filetype-json', 'bar-chart-line', '2-circle', 'diamond', 'bookmark-dash-fill', 'flag-fill', 'cloud-sleet-fill', 'hexagon', 'emoji-angry', 'graph-up-arrow', 'ethernet', 'clipboard-heart', 'ticket-perforated', 'calendar3-week-fill', 'chat-square-quote-fill', 'file-earmark-arrow-down', 'handbag-fill', 'yin-yang', '8-square', 'file-minus-fill', 'house-add-fill', 'chevron-up', 'gender-male', 'universal-access-circle', 'keyboard', 'cc-circle', 'envelope-paper-heart', 'file-earmark-image-fill', 'x-circle', 'badge-tm-fill', 'text-wrap', 'signpost-2', 'easel-fill', 'pen-fill', 'wallet', 'thermometer-half', 'emoji-frown-fill', 'modem', 'twitch', 'capsule', 'chevron-bar-contract', 'filetype-scss', 'node-minus', 'emoji-frown', 'shield-fill-check', 'buildings-fill', 'currency-euro', 'suit-club-fill', 'file-earmark-word-fill', 'geo-alt-fill', 'info-circle', 'chat-left-quote-fill', 'file-lock', 'thunderbolt-fill', 'shield-plus', '0-square-fill', 'arrow-down-right-circle-fill', 'align-bottom', '4-square', 'file-check-fill', 'truck-flatbed', 'calendar2-week-fill', 'arrows-fullscreen', 'droplet-half', 'people-fill', 'chevron-down', 'robot', 'arrow-up-right-square-fill', 'box-arrow-in-down-left', 'octagon', 'grid-3x2', 'cloud-minus', 'train-freight-front-fill', 'file-earmark-break', 'file-code', 'facebook', 'record-btn-fill', 'filetype-png', 'cloud-check-fill', 'chevron-bar-up', 'phone-landscape', 'slash-circle', 'usb-mini', 'toggle-on', 'shift-fill', 'safe2-fill', 'mouse', 'lightbulb', 'cloud-haze', 'subscript', 'behance', 'check-circle-fill', 'file-zip', 'bank', 'speedometer2', 'chat-left-fill', 'emoji-sunglasses', 'display', 'toggle2-on', 'alarm', 'basket2', 'currency-dollar', 'prescription', 'postage-fill', 'shield-slash-fill', 'chat-right-fill', 'caret-up-fill', 'tablet-landscape', 'chat-left-heart', 'battery-half', 'download', 'caret-down-square-fill', 'link', 'send-x', 'mouse3', 'box2-heart-fill', 'chat-dots-fill', 'cloud-moon-fill', 'envelope-at', 'plug', 'calendar-plus-fill', 'skip-start', 'slack', 'calendar2-minus-fill', 'file-ppt', 'justify', 'building-fill-dash', 'hdd-rack', 'bookmark-dash', 'binoculars', 'cloud-check', 'house-lock', 'patch-plus', 'postage-heart-fill', 'displayport-fill', 'egg-fill', 'play', 'dash-circle', 'skip-forward-btn-fill', 'sign-no-right-turn', 'houses', 'node-plus', 'twitter', 'brightness-alt-low-fill', 'envelope-slash', 'triangle-fill', 'emoji-laughing', 'dice-5', 'file-earmark-person', 'train-lightrail-front', 'r-circle-fill', 'shield', 'window-fullscreen', 'sunset', 'building-slash', 'chevron-compact-up', 'stop-circle-fill', 'filetype-html', 'file-earmark-easel', 'circle-fill', 'person-rolodex', 'arrow-left-right', 'clipboard2-heart-fill', 'app-indicator', 'folder-x', 'journal-minus', 'calendar2-plus-fill', 'ticket', 'octagon-fill', 'sticky-fill', 'peace', 'bookmark-check', 'exclamation-square-fill', 'thermometer-high', 'person-bounding-box', 'table', 'cloud-fog2', 'dice-4-fill', 'stars', 'ticket-fill', 'clouds', 'arrow-90deg-right', 'soundwave', 'cloud-hail', 'arrow-up-left-square-fill', 'ubuntu', 'calendar-check-fill', '3-square', 'file-lock-fill', 'broadcast', 'chat-heart', 'skip-backward-btn', 'chat-text-fill', '1-circle', 'journal-x', 'arrow-down-left-square-fill', 'star-half', 'cursor-text', 'wallet-fill', 'android2', 'info-circle-fill', 'person-fill-slash', 'send-check', 'house-check', 'triangle-half', 'exclamation-circle', 'hexagon-fill', 'door-open-fill', 'file-earmark-excel', 'database-fill-add', 'grip-vertical', 'diamond-half', 'skip-start-circle-fill', 'fast-forward-fill', 'hypnotize', 'airplane-engines-fill', 'calendar-day', 'arrow-90deg-left', 'clipboard-minus-fill', 'file-slides-fill', 'layout-sidebar-inset', 'lightbulb-fill', 'view-list', 'yelp', 'badge-4k-fill', 'house-add', 'tencent-qq', 'browser-firefox', 'bootstrap-fill', 'hdmi', 'envelope-dash', 'telegram', 'type-h1', 'nintendo-switch', 'person-workspace', 'person-fill-down', 'calendar-date-fill', 'heart-arrow', 'arrow-right-square-fill', 'bag-x', 'flower2', 'suit-spade-fill', 'file-text', 'skip-forward', 'building-fill-up', 'diagram-3', 'bookshelf', 'camera-video-off', 'tsunami', 'emoji-dizzy-fill', 'skip-end-btn-fill', 'skip-forward-btn', 'stripe', 'clipboard-data-fill', 'hourglass-bottom', 'qr-code-scan', 'exclamation-circle-fill', 'volume-up-fill', 'file-spreadsheet-fill', 'calendar-range', 'file-check', 'bank2', 'credit-card-fill', 'file-earmark-music-fill', 'card-text', 'chat-quote-fill', 'building-exclamation', 'balloon-fill', 'file-diff-fill', 'p-circle', 'bag-heart', 'wifi', 'file-break', 'arrow-right-short', 'train-freight-front', 'displayport', 'envelope-dash-fill', '6-circle-fill', 'escape', 'slash', 'wifi-off', '8-circle-fill', 'stop-fill', 'person-fill-lock', 'chat-text', 'speaker', 'gender-trans', 'chat-dots', 'repeat', 'cloud-minus-fill', 'chat-right-heart-fill', 'house-gear', 'backspace-reverse', 'journals', 'cash-stack', 'file-diff', 'shield-check', 'calendar2-month-fill', 'cart', 'calendar2-check', 'filetype-cs', 'window', 'file-minus', 'spotify', 'cart-plus', 'envelope-x-fill', 'ui-checks-grid', 'filetype-txt', 'file-earmark-pdf-fill', 'hourglass', 'hearts', 'filetype-woff', 'image', 'mastodon', 'layout-text-sidebar-reverse', 'trash2-fill', 'clipboard2-check-fill', 'inboxes-fill', 'person-video3', 'bicycle', 'bezier2', 'capsule-pill', 'chevron-compact-down', 'eraser', 'inbox', 'cup-hot-fill', 'pen', 'upc', 'file-spreadsheet', 'arrow-down-square-fill', 'info', 'file', 'file-earmark-arrow-up', 'reply-fill', 'vector-pen', 'hand-index-fill', 'cart-fill', 'mortarboard-fill', 'sign-merge-right', 'filetype-csv', 'cloud-download-fill', 'chevron-bar-expand', 'gift', 'caret-right-fill', 'folder2-open', 'gift-fill', 'collection-play', 'file-text-fill', 'octagon-half', 'stop-btn-fill', 'plug-fill', 'p-square', 'question-octagon', 'star', 'capslock-fill', 'envelope-paper', 'terminal-split', 'search-heart', 'wifi-1', 'person-vcard-fill', 'calendar2', 'sign-stop-lights', 'type-strikethrough', 'justify-right', 'microsoft', 'strava', 'caret-down-square', 'pci-card', 'flag', 'journal-medical', 'type-underline', 'sign-yield-fill', 'square', 'file-person-fill', 'folder', 'infinity', 'pc-horizontal', 'house', 'house-heart', 'house-x', 'calendar-minus', 'battery-full', 'cc-circle-fill', 'patch-minus', 'toggles', 'file-earmark-slides-fill', 'file-earmark-bar-graph-fill', 'plus', 'layers-half', 'shield-slash', 'send-slash', 'telephone-outbound-fill', 'alexa', 'bounding-box-circles', 'distribute-horizontal', 'basket-fill', 'chat-right-text', 'chat-fill', 'card-checklist', 'dribbble', 'headset-vr', 'record', 'calendar3-week', 'chat-left-heart-fill', 'postage', '1-square', 'file-bar-graph-fill', 'arrow-down-right-square', 'patch-exclamation', 'truck-front', 'tablet', 'h-circle-fill', 'person-video2', 'badge-cc', 'play-btn', 'hand-thumbs-down-fill', 'arrow-up-left', 'pass', 'building-lock', 'file-earmark-excel-fill', 'taxi-front', 'building-fill-gear', 'sign-turn-left', 'reply', 'justify-left', 'ticket-detailed', 'sd-card-fill', 'arrow-down-left-square', 'slash-square', 'hdd-stack', 'skip-end-btn', 'card-list', 'cart2', '9-square-fill', 'clipboard', 'compass', 'brightness-alt-high-fill', 'forward-fill', 'skip-end-fill', 'trash', 'cone', 'usb-plug', 'filetype-otf', 'database-gear', 'file-richtext', 'skip-backward', 'google-play', 'send', 'calendar2-event-fill', 'exclamation-diamond', 'file-slides', 'layout-sidebar-inset-reverse', 'cart-dash', 'clipboard2-minus-fill', 'person-slash', 'calendar2-day', 'cup-straw', 'app', 'music-note-list', 'grid-3x2-gap', 'arrow-right', 'file-ppt-fill', 'calendar2-date-fill', 'files-alt', 'shield-fill-x', 'briefcase-fill', 'database-fill-exclamation', 'rss-fill', 'building-fill-exclamation', 'arrow-clockwise', 'pip-fill', 'terminal-plus', 'vinyl', 'send-fill', 'envelope-paper-heart-fill', 'file-excel-fill', '4-circle-fill', 'zoom-in', 'radioactive', 'check', 'credit-card', 'caret-left-square-fill', 'discord', 'file-pdf-fill', 'tv-fill', 'server', 'file-binary-fill', 'pencil-square', 'book-fill', 'database-fill-up', 'calendar-x-fill', 'skip-end', 'funnel', 'caret-up', 'file-earmark-lock', 'eraser-fill', 'pentagon', 'file-earmark-medical-fill', 'option', 'postcard', 'x-square', '9-circle-fill', 'arrow-up-circle', 'device-hdd', 'arrow-up-square', 'clipboard2-plus', 'list-stars', 'arrow-up-left-square', 'lamp-fill', 'calendar-week-fill', 'telephone-fill', 'journal-arrow-up', 'hdd-network', 'line', 'clipboard2-x-fill', 'building-up', 'magic', 'laptop-fill', 'mic', 'lightbulb-off-fill', 'dash-lg', 'battery-charging', 'calendar-event', 'at', 'list-nested', '5-circle-fill', 'bootstrap-reboot', 'cloud-fill', 'umbrella', 'clipboard2-data-fill', 'sign-intersection-y-fill', 'h-circle', 'calendar2-x', 'filetype-jsx', 'filetype-mp4', 'info-lg', 'calendar-heart', 'lightning-fill', 'arrow-left-square-fill', 'square-fill', 'sign-intersection', 'patch-minus-fill', 'fuel-pump-diesel', 'kanban-fill', 'bounding-box', 'sign-dead-end', 'exclamation-octagon-fill', 'circle-square', 'box-seam-fill', 'screwdriver', 'camera-reels', 'markdown', 'bell', 'caret-up-square', 'building-fill-x', '5-square', 'asterisk', 'emoji-neutral', 'pin-angle', 'filetype-xls', 'layout-text-window-reverse', 'icons.json', 'filetype-yml', 'bag', 'arrow-right-circle-fill', 'save', 'train-lightrail-front-fill', 'ticket-perforated-fill', 'capslock', 'suit-diamond-fill', 'file-music-fill', 'backspace-reverse-fill', 'credit-card-2-back', 'headphones', 'envelope-slash-fill', 'layout-text-sidebar', 'sign-no-right-turn-fill', 'question-diamond-fill', 'menu-button', 'sign-intersection-t-fill', 'cart-x', 'building-fill-slash', 'xbox', 'browser-edge', 'sign-do-not-enter', 'file-fill', 'list-columns-reverse', 'cone-striped', 'cloudy-fill', 'caret-left', 'cart-plus-fill', 'skip-backward-btn-fill', 'chat-quote', 'volume-down', 'link-45deg', '6-square', 'circle', 'rocket-takeoff-fill', 'whatsapp', 'calendar-check', 'c-square-fill', 'controller', 'box-arrow-in-down', 'easel', 'snow', 'trash-fill', 'dice-5-fill', 'boxes', 'lungs-fill', 'chat-heart-fill', 'clipboard-check', 'unlock-fill', 'sort-up', 'brightness-high', 'stop-btn', 'list-task', 'cloud', 'cloud-lightning', 'explicit-fill', '7-square', 'bag-x-fill', 'gpu-card', 'heart-fill', 'blockquote-left', 'journal-bookmark', 'send-plus', 'safe', 'journal-plus', 'telephone-inbound-fill', 'database-up', 'play-fill', '9-circle', 'sign-no-parking', 'terminal', 'envelope-plus', 'filetype-raw', 'sun', 'cloud-fog2-fill', 'chevron-bar-down', 'tornado', 'trophy', 'clipboard-x-fill', 'toggle2-off', '7-circle-fill', 'calendar-date', 'headset', 'calendar2-event', 'shield-fill', 'brush', 'journal-arrow-down', 'exclamation-diamond-fill', 'layout-split', 'heart', 'arrow-up-square-fill', 'layout-sidebar-reverse', 'file-bar-graph', 'file-easel-fill', 'gender-female', 'nut', 'stickies', 'segmented-nav', 'pc-display-horizontal', 'skip-start-btn-fill', 'ui-radios-grid', 'boombox', 'bluetooth', 'currency-rupee', 'cassette-fill', 'check2', 'menu-down', 'wrench-adjustable-circle', 'bug-fill', 'gem', 'translate', 'file-earmark-diff', 'emoji-smile-fill', 'nut-fill', 'calendar4', 'cast', 'tags-fill', 'arrow-right-circle', 'egg-fried', 'telephone-outbound', 'file-earmark-zip-fill', 'thermometer-low', 'activity', 'sort-numeric-down-alt', 'type-bold', 'volume-down-fill', 'filetype-rb', 'minecart', 'magnet-fill', 'bell-slash-fill', 'person', 'film', 'file-earmark-play', 'calendar2-x-fill', 'phone-vibrate-fill', '0-square', 'x-octagon', 'ev-station', 'person-check', 'rocket', 'plus-circle-fill', 'person-circle', 'cloud-slash-fill', 'handbag', 'skip-backward-circle-fill', 'cart3', 'emoji-laughing-fill', 'mouse3-fill', 'reception-4', 'filetype-jpg', 'filetype-css', 'type-h3', 'arrow-down', 'border-right', 'globe-central-south-asia', 'arrow-left-circle', 'apple', 'arrow-down-left-circle', 'chevron-double-left', 'question-square-fill', 'calendar2-fill', 'calendar2-plus', 'mouse2-fill', 'telephone-forward-fill', 'badge-vo', 'window-sidebar', 'signal', 'cc-square')",
      "doc": "",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "StylePart": {
      "name": "StylePart",
      "markdown": "[StylePart](/reference/prop-types/StylePart)",
      "doc": "\n    The type of a style part.\n\n    The values accepted by this type are `hyperdiv.style()` objects.\n    ",
      "is_parametric": true,
      "is_alias": false,
      "toplevel": false
    },
    "LinkUnderline": {
      "name": "LinkUnderline",
      "markdown": "[LinkUnderline](/reference/prop-types/LinkUnderline)",
      "doc": "\n    A `Bool` type, accepting the values `True` and `False`,\n    determining whether to render an underline on the given\n    component's text.\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "InputAutoCapitalize": {
      "name": "InputAutoCapitalize",
      "markdown": "[Optional](/reference/prop-types/Optional)([OneOf](/reference/prop-types/OneOf)('none', 'characters', 'sentences', 'words', 'on', 'off'))",
      "doc": " The auto-capitalize setting of the text input field.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "InputAutoCorrect": {
      "name": "InputAutoCorrect",
      "markdown": "[Optional](/reference/prop-types/Optional)([OneOf](/reference/prop-types/OneOf)('off', 'on'))",
      "doc": " Whether input auto correct is turned on in the text input field.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "InputEnterKeyHint": {
      "name": "InputEnterKeyHint",
      "markdown": "[Optional](/reference/prop-types/Optional)([OneOf](/reference/prop-types/OneOf)('previous', 'next', 'search', 'done', 'send', 'enter', 'go'))",
      "doc": " Defines the behavior of the enter key while typing in the text\n field. See more [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint).",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "InputMode": {
      "name": "InputMode",
      "markdown": "[Optional](/reference/prop-types/Optional)([OneOf](/reference/prop-types/OneOf)('text', 'none', 'numeric', 'search', 'email', 'url', 'tel', 'decimal'))",
      "doc": " Determines the kind of virtual keyboard to show when typing in\n the text input. See more [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode).",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "ShoelaceSize": {
      "name": "ShoelaceSize",
      "markdown": "[OneOf](/reference/prop-types/OneOf)('small', 'medium', 'large')",
      "doc": " The size of the component.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "Snap": {
      "name": "Snap",
      "markdown": "[Snap](/reference/prop-types/Snap)",
      "doc": "\n    This type defines a sequence of snap points for use in\n    @component(split_panel).\n\n    It accepts either a tuple of @prop_type(Size) values or a string\n    concatenating size values by spaces. If a string is given, the\n    string will be parsed into a tuple of @prop_type(Size) values.\n\n    Examples of accepted values:\n\n    ```py\n    \"50px 50% 300px\"\n    (\"50px\", \"50%\", \"300px\")\n    ```\n\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "Keyframe": {
      "name": "Keyframe",
      "markdown": "[Keyframe](/reference/prop-types/Keyframe)",
      "doc": "The definition of a keyframe type.",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "ShoelaceVariant": {
      "name": "ShoelaceVariant",
      "markdown": "[OneOf](/reference/prop-types/OneOf)('warning', 'neutral', 'primary', 'success', 'danger')",
      "doc": " The variant of the component.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "ShoelacePlacement": {
      "name": "ShoelacePlacement",
      "markdown": "[OneOf](/reference/prop-types/OneOf)('right-end', 'right-start', 'bottom-start', 'top', 'bottom-end', 'left-start', 'left-end', 'top-start', 'right', 'left', 'bottom', 'top-end')",
      "doc": " The placement of the component. `start` and `end` mean left/right or\n top/bottom depending on the base orientation. For example top-start\n means top-left, and right-start means right-top.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "TooltipTrigger": {
      "name": "TooltipTrigger",
      "markdown": "[OneOrMoreOf](/reference/prop-types/OneOrMoreOf)('hover', 'manual', 'focus', 'click')",
      "doc": "\n    Used in @component(tooltip) to define the interaction by which a\n    tooltip becomes visible.\n    ",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "ProgressIndicatorColor": {
      "name": "ProgressIndicatorColor",
      "markdown": "[Optional](/reference/prop-types/Optional)([Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([Color](/reference/design-tokens/Color)), [ColorConstant](/reference/prop-types/ColorConstant)))",
      "doc": " The color of the progress indicator.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "ProgressTrackColor": {
      "name": "ProgressTrackColor",
      "markdown": "[Optional](/reference/prop-types/Optional)([Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([Color](/reference/design-tokens/Color)), [ColorConstant](/reference/prop-types/ColorConstant)))",
      "doc": " The track color of the progress indicator.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "ProgressTrackWidth": {
      "name": "ProgressTrackWidth",
      "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([Spacing](/reference/design-tokens/Spacing)), [BaseSize](/reference/prop-types/BaseSize))",
      "doc": " The track width of the progress indicator.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "CarouselAspectRatio": {
      "name": "CarouselAspectRatio",
      "markdown": "[Native](/reference/prop-types/Native)(str, coercible_types=[object])",
      "doc": " The aspect ratio of the carousel or carousel item.",
      "is_parametric": false,
      "is_alias": true,
      "toplevel": false
    },
    "LocationPart": {
      "name": "LocationPart",
      "markdown": "[LocationPart](/reference/prop-types/LocationPart)",
      "doc": "\n    This type is used by @component(location) to express location\n    parts. It takes a string but it rejects strings containing the\n    characters `\"?\"` or `\"#\"`.\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "PathString": {
      "name": "PathString",
      "markdown": "[PathString](/reference/prop-types/PathString)",
      "doc": "\n    This type is used by @component(location) to express the location path.\n    It takes a string but:\n\n    * It rejects path strings containing the characters `\"?\"` or `\"#\"`.\n    * If the path string is \"/\", it leaves it as is.\n    * If the path string is empty, it sets it to \"/\".\n    * If the path ends in \"/\", it strips the trailing \"/\". So\n      \"/foo/bar/\" is set to \"/foo/bar\"\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "Markdown": {
      "name": "Markdown",
      "markdown": "[Markdown](/reference/prop-types/Markdown)",
      "doc": "This type accepts markdown text and renders it to HTML.",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    },
    "ImageSrc": {
      "name": "ImageSrc",
      "markdown": "[ImageSrc](/reference/prop-types/ImageSrc)",
      "doc": "\n    The type of an @component(image) `src` prop.\n\n    It accepts the following value shapes:\n\n    (a) A string that is either a (local or remote) path to an\n    image. This is the most common case. For example\n    `\"/assets/my-image.jpg\"` or `\"https://url.com/path/to/image.png\"`.\n\n    (b) A string that contains browser-ready base64-encoded image\n    bytes. The string must take this shape, otherwise the browser will\n    not be able to render it:\n\n    ```sh\n    \"data:{mime_type};base64,{the_actual_base64_string}\"\n    ```\n\n    The `{mime_type}` can generally be left blank, and browsers will\n    auto-infer it. See here for a list of mime types:\n    https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n\n    (c) Raw image bytes. The bytes will automatically be converted to a\n    browser-ready base64 string. The image mime type will be left\n    blank, letting the browser infer it.\n\n    (d) A tuple `(image_bytes, mime_type)`. Same as (c), but allows\n    explicitly adding a mime type. The mime type will be passed on to\n    the browser verbatim.\n\n    Note that if you explicitly set a mime type, browsers will\n    likely ignore it if it doesn't match what the browser inferred\n    from the bytes. In general it's safe to not worry about mime types.\n    ",
      "is_parametric": false,
      "is_alias": false,
      "toplevel": false
    }
  },
  "design_tokens": [
    "Spacing",
    "Shadow",
    "BorderRadius",
    "FontFamily",
    "FontSize",
    "FontWeight",
    "LetterSpacing",
    "LineHeight",
    "Color"
  ],
  "components": {
    "index_page": {
      "component_type": "function",
      "sig": "index_page(\n    title=\"Hyperdiv\",\n    description=None,\n    keywords=None,\n    url=None,\n    image=None,\n    twitter_card_type=\"summary_large_image\",\n    favicon=None,\n    favicon_16=None,\n    favicon_32=None,\n    apple_touch_icon=None,\n)\n",
      "doc": "\n    This function generates the app's HTML index page that is served\n    to the browser when users load the app's URL. It generates SEO meta\n    tags as well as Twitter (`twitter:`) and Meta OpenGraph (`og:`)\n    tags, so Twitter/Meta will generate nice-looking preview cards\n    when the app is shared on these platforms.\n\n    This function's only use is to pass its return value into the\n    `index_page` parameter of Hyperdiv's @component(run) function.\n\n    Passing `title`, `description`, `url`, `favicon`, and `image`,\n    should be enough to generate a useful set of meta tags.\n\n    Parameters:\n\n    * `title`: The title of the app.\n    * `description`: A short one-line description of the app.\n\n    * `keywords`: An iterable of short keywords describing the app, or\n      a comma-separated string of keywords.\n\n    * `url`: The external full URL of the app, for example\n      `\"https://my-app.foo.com\"`.\n\n    * `image`: A full URL to an image that should be included in\n      previews when sharing the app on social media. For example\n      `\"https://my-app.foo.com/my-app-image.png\"`.\n\n    * `twitter_card_type`: One of `\"summary\"` or\n      `\"summary_large_image\"`. The former causes Twitter to render a\n      smaller card with the image to the left of the\n      title/description, when the app's URL is shared on Twitter. The\n      latter causes a larger card to be rendered, where the image is\n      prominently displayed above the title/description.\n\n    * `favicon`: A URL pointing to a favicon. Can be a local URL like\n      `\"/assets/favicon.png\"`. The favicon is an icon displayed next\n      to the title in browser tab headers.\n\n    * `favicon_16`: A URL pointing to the 16x16px version of the favicon.\n\n    * `favicon_32`: A URL pointing to the 32x32px version of the favicon.\n\n    * `apple_touch_icon`: A URL pointing to the Apple touch icon. This\n      is a favicon specifically used by Apple software in certain\n      situations. A recommended size is 180x180px. If this isn't\n      specified, the favicon will be used.\n\n    "
    },
    "run": {
      "component_type": "function",
      "sig": "run(app_function, task_threads=10, executor=None, index_page=None)\n",
      "doc": "\n    The entrypoint into Hyperdiv.\n\n    When calling `run(app_function)`, Hyperdiv will start a web server\n    ready to serve the app defined by `app_function`, on a local\n    port. A user can connect a web browser to this port to interact\n    with the app. The call to `run` will block until Hyperdiv exits.\n\n    Hyperdiv listens for signals SIGINT and SIGTERM and will cleanly\n    exit the web server when receiving one of those signals. For\n    example, pressing Ctrl-C in the terminal where Hyperdiv is running\n    will cause Hyperdiv to exit.\n\n    Parameters:\n    * `app_function`: The function implementing the Hyperdiv app.\n\n    * `task_threads`: The number of threads to run in the internal\n      [ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html)\n      used for running asynchronous @component(task) functions.\n\n    * `executor`: A\n      [ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html)\n      in which to run @component(task) functions. If this argument is\n      non-`None`, `task_threads` will be ignored.\n\n    * `index_page`: An index page generated with @component(index_page).\n\n    * `port`: The port on which to start the web server. By default,\n      the port is `8888`. Alternatively, the port can be set with the\n      `HD_PORT` environment variable.\n\n    "
    },
    "cached": {
      "component_type": "function",
      "sig": "cached(fn)\n",
      "doc": "\n    To help improve performance when building large, modular apps,\n    Hyperdiv functions that generate UI components can be wrapped in\n    `@cached` to avoid re-running those function calls if their read\n    dependencies have not changed.\n\n    For example:\n\n    ```py\n    @hd.cached\n    def my_counter(label):\n       state = hd.state(count=0)\n       with hd.box(\n           gap=1,\n           padding=1,\n           border=\"1px solid neutral-100\",\n           border_radius=1,\n       ):\n           hd.markdown(f\"### {label}\")\n           hd.text(state.count)\n           if hd.button(\"Increment\").clicked:\n               state.count += 1\n\n    my_counter(\"Counter\")\n    my_counter(\"Counter\")\n    ```\n\n    In this example. If we click the `Increment` button in the first\n    counter, that first call to `my_function(\"Counter\")` will re-run,\n    because its read dependency on `button.clicked` is invalidated.\n    But the second call will *not* re-run, since its read dependencies\n    have not changed.\n\n    Similarly, if we click the button in the second counter, the first\n    call to `my_function(\"Counter\")` will not rerun. Instead, the\n    cached UI generated by the previous call to the function will be\n    reused.\n    "
    },
    "Prop": {
      "component_type": "class",
      "sig": "Prop(\n    prop_type,\n    default_value=None,\n    name=None,\n    ui_name=None,\n    backend_immutable=False,\n    internal=False,\n)\n",
      "doc": null,
      "class_doc": "A `Prop` is a descriptor that proxies reads and writes to its\n    corresponding `StoredProp` which is stored in `State`. A `Prop` is\n    (a) the static description of the prop, including its name, type,\n    and default value, and (b) a read/write proxy to its `StoredProp`.\n\n    See how descriptors work:\n\n    https://docs.python.org/3/howto/descriptor.html\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [],
      "is_mixin": true
    },
    "template": {
      "component_type": "class",
      "sig": "template(\n    logo=None,\n    title=None,\n    sidebar=True,\n    theme_switcher=True,\n    responsive_threshold=1000,\n    responsive_topbar_links_threshold=600,\n)\n",
      "doc": "\n        Parameters:\n\n        * `logo`: The path to a logo image,\n          e.g. `/assets/logo.svg`. The logo will be rendered in the\n          top-left corner of the app.\n\n        * `title`: The title of the app, rendered in the top-left\n          next to the logo.\n\n        * `sidebar`: Whether to render a sidebar.\n\n        * `theme_switcher`: Whether to render the theme/dark-mode\n          switcher in the top-right.\n\n        * `responsive_threshold`: The width of the window (in pixels),\n          below which the sidebar is rendered as a togglable drawer\n          instead of as an in-line sidebar.\n\n        * `responsive_topbar_links_threshold`: The width of the window\n          (in pixels) below which the topbar icons are rendered as\n          icon+hover tooltip instead of icon+name.\n        ",
      "class_doc": "\n    Provides an app template for building apps with a top-bar,\n    sidebar, sidebar navigation menu, logo, title, dark mode switcher,\n    and top-bar links.\n\n    Typical usage:\n\n    ```py-nodemo\n    app = hd.template(title=\"Hello\", logo=\"/assets/logo.svg\")\n    app.add_sidebar_menu(my_menu)\n    app.add_topbar_links(my_links)\n    with app.body:\n        my_app_contents()\n    ```\n\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "sidebar",
          "sig": "sidebar # read-only property",
          "doc": "\n        The sidebar container, a @component(box).\n\n        If the template was constructed with `sidebar=False`, this\n        property evaluates to `None`.\n        "
        },
        {
          "method_name": "add_sidebar_menu",
          "sig": "add_sidebar_menu(self, link_dict, expanded=False)",
          "doc": "\n        Adds a @component(navigation_menu) to the sidebar. `link_dict` is\n        passed to @component(navigation_menu) to construct the menu\n        and add it to the sidebar container.\n\n        The template's `drawer` property is passed into the navigation\n        menu as its `drawer` kwarg, so the drawer is auto-closed when\n        a link is clicked.\n\n        The `expanded` kwarg is passed down to\n        @component(navigation_menu), causing the menu sections to stay\n        expanded if `True`.\n\n        If the template was constructed with `sidebar=False`, calling\n        this function will raise an error.\n        "
        },
        {
          "method_name": "topbar_links",
          "sig": "topbar_links # read-only property",
          "doc": "The topbar links container, a @component(box)."
        },
        {
          "method_name": "add_topbar_link",
          "sig": "add_topbar_link(self, icon, name, href)",
          "doc": "\n        Adds a @component(icon_link) component to the `topbar_links`\n        container. The `icon`, `name`, and `href` components are\n        passed to the @component(icon_link) constructor.\n\n        The app template's `responsive_topbar_links_threshold` setting\n        is passed down as @component(icon_link)'s\n        `responsive_threshold` parameter.\n        "
        },
        {
          "method_name": "add_topbar_links",
          "sig": "add_topbar_links(self, link_dict)",
          "doc": "\n        Adds multiple @component(icon_link) components to the\n        `topbar_links` container in one shot.\n\n        The `link_dict` syntax is the same as the `linked_dict` passed\n        to @component(navigation_menu), but only flat menus are\n        supported in this case.\n        "
        },
        {
          "method_name": "body",
          "sig": "body # read-only property",
          "doc": "\n        The app's main container, where the main content is\n        rendered. A @component(box).\n        "
        },
        {
          "method_name": "app_title",
          "sig": "app_title # read-only property",
          "doc": "\n        The app's title container, a @component(box).\n\n        This container usually holds the logo and the title, passed to\n        the template using the `logo` and `title` kwargs.\n\n        If you want to place custom content in this container, leave\n        the `logo` and `title` kwargs blank, and instead place\n        components into this container.\n        "
        },
        {
          "method_name": "drawer_title",
          "sig": "drawer_title # read-only property",
          "doc": "\n        The drawer's title container, a @component(box).\n\n        This container plays the same role as the `app_title`\n        container, but in the app's drawer instead of on the base page.\n\n        This container usually holds the same exact contents as the\n        `app_title` container when you use the `logo` and `title`\n        kwargs to construct the template.\n\n        If you want to place custom contents in the drawer title area,\n        omit those kwargs and instead place components into this\n        container.\n\n        Note that if you place custom components in the `app_title`\n        container, those components will not be added to the\n        `drawer_title` container.\n\n        If the template was constructed with `sidebar=False`, this\n        property evaluates to `None`.\n        "
        },
        {
          "method_name": "drawer",
          "sig": "drawer # read-only property",
          "doc": "\n        The drawer component, a @component(drawer).\n\n        Normally you shouldn't need to manipulate the drawer, but\n        sometimes it may be useful to programmatically set its\n        `opened` prop to open/close the drawer.\n\n        If the template was constructed with `sidebar=False`, this\n        property evaluates to `None`.\n        "
        },
        {
          "method_name": "header",
          "sig": "header # read-only property",
          "doc": "\n        The header container, a @component(box).\n\n        This container holds the `app_title` and `topbar_links`\n        containers, and the theme switcher.\n        "
        }
      ],
      "superclasses": [],
      "is_mixin": true
    },
    "router": {
      "component_type": "class",
      "sig": "router()\n",
      "doc": null,
      "class_doc": "\n    Router is useful when building apps with multiple pages. You\n    define each page as a function, decorated with its location path,\n    and the router will render the right page based on the browser's\n    location path.\n\n    ### Basic Use\n\n    The router must be instantiated outside the app, at the global\n    level, and app routes are defined using `router.route(path)` as a\n    decorator:\n\n    ```py-nodemo\n    import hyperdiv as hd\n\n    router = hd.router()\n\n    @router.route(\"/\")\n    def home():\n       ...\n\n    @router.route(\"/users\")\n    def users():\n       ...\n\n    def main():\n        router.run()\n\n    hd.run(main)\n    ```\n\n    `router.run()` will call the correct page function based on the\n    browser's @component(location) path. If the browser's path is\n    `\"/users\"`, it will call `users()`. If the path is `\"/\"`, it will\n    call `home()`.\n\n    If the path is an unspecified route, a built-in \"not found\" page\n    is rendered. This page can be customized.\n\n    ### Route Parameters\n\n    Router supports route parameters using\n    [parse](https://pypi.org/project/parse/) syntax.\n\n    ```py-nodemo\n    @router(\"/users/{user_id}\")\n    def users(user_id):\n       ...\n    ```\n\n    In this example, if users navigate to \"/users/123\" in the browser,\n    the router will invoke `users(\"123\")`.\n\n    Multiple parameters are supported:\n\n    ```py-nodemo\n    @router(\"/org/{org_id}/users/{user_id}\")\n    def user(org_id, user_id):\n       ...\n    ```\n\n    In this case, if users navigate to \"/org/123/users/456\", the\n    router will call `users(\"123\", \"456\")`.\n\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "route",
          "sig": "route(self, path, redirect_from=None)",
          "doc": "The main decorator for defining routes:\n\n        ```py-nodemo\n        @router.route(\"/foo\")\n        def foo():\n            hd.text(\"The foo page.\")\n        ```\n\n        `redirect_from` can be a tuple of paths, such that if the user\n        navigates to any those paths, they will be redirected to this\n        route.\n\n        In this example, if the user navigates to either \"/\" or\n        \"/foo\", the location will change to \"/foo/bar\" and route\n        `bar()` will be rendered:\n\n        ```py-nodemo\n        @router.route(\"/foo/bar\", redirect_from=(\"/\", \"/foo\"))\n        def bar():\n            hd.text(\"The bar page.\")\n        ```\n        "
        },
        {
          "method_name": "not_found",
          "sig": "not_found # read-only property",
          "doc": "\n        A decorator for defining a custom \"Not Found\" page, to be rendered\n        when a user navigates to an undefined path.\n\n        ```py-nodemo\n        @router.not_found\n        def my_custom_not_found_page():\n            with hd.box(gap=1):\n                hd.markdown(\"# Not Found\")\n                hd.text(\"There is nothing here.\")\n        ```\n        "
        },
        {
          "method_name": "render_not_found",
          "sig": "render_not_found(self)",
          "doc": "\n        This method can be used to programmatically invoke the `not_found` route.\n\n        ```py-nodemo\n        @router(\"/users/{user_id}\")\n        def user(user_id):\n            u = get_user(user_id)\n            if not u:\n                router.render_not_found()\n            else:\n                hd.text(u.name)\n        ```\n        "
        },
        {
          "method_name": "run",
          "sig": "run(self)",
          "doc": "\n        Calls the correct route function based on the current\n        @component(location) path. If there is no route corresponding\n        to the current path, it renders the `not_found` route.\n        "
        }
      ],
      "superclasses": [],
      "is_mixin": true
    },
    "navigation_menu": {
      "component_type": "function",
      "sig": "navigation_menu(link_dict, drawer=None, expanded=False)\n",
      "doc": "\n    Renders a navigation menu component. The menu is wrapped in a\n    @component(nav) and uses @component(link) for each link.\n\n    `link_dict` is a dictionary specifying the menu, which can be\n    either a flat menu, or a two-level hierarchical menu.\n\n    `drawer` is an optional @component(drawer). If a drawer is passed,\n    when a link is clicked, the drawer is automatically closed. This is\n    a niche use case for @component(template), where a navigation menu\n    is rendered in the sidebar drawer.\n\n    If `expanded` is `True`, the menu sections will render fully\n    expanded and are not collapsible.\n\n    ### Flat Menu\n\n    ```py\n    hd.navigation_menu({\n        \"Home\": {\"href\": \"/\"},\n        \"Users\": {\"href\": \"/users\"},\n        \"Google\": {\"href\": \"https://google.com\"},\n    })\n    ```\n    `\"href\"` specifies a path (or external URL) to which Hyperdiv\n    navigates when you click the menu item.\n\n    ### Icons\n\n    Navigation menus support optional prefix icons by setting `\"icon\"`\n    in each link to an icon name:\n\n    ```py\n    hd.navigation_menu({\n        \"Home\": {\"href\": \"/\", \"icon\": \"house\"},\n        \"Users\": {\"href\": \"/users\", \"icon\": \"people\"},\n        \"Google\": {\"href\": \"https://google.com\", \"icon\": \"google\"},\n    })\n    ```\n\n    ### Hierarchical Menu\n\n    `link_dict` also supports a syntax for specifying two-level menus\n    (Section -> Menu) with collapsible sections, by adding an extra\n    level to the `link_dict`:\n\n    ```py\n    hd.navigation_menu({\n        \"Application\": {\n            \"Home\": {\"href\": \"/\", \"icon\": \"house\"},\n            \"Users\": {\"href\": \"/users\", \"icon\": \"people\"},\n        },\n        \"Resources\": {\n            \"Google\": {\"href\": \"https://google.com\", \"icon\": \"google\"},\n            \"Facebook\": {\"href\": \"https://google.com\", \"icon\": \"facebook\"},\n        }\n    })\n    ```\n\n    "
    },
    "theme_switcher": {
      "component_type": "function",
      "sig": "theme_switcher(icon_font_size=\"medium\")\n",
      "doc": "\n    Renders a theme switcher inline icon and dropdown menu. When the\n    icon is clicked, the dropdown menu opens with Dark/Light/System\n    choices. The icon is a \"moon\" icon in dark mode and a \"sun\" icon\n    in light mode.\n\n    This menu remembers the user's setting in browser local storage,\n    so if a user chooses Light or Dark mode, that setting will stick\n    across app visits. If they choose System, the local storage\n    setting is forgotten, as \"System\" is the default.\n\n    ```py\n    hd.theme_switcher()\n    ```\n\n    `icon_font_size` takes @prop_type(Size) values and can be used to\n    control the size of the inline icon.\n\n    ```py\n    hd.theme_switcher(icon_font_size=\"x-small\")\n    hd.theme_switcher(icon_font_size=3)\n    ```\n    "
    },
    "Collector": {
      "component_type": "class",
      "sig": "Collector()\n",
      "doc": null,
      "class_doc": "\n    The base class that collects the children of Hyperdiv components\n    that can have children.\n\n    Should not be instantiated directly.\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [],
      "is_mixin": true
    },
    "Component": {
      "component_type": "class",
      "sig": "Component(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    The base class for all Hyperdiv components.\n\n    Should not be instantiated directly.\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "collect",
          "sig": "collect(self)",
          "doc": "\n        Called when the component is collected into the dom. If the\n        component was constructed with `collect=False`, this method has\n        to be called by the user code. Otherwise it is called\n        automatically when the component is constructed.\n        "
        },
        {
          "method_name": "children",
          "sig": "children # read-only property",
          "doc": "\n        Returns the list of children of this component, if this\n        component can have children. If the component cannot have\n        children, accessing this property raises `ValueError`.\n        "
        },
        {
          "method_name": "render",
          "sig": "render(self)",
          "doc": "\n        Returns the rendered component in the internal Hyperdiv JSON\n        format. This function is used internally, but may be useful\n        for debugging.\n        "
        },
        {
          "method_name": "trigger_event",
          "sig": "trigger_event(self, prop_name, value)",
          "doc": "\n        Triggers the event prop with name `prop_name` by setting its value\n        to `value`.\n        "
        },
        {
          "method_name": "set_prop_delayed",
          "sig": "set_prop_delayed(self, prop_name, prop_value, delay=1)",
          "doc": "\n        Sets the prop with `prop_name` to the value `prop_value` after a\n        delay of `delay` seconds.\n\n        This may be useful for auto-closing an ephemeral alert, dropdown,\n        or dialog, after being shown for some duration of time.\n        "
        },
        {
          "method_name": "reset_prop",
          "sig": "reset_prop(self, prop_name)",
          "doc": "\n        Resets the prop with the given name to initial values, as if it were\n        never mutated.\n        "
        },
        {
          "method_name": "reset_prop_delayed",
          "sig": "reset_prop_delayed(self, prop_name, delay=1)",
          "doc": "\n        Like `set_prop_delayed` but instead of mutating the prop it resets\n        it to its initial value.\n        "
        }
      ],
      "superclasses": [
        "Collector"
      ],
      "is_mixin": false
    },
    "Boxy": {
      "component_type": "class",
      "sig": "Boxy()\n",
      "doc": "\n        `Boxy` cannot be instantiated.\n        ",
      "class_doc": "\n    A collection of props for components that are containers. These\n    props control how the children of the component are organized inside\n    the component.\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "direction",
          "default_value": null,
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('vertical', 'vertical-reverse', 'horizontal-reverse', 'horizontal', None)",
          "prop_doc": "\n    Whether the children of the component are placed side by side\n    (`\"horizontal\"`) or stacked vertically, with each subsequent\n    component being placed below the previous. In the case of the\n    `-reverse` values, the components are rendered in reverse,\n    starting at the opposite edge:\n\n    ```py\n    hd.markdown(\"`horizontal`:\")\n\n    with hd.box(\n        padding=1,\n        gap=1,\n        direction=\"horizontal\",\n        border=\"1px solid red\"\n    ):\n        hd.button(\"B1\")\n        hd.button(\"B2\")\n\n    hd.markdown(\"`horizontal-reverse`:\")\n\n    with hd.box(\n        padding=1,\n        gap=1,\n        direction=\"horizontal-reverse\",\n        border=\"1px solid red\"\n    ):\n        hd.button(\"B1\")\n        hd.button(\"B2\")\n    ```\n\n    The `-reverse` values are rarely used, but they come in handy in\n    niche cases. For example, when building a chat UI, the component\n    that contains the chat messages may be set to\n    `\"vertical-reverse\"`. That way, new messages are naturally inserted\n    at the bottom and the component naturally stays scrolled to the\n    bottom as new messages are inserted."
        },
        {
          "prop_name": "align",
          "default_value": null,
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('stretch', 'center', None, 'start', 'end')",
          "prop_doc": " This prop controls how child components are placed *along the\n direction* of the component. If the component is `\"horizontal\"`,\n this prop controls the horizontal alignment of the children. If\n the component is `\"vertical\"`, this prop controls the vertical\n alignment of the children."
        },
        {
          "prop_name": "justify",
          "default_value": null,
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('space-evenly', 'stretch', 'space-around', 'space-between', 'center', None, 'start', 'end')",
          "prop_doc": " This prop complements `direction` and controls how child\n components are placed on the axis *opposite to the direction* of\n the component. If the component is `\"horizontal\"`, this prop\n controls the *vertical* alignment of the children. If the\n component is `\"vertical\"`, this prop control the *horizontal*\n alignment of the children."
        },
        {
          "prop_name": "gap",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The gap space between the children of the component."
        },
        {
          "prop_name": "horizontal_scroll",
          "default_value": null,
          "immutable": false,
          "markdown": "[Scroll](/reference/prop-types/Scroll)",
          "prop_doc": " Whether this component can scroll horizontally."
        },
        {
          "prop_name": "vertical_scroll",
          "default_value": null,
          "immutable": false,
          "markdown": "[Scroll](/reference/prop-types/Scroll)",
          "prop_doc": " Whether this component can scroll vertically."
        },
        {
          "prop_name": "wrap",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([OneOf](/reference/prop-types/OneOf)('nowrap', 'wrap', 'reverse'))",
          "prop_doc": " Whether the components children should wrap around when they run\n out of space. For example, in a component with\n `direction=\"horizontal\"`, children are placed side by side. When\n there are too many children to fit within the width of the\n component, and `wrap` is set to `\"wrap\"`, the children will wrap\n around onto a new \"row\" starting at the left edge again."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [],
      "is_mixin": true
    },
    "Slottable": {
      "component_type": "class",
      "sig": "Slottable()\n",
      "doc": "\n        `Slottable` cannot be instantiated.\n        ",
      "class_doc": "\n    A base class defining the `slot` prop, which allows a component to\n    be nested within a slot of a parent component. All Hyperdiv UI\n    components, except @component(text), support this interface.\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "slot",
          "default_value": null,
          "immutable": false,
          "markdown": "[SlotType](/reference/prop-types/SlotType)",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [],
      "is_mixin": true
    },
    "Styled": {
      "component_type": "class",
      "sig": "Styled()\n",
      "doc": "\n        `Styled` cannot be instantiated.\n        ",
      "class_doc": "A collection of props defining element style.",
      "tag": null,
      "props": [
        {
          "prop_name": "width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The width of the component."
        },
        {
          "prop_name": "height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The height of the component."
        },
        {
          "prop_name": "min_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The minimum width of the component. The component may be wider\n than this value, but not narrower."
        },
        {
          "prop_name": "min_height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The minimum height of the component. The component may be taller\n than this value, but not shorter."
        },
        {
          "prop_name": "max_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The maximum width of the component. The component may be\n narrower than this value, but not wider."
        },
        {
          "prop_name": "max_height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The maximum height of the component. The component may be\n shorter than this value, but not taller."
        },
        {
          "prop_name": "grow",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Native](/reference/prop-types/Native)(int, coercible_types=[bool]))",
          "prop_doc": " Whether the component should expand to take up as much space as\n it can."
        },
        {
          "prop_name": "shrink",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Native](/reference/prop-types/Native)(int, coercible_types=[bool]))",
          "prop_doc": " Whether the component is allowed to shrink within its parent\n component when other sibling components try to claim space. It\n may be necessary to set `shrink` to `True` in addition to setting\n a `width` or `height` value, to prevent the component from\n shrinking below that value."
        },
        {
          "prop_name": "basis",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Size](/reference/prop-types/Size))",
          "prop_doc": " The basis sets the \"initial size\" allocated to the component\n before its actual size is calculated. If you want children with\n equal-width, it helps to set an equal basis on all of them."
        },
        {
          "prop_name": "border",
          "default_value": null,
          "immutable": false,
          "markdown": "[Border](/reference/prop-types/Border)",
          "prop_doc": " The border of the component. This prop sets the border\n simultaneously for all four edges (top, right, bottom, left)."
        },
        {
          "prop_name": "border_top",
          "default_value": null,
          "immutable": false,
          "markdown": "[BorderEdge](/reference/prop-types/BorderEdge)",
          "prop_doc": " The border of the top edge."
        },
        {
          "prop_name": "border_left",
          "default_value": null,
          "immutable": false,
          "markdown": "[BorderEdge](/reference/prop-types/BorderEdge)",
          "prop_doc": " The border of the left edge."
        },
        {
          "prop_name": "border_bottom",
          "default_value": null,
          "immutable": false,
          "markdown": "[BorderEdge](/reference/prop-types/BorderEdge)",
          "prop_doc": " The border of the bottom edge."
        },
        {
          "prop_name": "border_right",
          "default_value": null,
          "immutable": false,
          "markdown": "[BorderEdge](/reference/prop-types/BorderEdge)",
          "prop_doc": " The border of the right edge."
        },
        {
          "prop_name": "border_radius",
          "default_value": null,
          "immutable": false,
          "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([BorderRadius](/reference/design-tokens/BorderRadius)), [BoxSize](/reference/prop-types/BoxSize))",
          "prop_doc": " The border radius of the component -- how round its corners\n are. When using @prop_type(BoxSize) values, the four values represent the\n four corners starting at the top-left corner and going\n clockwise."
        },
        {
          "prop_name": "margin",
          "default_value": null,
          "immutable": false,
          "markdown": "[BoxSize](/reference/prop-types/BoxSize)",
          "prop_doc": " The margin of the component -- the space \"around\" the edges of\n the component. This prop sets the margin\n simultaneously for all four edges (top, right, bottom, left)."
        },
        {
          "prop_name": "margin_top",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The margin of the top edge."
        },
        {
          "prop_name": "margin_left",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The margin of the left edge."
        },
        {
          "prop_name": "margin_bottom",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The margin of the bottom edge."
        },
        {
          "prop_name": "margin_right",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The margin of the right edge."
        },
        {
          "prop_name": "padding",
          "default_value": null,
          "immutable": false,
          "markdown": "[BoxSize](/reference/prop-types/BoxSize)",
          "prop_doc": " The padding of the component -- the space \"within\" the edges of\n the component; the space between the edges of the component and\n its internal content. This prop sets the padding simultaneously\n for all four edges (top, right, bottom, left)."
        },
        {
          "prop_name": "padding_top",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The padding of the top edge."
        },
        {
          "prop_name": "padding_left",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The padding of the left edge."
        },
        {
          "prop_name": "padding_bottom",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The padding of the bottom edge."
        },
        {
          "prop_name": "padding_right",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The padding of the right edge."
        },
        {
          "prop_name": "background_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The color of the background surface of the component -- the\n total surface contained within its borders. The background color\n encompasses the content and padding of the component, but not\n its margins."
        },
        {
          "prop_name": "background_gradient",
          "default_value": null,
          "immutable": false,
          "markdown": "[BackgroundGradient](/reference/prop-types/BackgroundGradient)",
          "prop_doc": " This prop works like `background_color` but sets the background\n color to a gradient blending between multiple colors, instead of\n a fixed color."
        },
        {
          "prop_name": "text_gradient",
          "default_value": null,
          "immutable": false,
          "markdown": "[TextGradient](/reference/prop-types/TextGradient)",
          "prop_doc": " This prop sets the color of the *text content* within a\n component to a color gradient."
        },
        {
          "prop_name": "hover_background_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The background color of the component when the mouse pointer is\n hovered over the component's area."
        },
        {
          "prop_name": "active_background_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The background color of the component when the mouse is actively\n being clicked within the component's area."
        },
        {
          "prop_name": "font_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The font color of the text within the component."
        },
        {
          "prop_name": "font_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([FontSize](/reference/design-tokens/FontSize)), [BaseSize](/reference/prop-types/BaseSize))",
          "prop_doc": " The font size of the text within the component."
        },
        {
          "prop_name": "font_family",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([DesignToken](/reference/prop-types/DesignToken)([FontFamily](/reference/design-tokens/FontFamily)))",
          "prop_doc": " The font family of the text within the component."
        },
        {
          "prop_name": "font_weight",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([DesignToken](/reference/prop-types/DesignToken)([FontWeight](/reference/design-tokens/FontWeight)))",
          "prop_doc": " The font weight (how bold the font is) of the text within the\n component."
        },
        {
          "prop_name": "letter_spacing",
          "default_value": null,
          "immutable": false,
          "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([LetterSpacing](/reference/design-tokens/LetterSpacing)), [Size](/reference/prop-types/Size))",
          "prop_doc": " How spaced apart the letters of the font within the component\n are."
        },
        {
          "prop_name": "line_height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([LineHeight](/reference/design-tokens/LineHeight)), [Size](/reference/prop-types/Size))",
          "prop_doc": " How much vertical space each line of text within the component\n occupies."
        },
        {
          "prop_name": "cursor",
          "default_value": null,
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('pointer', 'text', 'not-allowed', 'grab', None, 'move')",
          "prop_doc": " What the mouse cursor looks like when the mouse pointer is\n hovered over the component surface."
        },
        {
          "prop_name": "shadow",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([DesignToken](/reference/prop-types/DesignToken)([Shadow](/reference/design-tokens/Shadow)))",
          "prop_doc": " The drop shadow of the component -- the shadow that the\n component box casts on the background surface."
        },
        {
          "prop_name": "text_align",
          "default_value": null,
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('end', None, 'center', 'start')",
          "prop_doc": " How the text within the component is horizontally aligned."
        },
        {
          "prop_name": "white_space",
          "default_value": null,
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('nowrap', 'normal', None)",
          "prop_doc": " Whether the text should wrap."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Slottable"
      ],
      "is_mixin": true
    },
    "box": {
      "component_type": "class",
      "sig": "box(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    `box` is the fundamental layout component in Hyperdiv. Its box\n    props give you flexible control over how the children of the box\n    are laid out. By nesting boxes, you can create complex app layouts\n    with side bars, top bars, etc.\n\n    ## Layout Direction\n\n    By default, boxes align their children vertically, one under the\n    other.\n\n    ```py\n    with hd.box():\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 1\")\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 2\")\n    ```\n\n    Horizontal layout:\n\n    ```py\n    with hd.box(direction=\"horizontal\"):\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 1\")\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 2\")\n\n    # hd.hbox() is a synonym for\n    # hd.box(direction=\"horizontal\")\n\n    with hd.hbox():\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 1\")\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 2\")\n    ```\n\n    ## Gaps\n\n    Boxes let you add uniform gaps between children:\n\n    ```py\n    with hd.box(gap=1, border=\"1px solid yellow\"):\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 1\")\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 2\")\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 3\")\n\n    with hd.hbox(gap=1, border=\"1px solid green\"):\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 1\")\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 2\")\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(\"Child 3\")\n    ```\n\n    ## Alignment and Justification\n\n    `box` exposes two props, `align` and `justify`, that can be used\n    to control the positioning of the box's children.\n\n    These props behave differently depending on the box's\n    direction.\n\n    In vertical boxes, `align` controls the positioning of children\n    along the horizontal direction, and `justify` controls the\n    positioning of children along the vertical direction.\n\n    In horizontal boxes, `align` controls the positioning of children\n    along the vertical direction, and `justify` controls the\n    positioning of children along the horizontal direction.\n\n    ```py\n    align = hd.radio_group(\n        \"Align:\",\n        options=(\n            \"start\", \"end\", \"center\", \"stretch\"\n        ),\n        value='start')\n\n    justify = hd.radio_group(\n        \"Justify:\",\n        options=(\n            \"start\", \"end\", \"center\", \"space-between\",\n            \"space-around\", \"space-evenly\"\n        ),\n        value=\"start\")\n\n    def box(name):\n        with hd.box(border=\"1px solid red\"):\n            hd.plaintext(name)\n\n    hd.markdown(\"### Vertical box:\")\n\n    with hd.box(\n        border=\"1px solid yellow\",\n        height=15,\n        align=align.value,\n        justify=justify.value,\n    ):\n        box(\"Child 1\")\n        box(\"Child 2\")\n        box(\"Child 3\")\n\n    hd.markdown(\"### Horizontal box:\")\n\n    with hd.hbox(\n        border=\"1px solid yellow\",\n        height=15,\n        align=align.value,\n        justify=justify.value,\n    ):\n        box(\"Child 1\")\n        box(\"Child 2\")\n        box(\"Child 3\")\n    ```\n\n    ## Scrolling\n\n    `box` provides the boolean `horizontal_scroll` and\n    `vertical_scroll` props to control whether content should scroll\n    or clip in those respective directions.\n\n    By default, these props are set to `None`, which causes child\n    content to visibly overflow outside the boundaries of the parent.\n\n    When either of these props is set to a value other than `None`, if\n    the other prop is `None`, it will behave like it is set to `True`.\n\n    When either of these props is set to `True`, the child content\n    will scroll in that direction.\n\n    When either of these props is set to `False`, the child content is\n    clipped and will *not* scroll in that direction.\n\n    ```py\n    horizontal = hd.radio_group(\n        \"Horizontal Scroll\",\n        options=(\"None\", \"True\", \"False\"),\n        value=\"None\"\n    )\n    vertical = hd.radio_group(\n        \"Vertical Scroll\",\n        options=(\"None\", \"True\", \"False\"),\n        value=\"None\"\n    )\n\n\n    def parse(value):\n        if value == \"None\":\n            return None\n        if value == \"True\":\n            return True\n        return False\n\n    with hd.box(\n        border=\"1px solid red\",\n        height=5,\n        width=5,\n        vertical_scroll=parse(vertical.value),\n        horizontal_scroll=parse(horizontal.value),\n    ):\n        with hd.box(\n            border=\"1px solid green\",\n            height=10,\n            width=10,\n            shrink=False,\n        ):\n            hd.text(\"Overflowing Child Box\")\n    ```\n\n    ",
      "tag": "div",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Boxy",
        "Styled"
      ],
      "is_mixin": false
    },
    "data_table": {
      "component_type": "class",
      "sig": "data_table(\n    data,\n    id_column_name=None,\n    show_id_column=True,\n    rows_per_page=10,\n    show_pagination=True,\n    row_actions=None,\n    show_select_column=False,\n    **kwargs\n)\n",
      "doc": "\n        Parameters:\n\n        * `data`: The data dictionary to be rendered in the table. It\n          maps column names to the row value of each column.\n\n        * `id_column_name`: Specifies a column name, from `data`,\n          which identifies each row uniquely. You need to specify this\n          argument if you use the `row_actions` or `show_select_column`\n          arguments.\n\n        * `show_id_column`: If `id_column_name` is specified, this controls\n          whether the ID column is visible in the table.\n\n        * `rows_per_page`: How many rows per page to show.\n\n        * `show_pagination`: Whether to show or hide the pagination\n          component when the length of each row in `data` is longer than\n          `rows_per_page`. If you set this to `False`, you will need to\n          implement an alternative way for users to paginate through\n          the data.\n\n        * `row_actions`: A function, taking the row's ID as a\n          parameter, that renders row-specific Hyperdiv\n          components. These components will be rendered as the last\n          column in the table.\n\n        * `show_select_column`: Whether to render a leading column of\n          checkboxes, which enables users to select rows.\n\n        `**kwargs` will be passed to the `box` superclass.\n        ",
      "class_doc": "\n    `data_table` automatically renders a @component(table) given a\n    dictionary of tabular data. The dictionary maps column names to\n    column data:\n\n    ```py\n    hd.data_table(dict(\n       Name=(\"Mary\", \"Joe\", \"Jim\"),\n       Age=(34, 21, 43)\n    ))\n    ```\n\n    ## Pagination\n\n    If the length of the data exceeds the value of the `rows_per_page`\n    parameter, a pagination component is automatically rendered under\n    the table, allowing users to click through the pages of the data.\n\n    ```py\n    hd.data_table(\n        dict(\n            Name=(\"Mary\", \"Joe\", \"Jim\", \"Bob\", \"Alice\"),\n            Age=(34, 21, 43, 61, 48)\n        ),\n        rows_per_page=3\n    )\n    ```\n\n    The pagination component can be hidden by passing\n    `show_pagination=False`. In that case, you will need to implement\n    another way for users to see all the data.\n\n    `data_table` provides methods to programmatically inspect and\n    modify the pagination state.\n\n    ## Selected Rows\n\n    You can enable users to select rows, using checkboxes, by passing\n    `show_select_column=True`. When `show_select_column` is `True`,\n    the `id_column_name` kwarg must specify the name of a column that uniquely\n    identifies each row. In a database, this would be the primary key\n    column.\n\n    You can access the selected rows using the `selected_rows`\n    property, which holds the unique IDs of the selected rows. You can\n    reset the selected rows by calling `reset_selected_rows()`.\n\n    ```py\n    table = hd.data_table(\n        dict(\n            Name=(\"Mary\", \"Joe\", \"Jim\", \"Bob\", \"Alice\"),\n            Age=(34, 21, 43, 61, 48)\n        ),\n        id_column_name=\"Name\",\n        rows_per_page=3,\n        show_select_column=True\n    )\n\n    hd.text(table.selected_rows)\n\n    if hd.button(\"Reset\").clicked:\n        table.reset_selected_rows()\n    ```\n\n    You can intercept change events when users select or deselect\n    rows, using the `row_was_selected`, `row_was_deselected`, and\n    `selected_rows_changed` properties.\n\n    ## Row Actions\n\n    Optionally, you can render a `row_actions` column with action\n    buttons or indicators corresponding to each row. To do this, you\n    pass a Python function into the `row_actions` kwarg. The Python\n    function receives the row ID as a parameter.\n\n    ```py\n    def actions(name):\n        with hd.hbox(padding=0.3, gap=0.3):\n            with hd.tooltip(f\"Edit {name}\"):\n                hd.button(\n                    prefix_icon=\"pencil\",\n                    size=\"small\",\n                    outline=True\n                )\n            with hd.tooltip(f\"Delete {name}\"):\n                hd.button(\n                    prefix_icon=\"trash\",\n                    size=\"small\",\n                    outline=True\n                )\n\n    table = hd.data_table(\n        dict(\n            Name=(\"Mary\", \"Joe\", \"Jim\", \"Bob\", \"Alice\"),\n            Age=(34, 21, 43, 61, 48)\n        ),\n        id_column_name=\"Name\",\n        rows_per_page=3,\n        row_actions=actions\n    )\n    ```\n\n    ## Outer Styling\n\n    `data_table` inherits from @component(box). The box is the outer\n    wrapper around the table. You can do some basic styling of the\n    outer box by passing style kwargs to `data_table`.\n\n    ```py\n    table = hd.data_table(\n        dict(\n            Name=(\"Mary\", \"Joe\", \"Jim\", \"Bob\", \"Alice\"),\n            Age=(34, 21, 43, 61, 48)\n        ),\n        border=\"1 solid neutral-100\",\n        width=20,\n        font_color=\"yellow\",\n        font_family=\"mono\",\n    )\n    ```\n    ",
      "tag": "div",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "has_next_page",
          "sig": "has_next_page # read-only property",
          "doc": "`False` if pagination is on the last page, `True` otherwise."
        },
        {
          "method_name": "has_prev_page",
          "sig": "has_prev_page # read-only property",
          "doc": "`False` if pagination is on the first page, `True` otherwise."
        },
        {
          "method_name": "next_page",
          "sig": "next_page(self)",
          "doc": "Navigates to the next page."
        },
        {
          "method_name": "prev_page",
          "sig": "prev_page(self)",
          "doc": "Navigates to the previous page."
        },
        {
          "method_name": "selected_rows",
          "sig": "selected_rows # read-only property",
          "doc": "Returns a tuple of the unique IDs of the selected rows."
        },
        {
          "method_name": "reset_selected_rows",
          "sig": "reset_selected_rows(self)",
          "doc": "\n        Sets `selected_rows` to the empty tuple. Corresponding checkboxes\n        will be unchecked.\n        "
        },
        {
          "method_name": "row_was_selected",
          "sig": "row_was_selected # read-only property",
          "doc": "\n        Returns the ID of the row that was just selected, or `None`. Works\n        like an event prop and resets to `None` at the end of the run.\n        "
        },
        {
          "method_name": "row_was_deselected",
          "sig": "row_was_deselected # read-only property",
          "doc": "\n        Returns the ID of the row that was just deselected, or\n        `None`. Works like an event prop and resets to `None` at the\n        end of the run.\n        "
        },
        {
          "method_name": "selected_rows_changed",
          "sig": "selected_rows_changed # read-only property",
          "doc": "\n        Returns `True` if a row was selected or deselected. Works like an\n        event prop and resets to `False` at the end of the run.\n        "
        },
        {
          "method_name": "page",
          "sig": "page # read-only property",
          "doc": "\n        Returns the number of the current page. Page numbering starts at `1`.\n        "
        }
      ],
      "superclasses": [
        "box"
      ],
      "is_mixin": false
    },
    "icon_link": {
      "component_type": "function",
      "sig": "icon_link(icon, name, href, responsive_threshold=650)\n",
      "doc": "Renders a @component(link) with a prefix icon. Used mainly in\n    @component(template) to add top-bar links to a template.\n\n    ```py\n    hd.icon_link(\n        \"book\",\n        \"Documentation\",\n        \"https://docs.foo.com\"\n    )\n    ```\n\n    If the window is narrower than `responsive_threshold` pixels, the\n    icon link is rendered as an icon only, and its name is rendered in\n    a hover tooltip:\n\n    ```py\n    hd.icon_link(\n        \"book\",\n        \"Documentation\",\n        \"https://docs.foo.com\",\n        responsive_threshold=10000\n    )\n    ```\n    "
    },
    "Plugin": {
      "component_type": "class",
      "sig": "Plugin(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": null,
      "tag": "hyperdiv-plugin",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "js",
          "sig": "js(asset)",
          "doc": null
        },
        {
          "method_name": "css",
          "sig": "css(asset)",
          "doc": null
        },
        {
          "method_name": "js_link",
          "sig": "js_link(asset)",
          "doc": null
        },
        {
          "method_name": "css_link",
          "sig": "css_link(asset)",
          "doc": null
        },
        {
          "method_name": "render",
          "sig": "render(self)",
          "doc": null,
          "overrides": "Component"
        }
      ],
      "superclasses": [
        "Component"
      ],
      "is_mixin": false
    },
    "BaseState": {
      "component_type": "class",
      "sig": "BaseState(key=None, **prop_kwargs)\n",
      "doc": "\n        This class should not be instantiated directly.\n        ",
      "class_doc": "\n    The base class for all non-UI components -- components that never\n    get collected and sent to the browser.\n\n    You can subclass this class to define your own custom state with\n    typed props. You can initialize props by passing corresponding\n    kwargs to your subclass constructor:\n\n    ```py\n    class MyState(hd.BaseState):\n        count = hd.Prop(hd.Int, 0)\n\n        def increment(self):\n            self.count += 1\n\n    # Then, in the app function:\n    state = MyState(count=5)\n    if hd.button(\"Increment\").clicked:\n        state.increment()\n\n    hd.text(state.count)\n    ```\n\n    You can wrap your subclass in @component(global_state) to make the\n    state global, so that all instances share the same underlying state.\n\n    This class is useless if instantiated directly. You should only\n    subclass it.\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "collect",
          "sig": "collect(self)",
          "doc": "\n        This method is overridden to do nothing, since state components\n        are not collected into the dom.\n        ",
          "overrides": "Component"
        }
      ],
      "superclasses": [
        "Component"
      ],
      "is_mixin": false
    },
    "global_state": {
      "component_type": "function",
      "sig": "global_state(klass)\n",
      "doc": "\n    `global_state` is a decorator that can be be used to define a\n    state component class such that all instances of that class share\n    the same underlying state.\n\n    This can be handy when a state component is used by many\n    functions, and you want to avoid explicitly passing the state\n    component into all those functions.\n\n    This decorator can be used on subclasses of @component(BaseState) and\n    @component(task).\n\n    ```py-nodemo\n    @hd.global_state\n    class MyState(hd.BaseState):\n        count = hd.Prop(hd.Int, 0)\n\n    def increment():\n        state = MyState()\n        if hd.button(\"Increment\").clicked:\n            state.count += 1\n\n    def display():\n        state = MyState()\n        hd.text(state.count)\n\n    def main():\n        increment()\n        display()\n    ```\n\n    In this example, both `MyState()` instances share the same\n    state. So when the increment button in the `increment` component\n    is clicked, the count label displayed by the `display` component\n    is updated.\n\n    ## Use with `task`\n\n    The `global_state` decorator can also be used on a subclass of\n    @component(task) to make a task global.\n\n    ```py-nodemo\n    @hd.global_state\n    class UsersTask(hd.task):\n        def run(self):\n            super().run(sql, \"select * from Users\")\n\n    def users_list():\n        task = UsersTask()\n        task.run()\n        if task.result:\n            for u in task.result:\n                with hd.scope(u.user_id):\n                    hd.text(u.name)\n\n    def reload_button():\n        task = UsersTask()\n        if hd.button(\"Reload\").clicked:\n            task.clear()\n\n    def main():\n        users_list()\n        reload_button()\n    ```\n\n    In this example, both instances of `UsersTask()` share the same task\n    state. When the `Reload` button in `reload_button` is clicked, the\n    task re-runs and the users list in `users_list` is re-rendered.\n\n    "
    },
    "table": {
      "component_type": "class",
      "sig": "table(*, border='1px solid neutral-100', **kwargs)",
      "doc": null,
      "class_doc": "An HTML table component. Using @component(thead),\n    @component(tbody), @component(tfoot), @component(tr),\n    @component(td), you can manually assemble tables.\n\n    ```py\n    with hd.table():\n        # Table header\n        with hd.thead():\n            # Header row\n            with hd.tr():\n                hd.td(\"Name\")\n                hd.td(\"Age\")\n                hd.td()\n        # Table body\n        with hd.tbody():\n            # Body rows\n            with hd.tr():\n                hd.td(\"Amy\")\n                hd.td(28)\n                with hd.td():\n                    with hd.box(align=\"end\"):\n                        hd.button(\"Delete Amy\")\n            with hd.tr():\n                hd.td(\"Jim\")\n                hd.td(35)\n                with hd.td():\n                    with hd.box(align=\"end\"):\n                        hd.button(\"Delete Jim\")\n        # Table footer\n        with hd.thead():\n            # Footer row\n            with hd.tr():\n                hd.td(\"Average Age\")\n                hd.td((28+35)/2)\n                hd.td()\n    ```\n\n    Each of the table sections is optional.\n\n    The direct children of `table` should be @component(thead),\n    @component(tbody), or @component(tfoot), at most one of each.\n\n    However, browsers are generally lenient and allow omitting the\n    @component(tbody) wrapper, so you can nest rows (@component(tr)s)\n    directly within `table`.\n\n    ```py\n    with hd.table():\n        with hd.tr():\n            hd.td(\"Amy\")\n            hd.td(28)\n        with hd.tr():\n            hd.td(\"Jim\")\n            hd.td(35)\n    ```\n    ",
      "tag": "table",
      "props": [
        {
          "prop_name": "border_collapse",
          "default_value": "collapse",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('separate', 'collapse')",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "thead": {
      "component_type": "class",
      "sig": "thead(*, background_color='neutral-50', font_weight='bold', **kwargs)",
      "doc": null,
      "class_doc": "\n    A table header container. To be used with @component(table).\n\n    Its direct children should be @component(tr)s.\n    ",
      "tag": "thead",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "tfoot": {
      "component_type": "class",
      "sig": "tfoot(*, background_color='neutral-50', font_weight='bold', **kwargs)",
      "doc": null,
      "class_doc": "\n    A table footer container. To be used with @component(table).\n\n    Its direct children should be @component(tr)s.\n    ",
      "tag": "tfoot",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "tbody": {
      "component_type": "class",
      "sig": "tbody(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A table body container. To be used with @component(table).\n\n    Its direct children should be @component(tr)s.\n    ",
      "tag": "tbody",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "tr": {
      "component_type": "class",
      "sig": "tr(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A table row container. To be used with @component(table).\n\n    Its direct children should be @component(td)s.\n    ",
      "tag": "tr",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "LabelComponent": {
      "component_type": "class",
      "sig": "LabelComponent(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A convenience component base class for components that tend to\n    contain a text label in their bodies or in a slot. The main\n    purpose of this class is to expose a `label` property as a\n    convenience to set/get the label.\n\n    The label is assumed to be held in a `plaintext` or `text`\n    component.\n\n    Note that if the user explicitly sets the body to something that\n    is not a plaintext/text component, the `label` attribute will no\n    longer work.\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "label",
          "sig": "label # read/write property",
          "doc": "\n        Reads/writes the label.\n\n        If the label slot has been manually populated by the user with\n        something other than a text or plaintext component, reading\n        this property returns `None`, and writing it does nothing.\n        "
        }
      ],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "td": {
      "component_type": "class",
      "sig": "td(*label, border=\"1px solid neutral-100\", padding=(0.5, 0.8, 0.5, 0.8), **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A table cell container. To be used with @component(table).\n\n    Arbitrary components can be nested within a `td`. If you want to\n    control the alignment of children, you should place a\n    @component(box) in the `td`, and the children inside that\n    box. `td` itself does not expose box props.\n\n    ## Spans\n\n    `td` supports props `colspan` and `rowspan` that allow a table\n    cell to take up the space otherwise occupied by cells to the\n    right, or cells below, respectively.\n\n    Here's a 3 rows x 2 columns table:\n\n    ```py\n    with hd.table():\n        with hd.tr():\n            hd.td(\"(0, 0)\")\n            hd.td(\"(0, 1)\")\n        with hd.tr():\n            hd.td(\"(1, 0)\")\n            hd.td(\"(1, 1)\")\n        with hd.tr():\n            hd.td(\"(2, 0)\")\n            hd.td(\"(2, 1)\")\n    ```\n\n    And using `colspan` and `rowspan`:\n\n    ```py\n    with hd.table():\n        with hd.tr():\n            hd.td(\"(0, 0) and (0, 1)\", colspan=2)\n            # No td for (0, 1)\n        with hd.tr():\n            hd.td(\"(1, 0) and (2, 0)\", rowspan=2)\n            hd.td(\"(1, 1)\")\n        with hd.tr():\n            # No td for (2, 0)\n            hd.td(\"(2, 1)\")\n    ```\n\n    By default, `rowspan` and `colspan` are `1`, indicating that the\n    cell takes up one cell's worth of space.\n    ",
      "tag": "td",
      "props": [
        {
          "prop_name": "colspan",
          "default_value": 1,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " The horizontal/rightward span of this cell."
        },
        {
          "prop_name": "rowspan",
          "default_value": 1,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " The vertical/downward span of this cell."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "anchor": {
      "component_type": "class",
      "sig": "anchor(name)\n",
      "doc": null,
      "class_doc": "Creates an invisible anchor that can be linked to using a location\n    hash. When navigating to an anchor link, the page auto-scrolls to\n    where the anchor is.\n\n    ```py-nodemo\n    # Create an anchor\n    hd.anchor(\"my-anchor\")\n\n    # A link to the anchor\n    hd.link(\"Scroll to the anchor\", href=\"#my-anchor\")\n    ```\n\n    Of course you can link to full URLs that include an anchor hash:\n\n    ```py-nodemo\n    hd.link(\"A Link\", href=\"/path/to/page#my-anchor\")\n    # or\n    hd.link(\"A Link\", href=\"https://app.hello.com/path/to/page#my-anchor\")\n    ```\n    ",
      "tag": "a",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component"
      ],
      "is_mixin": false
    },
    "scope": {
      "component_type": "function",
      "sig": "scope(scope_id)\n",
      "doc": "\n    When creating components in loops, you will encounter this error:\n\n    ```py\n    for i in range(3):\n        hd.button(\"Button\", i)\n    ```\n\n    To fix it, you wrap the loop body in `hd.scope(i)`, where `i`\n    uniquely identifies each iteration:\n\n    ```py\n    for i in range(3):\n        with hd.scope(i):\n            hd.button(\"Button\", i)\n    ```\n\n    The reason behind having to use `scope` is that Hyperdiv\n    identifies each component uniquely based on the line number on\n    which it is constructed, in the code. In the first example, all\n    the buttons are constructed on the same line of code, so their\n    identifiers clash and Hyperdiv raises an error.\n\n    `hd.scope(i)` gives Hyperdiv extra \"uniqueness\" information to\n    include in the identifier. In this case, `i` is unique for each\n    loop iteration, allowing Hyperdiv to create unique identifiers for\n    the three buttons.\n\n    ## Choosing Good Scope IDs\n\n    Using the loop iteration index, like in the example above, is fine\n    for data that does not change. For data that can be sorted,\n    edited, or deleted, we need to use an identifier that is unique to\n    each data item.\n\n    ```py\n    state = hd.state(users=(\n        (\"Mary\", False),\n        (\"Joe\", False),\n        (\"Amy\", False)\n    ))\n\n    for i, (name, selected) in enumerate(state.users):\n        with hd.scope(i):\n            with hd.hbox():\n                hd.text(name, width=10)\n                hd.checkbox(checked=selected)\n\n    with hd.hbox(gap=1):\n        if hd.button(\"Reverse\").clicked:\n            state.users = tuple(reversed(state.users))\n    ```\n\n    In the example above, we render a list of users along with\n    \"selected\" checkboxes associated with each user, in a loop wrapped\n    in `scope(i)`, which is the iteration index.\n\n    If you check the checkbox next to `Mary`, and then click `Reverse`,\n    the list will be reversed but `Amy` will now be wrongly\n    selected. This is because the checkbox identifier is derived from\n    `hd.scope(i)`, and `i` remains the same regardless of how the list\n    is sorted.\n\n    To fix this, we associate a unique user ID with each user record,\n    and use this ID as the scope ID:\n\n    ```py\n    state = hd.state(users=(\n        (123, \"Mary\", False),\n        (456, \"Joe\", False),\n        (789, \"Amy\", False)\n    ))\n\n    for user_id, name, selected in state.users:\n        with hd.scope(user_id):\n            with hd.hbox():\n                hd.text(name, width=10)\n                hd.checkbox(checked=selected)\n\n    with hd.hbox(gap=1):\n        if hd.button(\"Reverse\").clicked:\n            state.users = tuple(reversed(state.users))\n    ```\n\n    When working with databases, this is an easy guideline to\n    follow. When rendering a list of database records, wrap the loop\n    body in a scope identified by each record's primary key:\n\n    ```py-nodemo\n    users = database.get_users()\n    for user in users:\n       with hd.scope(user.user_id):\n         render_user(user)\n    ```\n\n    "
    },
    "Interactive": {
      "component_type": "class",
      "sig": "Interactive()\n",
      "doc": "\n        `Interactive` cannot be instantiated.\n        ",
      "class_doc": "\n    A collection of props defining how a component can generally be\n    interacted with. Currently only `clicked` is supported.\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "clicked",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " Whether the component was clicked."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [],
      "is_mixin": true
    },
    "link": {
      "component_type": "class",
      "sig": "link(*label, cursor=\"pointer\", font_color=\"blue\", **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A HTML link.\n\n    ```py\n    hd.link(\n        \"Link to a remote website\",\n        href=\"https://google.com\"\n    )\n    hd.link(\n        \"Link to a local path\",\n        href=\"/reference/components\",\n    )\n    ```\n\n    `link` inherits from @component(box), so it can be styled like a\n    `box` and arbitrary components can be placed inside it.\n\n    For accessibility, the link's body should be kept simple, and you\n    should avoid nesting interactive components like buttons inside a\n    link.\n\n    ```py\n    with hd.link(\n        href=\"https://google.com\",\n        direction=\"horizontal\",\n        padding=1,\n        gap=0.5,\n        border=\"1px solid green\",\n        hover_background_color=\"green-50\",\n        border_radius=\"large\",\n        width=\"fit-content\",\n        align=\"center\"\n    ):\n        hd.icon(\"google\")\n        hd.text(\"A fancy link\")\n    ```\n\n    ",
      "tag": "a",
      "props": [
        {
          "prop_name": "href",
          "default_value": null,
          "immutable": false,
          "markdown": "[PureString](/reference/prop-types/PureString)",
          "prop_doc": " The path or URL to navigate to when clicking the link."
        },
        {
          "prop_name": "underline",
          "default_value": false,
          "immutable": false,
          "markdown": "[LinkUnderline](/reference/prop-types/LinkUnderline)",
          "prop_doc": " Whether a classic underline should be rendered on the link text."
        },
        {
          "prop_name": "target",
          "default_value": "_blank",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('_self', '_parent', '_blank', '_top', None)",
          "prop_doc": " Determines where the link is opened. See the [W3Schools target\n documentation](https://www.w3schools.com/tags/att_a_target.asp)"
        },
        {
          "prop_name": "rel",
          "default_value": "noreferrer noopener",
          "immutable": false,
          "markdown": "[PureString](/reference/prop-types/PureString)",
          "prop_doc": " See `rel` docs [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "box",
        "Interactive"
      ],
      "is_mixin": false
    },
    "Togglable": {
      "component_type": "class",
      "sig": "Togglable()\n",
      "doc": "\n        `Togglable` cannot be instantiated.\n        ",
      "class_doc": "\n    A collection of props representing a component that can be opened\n    and closed.\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "opened",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether this component is visible"
        },
        {
          "prop_name": "visibility_changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " Whether the visibility of this component changed -- the\n component was opened or closed."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "was_opened",
          "sig": "was_opened # read-only property",
          "doc": "True for one frame when the component was opened."
        },
        {
          "method_name": "was_closed",
          "sig": "was_closed # read-only property",
          "doc": "True for one frame when the component was closed."
        }
      ],
      "superclasses": [],
      "is_mixin": true
    },
    "alert": {
      "component_type": "class",
      "sig": "alert(*label, icon_name=None, variant=\"primary\", **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A component that renders inline notices.\n\n    ```py\n    with hd.box(gap=1):\n        hd.alert(\"An info alert\", opened=True)\n        hd.alert(\"A success alert\", variant=\"success\", opened=True)\n        hd.alert(\"A warning alert\", variant=\"warning\", opened=True)\n        hd.alert(\"A danger alert\", variant=\"danger\", opened=True)\n    ```\n    ",
      "tag": "sl-alert",
      "props": [
        {
          "prop_name": "closable",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render a close button, which closes the alert when\n clicked."
        },
        {
          "prop_name": "variant",
          "default_value": "primary",
          "immutable": false,
          "markdown": "[ShoelaceVariant](/reference/prop-types/ShoelaceVariant)",
          "prop_doc": " The alert variant."
        },
        {
          "prop_name": "duration",
          "default_value": Infinity,
          "immutable": false,
          "markdown": "[Float](/reference/prop-types/Float)",
          "prop_doc": " How long the alert is visible before it self-closes, in\n milliseconds."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "icon_style",
          "prop_doc": null
        },
        {
          "prop_name": "message_style",
          "prop_doc": null
        },
        {
          "prop_name": "close_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "close_button_base_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "icon",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Togglable"
      ],
      "is_mixin": false
    },
    "avatar": {
      "component_type": "class",
      "sig": "avatar(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A component useful for rendering a user avatar. By default it\n    renders a user icon.\n\n    ```py\n    with hd.box(gap=1):\n        hd.avatar()\n        hd.avatar(image=\"/assets/kitten.jpg\")\n        hd.avatar(initials=\"MP\", size=5)\n        hd.avatar(initials=\"AD\", shape=\"rounded\")\n    ```\n\n    ",
      "tag": "sl-avatar",
      "props": [
        {
          "prop_name": "image",
          "default_value": null,
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The path or URL of an image to render in the avatar."
        },
        {
          "prop_name": "assistive_label",
          "default_value": null,
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " An invisible label useful for accessibility."
        },
        {
          "prop_name": "initials",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " A string of two initials. Typically, these are the user's\n initials when an image is not available."
        },
        {
          "prop_name": "loading",
          "default_value": "eager",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('eager', 'lazy')",
          "prop_doc": null
        },
        {
          "prop_name": "shape",
          "default_value": "circle",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('square', 'circle', 'rounded')",
          "prop_doc": " The shape of the avatar."
        },
        {
          "prop_name": "size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The size of the avatar."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "icon_style",
          "prop_doc": null
        },
        {
          "prop_name": "initials_style",
          "prop_doc": null
        },
        {
          "prop_name": "image_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled",
        "Interactive"
      ],
      "is_mixin": false
    },
    "badge": {
      "component_type": "class",
      "sig": "badge(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A badge component, useful for making visual labels.\n\n    ```py\n    with hd.box(gap=1):\n        hd.badge(\"A badge\")\n        hd.badge(\"A warning badge\", variant=\"warning\")\n        hd.badge(\"A pill badge\", pill=True)\n        hd.badge(\n            \"A pulsating danger badge\",\n            variant=\"danger\",\n            pulse=True\n        )\n    ```\n    ",
      "tag": "sl-badge",
      "props": [
        {
          "prop_name": "variant",
          "default_value": "primary",
          "immutable": false,
          "markdown": "[ShoelaceVariant](/reference/prop-types/ShoelaceVariant)",
          "prop_doc": " The variant of the badge."
        },
        {
          "prop_name": "pill",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the badge as a pill."
        },
        {
          "prop_name": "pulse",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to visually pulsate the badge."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Interactive"
      ],
      "is_mixin": false
    },
    "breadcrumb": {
      "component_type": "class",
      "sig": "breadcrumb(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    This component renders a breadcrumb trail useful in building\n    navigations. It accepts @component(breadcrumb_item) components\n    as its children.\n\n    ```py\n    with hd.breadcrumb():\n        hd.breadcrumb_item(\n            \"Grandparent\",\n            href=\"/grandparent\"\n        )\n        hd.breadcrumb_item(\n            \"Parent\",\n            href=\"/grandparent/parent\"\n        )\n        hd.breadcrumb_item(\"Child\", href=\"#\")\n    ```\n\n    ",
      "tag": "sl-breadcrumb",
      "props": [
        {
          "prop_name": "assistive_label",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " An invisible label that helps voice navigation."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "separator",
          "slot_doc": " TODO: separator slot strips styles from the element in the slot"
        }
      ],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "breadcrumb_item": {
      "component_type": "class",
      "sig": "breadcrumb_item(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A breadcrumb item to be used within @component(breadcrumb). This\n    component accepts a `href` attribute and works like a\n    @component(link).\n    ",
      "tag": "sl-breadcrumb-item",
      "props": [
        {
          "prop_name": "href",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([String](/reference/prop-types/String))",
          "prop_doc": " A path to navigate to when clicked."
        },
        {
          "prop_name": "target",
          "default_value": null,
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('_self', '_parent', '_blank', '_top', None)",
          "prop_doc": " Determines where the link is opened. See the [W3Schools target\n documentation](https://www.w3schools.com/tags/att_a_target.asp)"
        },
        {
          "prop_name": "rel",
          "default_value": "noreferrer noopener",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " See `rel` docs [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel)."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "suffix_style",
          "prop_doc": null
        },
        {
          "prop_name": "separator_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "prefix",
          "slot_doc": null
        },
        {
          "slot_name": "suffix",
          "slot_doc": null
        },
        {
          "slot_name": "separator",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Interactive"
      ],
      "is_mixin": false
    },
    "button": {
      "component_type": "class",
      "sig": "button(*label, prefix_icon=None, suffix_icon=None, width=\"fit-content\", **kwargs)\n",
      "doc": null,
      "class_doc": "A button component.\n\n    ```py\n    hd.button(\"Default\")\n    hd.button(\"Primary\", variant=\"primary\")\n    hd.button(\"Success\", variant=\"success\")\n    hd.button(\"Neutral\", variant=\"neutral\")\n    hd.button(\"Warning\", variant=\"warning\")\n    hd.button(\"Danger\", variant=\"danger\")\n    hd.button(\"Primary\",\n        variant=\"primary\",\n        outline=True\n    )\n    hd.button(\"Success\",\n        variant=\"success\",\n        outline=True\n    )\n    hd.button(\"Neutral\",\n        variant=\"neutral\",\n        outline=True\n    )\n    hd.button(\"Warning\",\n        variant=\"warning\",\n        outline=True\n    )\n    hd.button(\"Danger\",\n        variant=\"danger\",\n        outline=True\n    )\n    hd.button(\"Text\", variant=\"text\")\n    hd.button(\"Pill Button\", pill=True)\n    hd.button(\"With Caret\", caret=True)\n    hd.button(\"Loading\", loading=True)\n    hd.button(\"Large\", size=\"large\")\n    hd.button(\"Small\", size=\"small\")\n    ```\n\n    ### Slots\n\n    `button` supports `prefix` and `suffix` slots that can be used for\n    slotting icons into the button. Shorthand arguments `prefix_icon`\n    and `suffix_icon` are also provided.\n\n    ```py\n    hd.button(\"Settings\", prefix_icon=\"gear\")\n    # Equivalent to:\n    with hd.button(\"Settings\") as button:\n        hd.icon(\"gear\", slot=button.prefix)\n    ```\n    ",
      "tag": "sl-button",
      "props": [
        {
          "prop_name": "variant",
          "default_value": "default",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('text', 'warning', 'danger', 'neutral', 'primary', 'success', 'default')",
          "prop_doc": " The button variant."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the button."
        },
        {
          "prop_name": "button_type",
          "default_value": "button",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('reset', 'button', 'submit')",
          "prop_doc": " The type of the button. Usually you do not need to use this prop\n directly. When using buttons with @component(form)s, the button\n type is set implicitly."
        },
        {
          "prop_name": "pill",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the button as a pill."
        },
        {
          "prop_name": "outline",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the button's variant as an outline instead of\n a background fill."
        },
        {
          "prop_name": "circle",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the button as a circle."
        },
        {
          "prop_name": "caret",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render a caret in the suffix slot. This is useful\n shorthand when the button is used as a trigger for a\n @component(dropdown)."
        },
        {
          "prop_name": "loading",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render a loading spinner in the button."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the button is disabled. Disabled buttons do not respond to clicks."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "suffix_style",
          "prop_doc": null
        },
        {
          "prop_name": "caret_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "prefix",
          "slot_doc": null
        },
        {
          "slot_name": "suffix",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Interactive"
      ],
      "is_mixin": false
    },
    "button_group": {
      "component_type": "class",
      "sig": "button_group(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A container that visually groups together a set of related\n    @component(button)s.\n\n    ```py\n    with hd.button_group():\n        hd.button(\"One\")\n        hd.button(\"Two\")\n        hd.button(\"Three\")\n    ```\n\n    ",
      "tag": "sl-button-group",
      "props": [
        {
          "prop_name": "assistive_label",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " An invisible label that helps with accessibility."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "card": {
      "component_type": "class",
      "sig": "card(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A component that groups an image, a header, a footer, and contents\n    into a container. All the slots are optional and can be combined\n    in various ways.\n\n    ### Image with contents\n\n    ```py\n    with hd.card() as card:\n        hd.image(\"/assets/kitten.jpg\", slot=card.image)\n        with hd.box(gap=0.5):\n            hd.text(\"Mittens\", font_weight=\"bold\")\n            hd.text(\"Bring this kitten home.\", font_size=\"small\")\n            hd.text(\"6 weeks old\", font_color=\"neutral-400\", font_size=\"x-small\")\n    ```\n\n    ### Header\n\n    ```py\n    with hd.card() as card:\n        with hd.hbox(slot=card.header, justify=\"space-between\", align=\"center\"):\n            hd.text(\"Settings\")\n            hd.icon_button(\"gear\")\n        hd.text(\"This card has a header.\")\n    ```\n\n    ### Footer\n\n    ```py\n    with hd.card() as card:\n        hd.text(\"This card has a footer.\")\n        hd.button(\"Learn more\", variant=\"primary\", pill=True, slot=card.footer)\n    ```\n\n    ",
      "tag": "sl-card",
      "props": [
        {
          "prop_name": "card_border_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The card's border color."
        },
        {
          "prop_name": "card_border_radius",
          "default_value": null,
          "immutable": false,
          "markdown": "[Union](/reference/prop-types/Union)([DesignToken](/reference/prop-types/DesignToken)([BorderRadius](/reference/design-tokens/BorderRadius)), [BoxSize](/reference/prop-types/BoxSize))",
          "prop_doc": " The card's border radius."
        },
        {
          "prop_name": "card_border_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The card's border width."
        },
        {
          "prop_name": "card_padding",
          "default_value": null,
          "immutable": false,
          "markdown": "[BoxSize](/reference/prop-types/BoxSize)",
          "prop_doc": " The card's padding."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "image_style",
          "prop_doc": null
        },
        {
          "prop_name": "header_style",
          "prop_doc": null
        },
        {
          "prop_name": "body_style",
          "prop_doc": null
        },
        {
          "prop_name": "footer_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "header",
          "slot_doc": null
        },
        {
          "slot_name": "footer",
          "slot_doc": null
        },
        {
          "slot_name": "image",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "line_chart": {
      "component_type": "function",
      "sig": "line_chart(\n    *datasets,\n    labels=None,\n    colors=None,\n    grid_color=\"neutral-100\",\n    x_axis=\"linear\",\n    y_axis=\"linear\",\n    hide_legend=False,\n    **kwargs\n)\n",
      "doc": "\n    A @component(cartesian_chart) that renders datasets as points\n    connected by lines.\n\n    ```py\n    hd.line_chart(\n        (1, 18, 4),\n        (4, 2, 28),\n        labels=(\"Jim\", \"Mary\")\n    )\n    ```\n    "
    },
    "bar_chart": {
      "component_type": "function",
      "sig": "bar_chart(\n    *datasets,\n    labels=None,\n    colors=None,\n    grid_color=\"neutral-100\",\n    x_axis=\"linear\",\n    y_axis=\"linear\",\n    hide_legend=False,\n    **kwargs\n)\n",
      "doc": "\n    A @component(cartesian_chart) that renders datasets as bars.\n\n    ```py\n    hd.bar_chart(\n        (1, 18, 4),\n        (4, 2, 28),\n        labels=(\"Jim\", \"Mary\")\n    )\n    ```\n    "
    },
    "scatter_chart": {
      "component_type": "function",
      "sig": "scatter_chart(\n    *datasets,\n    labels=None,\n    colors=None,\n    grid_color=\"neutral-100\",\n    x_axis=\"linear\",\n    y_axis=\"linear\",\n    hide_legend=False,\n    **kwargs\n)\n",
      "doc": "\n    A @component(cartesian_chart) that renders datasets as points.\n\n    ```py\n    hd.scatter_chart(\n        (1, 18, 4),\n        (4, 2, 28),\n        labels=(\"Jim\", \"Mary\")\n    )\n    ```\n    "
    },
    "bubble_chart": {
      "component_type": "function",
      "sig": "bubble_chart(\n    *datasets,\n    labels=None,\n    colors=None,\n    grid_color=\"neutral-100\",\n    x_axis=\"linear\",\n    y_axis=\"linear\",\n    hide_legend=False,\n    **kwargs\n)\n",
      "doc": "\n    A @component(cartesian_chart) that renders datasets as bubble\n    points. It works like @component(scatter_chart), but you can\n    specify the visual size of the points by providing an extra `r`\n    component for each point, which specifies the radius of the\n    bubble in pixels.\n\n    ```py\n    hd.bubble_chart(\n        ((1, 8), (8, 20), (3, 12)),\n        ((10, 7), (5, 30), (10, 12)),\n        labels=(\"Jim\", \"Mary\")\n    )\n    ```\n\n    In this dataset specification, each point is specified as `(y, r)`\n    where `y` is the `y`-value and `r` is the size of the bubble, in\n    pixels. The `x` is automatically inferred as `1`, `2`, `3`, ...,\n    on the linear axis, since it is not specified. You can specify the\n    `x` in each point, too, by passing 3-tuples, each specifying `(x, y, r)`.\n\n    ```py\n    hd.bubble_chart(\n        ((0, 1, 8), (3, 8, 20), (7, 3, 12)),\n        ((2, 10, 7), (8, 5, 30), (21, 10, 12)),\n        labels=(\"Jim\", \"Mary\")\n    )\n    ```\n\n    Bubble points can be specified in the following ways:\n\n    * A 2-tuple, specifying `(y, r)`. In this case, `x` is inferred\n      from the `x_axis` argument, like above.\n\n    * A 3-tuple, representing `(x, y, r)`.\n\n    * A dict, like `dict(x=1, y=2, r=10)`. Equivalent to the above,\n      but in dict form.\n\n    See @component(cartesian_chart) for more.\n    "
    },
    "pie_chart": {
      "component_type": "function",
      "sig": "pie_chart(dataset, labels=None, colors=None, hide_legend=False, doughnut=True, **kwargs)\n",
      "doc": "\n    A good ol pie chart. `dataset` holds the numeric sizes of the\n    slices.\n\n    ```py\n    hd.pie_chart((1, 3, 12, 8))\n    ```\n\n    `labels` gives names to the pie slices, order. And `colors`\n    specifies custom colors, in the same order. When you set `labels`,\n    the clickable legend will automatically be rendered unless you pass\n    `show_legend=False`\n\n    ```py\n    hd.pie_chart(\n        (1, 3, 12, 8),\n        labels=(\"Oats\", \"Corn\", \"Garlic\", \"Onions\"),\n        colors=(\"yellow-300\", \"emerald\", \"fuchsia-400\", \"orange\")\n    )\n    ```\n\n    You can pass `doughnut=False` to close the doughnut hole.\n\n    ```py\n    hd.pie_chart(\n        (1, 3, 12, 8),\n        labels=(\"Oats\", \"Corn\", \"Garlic\", \"Onions\"),\n        colors=(\"yellow-300\", \"emerald\", \"fuchsia-400\", \"orange\"),\n        doughnut=False\n    )\n    ```\n\n    "
    },
    "polar_chart": {
      "component_type": "function",
      "sig": "polar_chart(\n    dataset,\n    labels=None,\n    colors=None,\n    grid_color=\"neutral-100\",\n    hide_legend=False,\n    **kwargs\n)\n",
      "doc": "\n    A polar chart component. This works like @component(pie_chart) but\n    unlike a pie chart, which shows dataset differences in the\n    *angles* of the slices, the polar chart keeps the angles identical\n    and emphasizes difference in the slice \"lengths\".\n\n    The `labels` argument specifies the name of each slice, and the\n    `dataset` specifies the value of each slice.\n\n    ```py\n    hd.polar_chart(\n        (4, 6, 4, 8, 2),\n        labels=(\"Oats\", \"Milk\", \"Cheese\", \"Garlic\", \"Onions\")\n    )\n    ```\n\n    The slice colors can be customized using the `colors` argument,\n    and the legend can be hidden:\n\n    ```py\n    hd.polar_chart(\n        (4, 6, 4, 8, 2),\n        colors=(\"red-200\", \"orange-200\", \"blue-100\", \"green-300\", \"yellow\"),\n        labels=(\"Oats\", \"Milk\", \"Cheese\", \"Garlic\", \"Onions\"),\n        hide_legend=True\n    )\n    ```\n\n    "
    },
    "radar_chart": {
      "component_type": "function",
      "sig": "radar_chart(\n    *datasets,\n    labels=None,\n    axis=None,\n    colors=None,\n    grid_color=\"neutral-100\",\n    hide_legend=False,\n    **kwargs\n)\n",
      "doc": "A radar chart component.\n\n    ```py\n    hd.radar_chart(\n        (8, 6, 4, 8),\n        axis=(\"Commits\", \"PRs\", \"Issues\", \"Discussions\")\n    )\n    ```\n\n    The `axis` specifies the \"axis\" of the radar, and each dataset\n    gives values to each of the components on the axis.\n\n    The optional `labels` specifies the names of the datasets, in\n    order. Multiple datasets can be overlaid:\n\n    ```py\n    hd.radar_chart(\n        (1, 4, 2, 4),\n        (8, 6, 4, 8),\n        labels=(\"Jim\", \"Alice\"),\n        axis=(\"Commits\", \"PRs\", \"Issues\", \"Discussions\")\n    )\n    ```\n\n    `colors` can be a list of Hyperdiv colors, overriding the\n    automatically generated colors. And `hide_legend` can hide the\n    clickable dataset legend.\n\n    ```py\n    hd.radar_chart(\n        (1, 4, 2, 4),\n        (8, 6, 4, 8),\n        labels=(\"Jim\", \"Alice\"),\n        colors=(\"fuchsia\", \"yellow\"),\n        axis=(\"Commits\", \"PRs\", \"Issues\", \"Discussions\"),\n        hide_legend=True,\n    )\n    ```\n\n    "
    },
    "cartesian_chart": {
      "component_type": "function",
      "sig": "cartesian_chart(\n    chart_type,\n    *datasets,\n    labels=None,\n    colors=None,\n    grid_color=\"neutral-100\",\n    x_axis=\"linear\",\n    y_axis=\"linear\",\n    hide_legend=False,\n    **kwargs\n)\n",
      "doc": "\n    ## Introduction\n\n    `cartesian_chart` is the base chart constructor used by\n    @component(line_chart), @component(bar_chart),\n    @component(scatter_chart), and @component(bubble_chart). All these\n    charts work fundamentally similarly in that they render `x`/`y`\n    data on a grid. They only differ in how the rendered data looks\n    visually. There is a slight exception for\n    @component(bubble_chart), which in addition to `x` and `y`, it\n    renders `r`-data, which is the radius of each bubble.\n\n    Because they work similarly, multiple datasets of different types\n    can be overlaid on the same chart.\n\n    Parameters:\n    * `chart_type`: One of `\"bar\"`, `\"line\"`, `\"scatter\"`, or `\"bubble\"`.\n    * `*datasets`: The data to be rendered.\n    * `labels`: The names of the datasets.\n    * `colors`: The colors of the datasets.\n    * `grid_color`: The color of the chart's grid lines.\n    * `x_axis`: Can be a list of names, specifying that the axis is a\n      fixed category of items. The default is `\"linear\"`, specifying a\n      linear axis. It can also be `\"logarithmic\"`, specifying a log\n      axis, or `\"timeseries\"` specifying time values.\n    * `y_axis`: Same as above, but for the y-axis.\n    * `hide_legend`: Hides the clickable legend at the top of the\n      chart. This legend is rendered automatically when `labels` is\n      specified, unless this parameter is set to `False`.\n    * `**kwargs`: Component style and slot props that are passed\n      upward to @component(chart).\n\n    Each of `line_chart`, `bar_chart`, `scatter_chart`, and\n    `bubble_chart` simply invoke `cartesian_chart(chart_type, ...)`\n    where `chart_type` is `\"line\"`, `\"bar\"`, `\"scatter\"`, and\n    `\"bubble\"`, respectively.\n\n    These functions return a @component(chart) object.\n\n    ```py\n    hd.bar_chart((1, 8, 4))\n    # is equivalent to\n    hd.cartesian_chart(\"bar\", (1, 8, 4))\n    ```\n\n    ## Multiple Datasets\n\n    Each chart type can accept multiple datasets:\n\n    ```py\n    hd.line_chart(\n        (1, 8, 4),\n        (2, 6, 9),\n        (18, 4, 12)\n    )\n    ```\n\n    ## Category Axis, Dataset Names, and Colors\n\n    Each axis can be set to a fixed category of items by setting the\n    axis to a tuple containing the items in the category. Then, each\n    point in each dataset corresponds to a category item, in\n    order.\n\n    The datasets can be given names using the `labels` argument, which\n    are rendered as a clickable legend at the top of the chart, unless\n    `hide_legend` is set to `True`.\n\n    The datasets can also be given custom colors using the `colors`\n    argument.\n\n    ```py\n    hd.line_chart(\n        (1, 8, 4),\n        (2, 6, 9),\n        (18, 4, 12),\n        labels=(\"Jim\", \"Mary\", \"Joe\"),\n        colors=(\"yellow\", \"blue\", \"fuchsia\"),\n        x_axis=(\"Oats\", \"Corn\", \"Milk\")\n    )\n    ```\n\n    ## Log and Time Axes\n\n    The `x_axis` and `y_axis` can also be set to `\"logarithmic\"` for\n    log data, or `\"timeseries\"` for time data.\n\n    A log axis de-emphasizes large differences among data:\n\n    ```py\n    hd.line_chart(\n        (1, 18000, 20, 240241, 17),\n        y_axis=\"logarithmic\",\n    )\n    # Versus linear (the default):\n    hd.line_chart(\n        (1, 18000, 20, 240241, 17),\n    )\n    ```\n\n    A timeseries axis can intelligently render time labels. You can\n    pass millisecond Unix timestamps as time values:\n\n    ```py\n    import time\n    now = int(time.time()*1000)\n    day = 24 * 60 * 60 * 1000\n\n    hd.line_chart(\n        ((now, 20), (now+(2 * day), 100), (now+(18 * day), 80)),\n        x_axis=\"timeseries\",\n    )\n    ```\n\n    ## Mixed Datasets\n\n    Cartesian datasets of different types can be mixed on the same\n    chart. For any dataset, we can override the default chart type by\n    passing a dictionary that specifies `chart_type`, and includes the\n    data points in `data`.\n\n    `chart_type` can be any of `\"line\"`, `\"bar\"`, `\"scatter\"`, and\n    `\"bubble\"`.\n\n    ```py\n    hd.line_chart(\n        (1, 4, 5), # defaults to \"line\"\n        dict(\n            # Override the default to \"bar\"\n            # for this dataset:\n            chart_type=\"bar\",\n            # The point data:\n            data=(1, 4, 5)\n        )\n    )\n    ```\n\n    ## Dataset Specification\n\n    Each dataset specifies a series of \"points\" to be rendered on the\n    chart. Each point must specify the `(x, y)` values: the x-axis\n    value, and y-axis value.\n\n    ### Point Specification\n\n    Each point in a `\"line\"`, `\"bar\"`, or `\"scatter\"` dataset can be\n    specified in the following ways:\n\n    * A single value, like `5`. This represents the `y`-value of the\n      point, and its `x`-value is inferred from the `x_axis` argument.\n\n    * A tuple, like `(1, 5)`. This represents `(x, y)`.\n\n    * A dict, like `dict(x=1, y=2)`. This is equivalent to the above,\n      but in dict form.\n\n    Bubble points also take an `r` value in addition to `x` and `y`,\n    specifying the radius of the bubble. Bubble points can be\n    specified in the following ways:\n\n    * A 2-tuple, like `(1, 10)`, specifying `(y, r)`. In this case,\n      `x` is inferred from the `x_axis` argument, like above.\n\n    * A 3-tuple, representing `(x, y, r)`.\n\n    * A dict, like `(dict(x=1, y=2, r=10)`. Equivalent to the above,\n      but in dict form.\n\n    ### Dataset Options\n\n    A dataset can be passed to a chart constructor either as a tuple\n    of points (where each point is specified according to the spec\n    above), or as a dictionary that allows further customization of\n    the dataset.\n\n    When passing the dataset as a dictionary, the dataset's tuple of\n    points is provided in the dictionary's `data` property:\n\n    ```py-nodemo\n    dict(data=((1, 2), (3, 4)))\n    ```\n\n    In addition to `data`, the dictionary can provide `chart_type`,\n    `color`, and `label` properties. `chart_type` allows mixing and\n    matching multiple chart types in the same chart. `color` and\n    `label` allow setting the dataset's color and label. These will\n    override whatever is specified in the `colors` and `labels`\n    top-level arguments.\n\n    ```py\n    hd.bar_chart(\n        dict(\n            data=(1, 18, 10),\n            chart_type=\"line\",\n            label=\"Trend\",\n            color=\"green\",\n        ),\n        dict(\n            data=(1, 18, 10),\n            label=\"Harvest\",\n            color=\"yellow\"\n        )\n    )\n    ```\n\n    "
    },
    "chart": {
      "component_type": "class",
      "sig": "chart(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    The base chart component. This component exposes a single prop\n    containing the entire chart config that is ultimately passed to\n    [Chart.js](https://www.chartjs.org/) on the frontend.\n\n    This component is not meaningfully useful on its own. Instead, use\n    @component(line_chart), @component(bar_chart),\n    @component(scatter_chart), @component(bubble_chart),\n    @component(pie_chart), @component(polar_chart),\n    @component(radar_chart) to create charts.\n\n    ## Updating Data\n\n    Unlike many Hyperdiv components, the chart component does not\n    expose mutable props. To mutate chart data, store it in\n    @component(state), pass the state data to the chart, and mutate\n    the state data.\n\n    ```py\n    state = hd.state(data=(1, 10, 3))\n    hd.line_chart(state.data)\n\n    if hd.button(\"Update\").clicked:\n        state.data = (2, 4, 30)\n    ```\n\n    Charts may expose mutable props in the future.\n\n    ## Style\n\n    The `chart` outer container can be styled with Hyperdiv style\n    props. The chart constructor functions listed above pass\n    `**kwargs` up to `chart`, so you can pass style props to those\n    functions.\n\n    ```py\n    hd.line_chart(\n        (1, 3, 4, 5),\n        (2, 8, 1, 9),\n        grid_color=\"neutral-200\",\n        background_color=\"neutral-50\",\n        border_radius=\"large\",\n        padding=1\n    )\n    ```\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "config",
          "default_value": null,
          "immutable": true,
          "markdown": "[Any](/reference/prop-types/Any)",
          "prop_doc": " The chart configuration"
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "checkbox": {
      "component_type": "class",
      "sig": "checkbox(*label, name=None, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A checkbox component.\n\n    ```py\n    hd.checkbox(\"Check Me\")\n    ```\n\n    An indeterminate checkbox:\n\n    ```py\n    hd.checkbox(\"Check Me\", indeterminate=True)\n    ```\n\n    ",
      "tag": "sl-checkbox",
      "props": [
        {
          "prop_name": "name",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The internal name of the checkbox. This is pertinent when using\n checkboxes in @component(form)s."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the checkbox."
        },
        {
          "prop_name": "checked",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the checkbox is checked."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " When disabled is `True`, the checkbox cannot be interacted with."
        },
        {
          "prop_name": "indeterminate",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " An indeterminate checkbox is neither checked nor unchecked."
        },
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "control_style",
          "prop_doc": null
        },
        {
          "prop_name": "control_checked_style",
          "prop_doc": null
        },
        {
          "prop_name": "control_indeterminate_style",
          "prop_doc": null
        },
        {
          "prop_name": "checked_icon_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [
        {
          "method_name": "value",
          "sig": "value # read-only property",
          "doc": null
        },
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": null
        }
      ],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "color_picker": {
      "component_type": "class",
      "sig": "color_picker(*, swatches='', **kwargs)",
      "doc": null,
      "class_doc": "\n    A component that allows picking a color value graphically. By\n    default it works like dropdown, rendering a color indicator that\n    when clicked, opens the picker. When you pass `inline=True`, the\n    picker will render inline.\n\n    ```py\n    with hd.box(gap=1):\n        picker = hd.color_picker(value=\"#000000\")\n        hd.text(picker.value)\n    ```\n\n    ### Rendered inline\n\n    ```py\n    with hd.box(gap=1):\n        picker = hd.color_picker(\n            inline=True,\n            value=\"#000000\",\n        )\n        hd.text(picker.value)\n    ```\n\n    ### Swatches\n\n    You can use the `swatches` prop to add a `;`-delimited list of\n    preset colors that will be rendered at the bottom of the picker.\n\n    ```py\n    with hd.box(gap=1):\n        picker = hd.color_picker(\n            inline=True,\n            value=\"#000000\",\n            swatches=\"#ffaabb;#ccdd00;#bb00ff\"\n        )\n        hd.text(picker.value)\n    ```\n\n    ",
      "tag": "sl-color-picker",
      "props": [
        {
          "prop_name": "value",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The picked color, in the format determined by the `color_format` prop."
        },
        {
          "prop_name": "assistive_label",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " An invisible descriptive label that is helpful for accessibility."
        },
        {
          "prop_name": "color_format",
          "default_value": "hex",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('hex', 'hsv', 'hsl', 'rgb')",
          "prop_doc": " The format of the `value` prop."
        },
        {
          "prop_name": "inline",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the picker inline. By default, it works like a dropdown."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the picker. This size affects the \"dropdown trigger\"\n when `inline` is `False`. It does not affect the picker component itself."
        },
        {
          "prop_name": "no_format_toggle",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to disable the part of the picker that allows color format toggling."
        },
        {
          "prop_name": "name",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The internal name of the picker. This is only relevant when\n using pickers in @component(form)s."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the picker is disabled, preventing user interaction."
        },
        {
          "prop_name": "hoist",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "opacity",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to show a slider for choosing the opacity of the\n color. The `value` prop values will include opacity values."
        },
        {
          "prop_name": "uppercase",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to uppercase the color values."
        },
        {
          "prop_name": "swatches",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " A `;`-delimited list of color values to show as \"swatches\" --\n color presets."
        },
        {
          "prop_name": "grid_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The width of the color grid."
        },
        {
          "prop_name": "grid_height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The height of the color grid."
        },
        {
          "prop_name": "grid_handle_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The diameter of the color choosing handle."
        },
        {
          "prop_name": "slider_height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The height of the color slider track below the grid."
        },
        {
          "prop_name": "slider_handle_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The diameter of the slider handle."
        },
        {
          "prop_name": "swatch_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The size of the swatch squares."
        },
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "trigger_style",
          "prop_doc": null
        },
        {
          "prop_name": "swatches_style",
          "prop_doc": null
        },
        {
          "prop_name": "swatch_style",
          "prop_doc": null
        },
        {
          "prop_name": "grid_style",
          "prop_doc": null
        },
        {
          "prop_name": "grid_handle_style",
          "prop_doc": null
        },
        {
          "prop_name": "slider_style",
          "prop_doc": null
        },
        {
          "prop_name": "slider_handle_style",
          "prop_doc": null
        },
        {
          "prop_name": "hue_slider_style",
          "prop_doc": null
        },
        {
          "prop_name": "hue_slider_handle_style",
          "prop_doc": null
        },
        {
          "prop_name": "opacity_slider_style",
          "prop_doc": null
        },
        {
          "prop_name": "opacity_slider_handle_style",
          "prop_doc": null
        },
        {
          "prop_name": "preview_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_style",
          "prop_doc": null
        },
        {
          "prop_name": "eye_dropper_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "eye_dropper_button_base_style",
          "prop_doc": null
        },
        {
          "prop_name": "eye_dropper_button_prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "eye_dropper_button_label_style",
          "prop_doc": null
        },
        {
          "prop_name": "eye_dropper_button_suffix_style",
          "prop_doc": null
        },
        {
          "prop_name": "eye_dropper_button_caret_style",
          "prop_doc": null
        },
        {
          "prop_name": "format_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "format_button_base_style",
          "prop_doc": null
        },
        {
          "prop_name": "format_button_prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "format_button_label_style",
          "prop_doc": null
        },
        {
          "prop_name": "format_button_suffix_style",
          "prop_doc": null
        },
        {
          "prop_name": "format_button_caret_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": null
        }
      ],
      "superclasses": [
        "Component",
        "Slottable"
      ],
      "is_mixin": false
    },
    "details": {
      "component_type": "class",
      "sig": "details(*summary, expand_icon=None, collapse_icon=None, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    Renders a summary that when clicked, reveals content.\n\n    ```py\n    with hd.details(\"Open Me\"):\n        hd.text(\"Contents\")\n    ```\n\n    ### Custom style\n\n    ```py\n    with hd.details(\n        \"Open Me\",\n        border=\"none\",\n        header_style=hd.style(\n            padding=(0.2, 0.5, 0.2, 0.5),\n            background_color=\"primary\",\n            font_color=\"neutral-50\",\n        )\n    ):\n        hd.text(\"Contents\")\n    ```\n\n    ### Opened by default\n\n    ```py\n    with hd.details(\"Open Me\", opened=True):\n        hd.text(\"Contents\")\n    ```\n\n    ### Opened programmatically\n\n    ```py\n    with hd.box(gap=1):\n        with hd.details(\"Open Me\") as details:\n            hd.text(\"Contents\")\n\n        if hd.button(\"Toggle\").clicked:\n            details.opened = not details.opened\n    ```\n\n\n    ### Custom Icons\n\n    Note that the `collapse_icon` is implicitly rotated 90 degrees clockwise.\n\n    ```py\n    with hd.details(\n        \"Open Me\",\n        expand_icon=\"arrow-right\",\n        collapse_icon=\"arrow-bar-right\"\n    ):\n        hd.text(\"Contents\")\n    ```\n    ",
      "tag": "sl-details",
      "props": [
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "header_style",
          "prop_doc": null
        },
        {
          "prop_name": "summary_style",
          "prop_doc": null
        },
        {
          "prop_name": "summary_icon_style",
          "prop_doc": null
        },
        {
          "prop_name": "content_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "summary",
          "slot_doc": null
        },
        {
          "slot_name": "expand_icon_slot",
          "slot_doc": null
        },
        {
          "slot_name": "collapse_icon_slot",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled",
        "Togglable"
      ],
      "is_mixin": false
    },
    "dialog": {
      "component_type": "class",
      "sig": "dialog(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A dialog is an overlay that opens in the middle of the viewport. A\n    dialog can contain arbitrary hyperdiv components.\n\n    ```py\n    dialog = hd.dialog(\"My Dialog\")\n    with dialog:\n        hd.text(\"Dialog Contents\")\n    if hd.button(\"Open Dialog\").clicked:\n        dialog.opened = True\n    ```\n\n    ",
      "tag": "sl-dialog",
      "props": [],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "overlay_style",
          "prop_doc": null
        },
        {
          "prop_name": "panel_style",
          "prop_doc": null
        },
        {
          "prop_name": "header_style",
          "prop_doc": null
        },
        {
          "prop_name": "header_actions_style",
          "prop_doc": null
        },
        {
          "prop_name": "title_style",
          "prop_doc": null
        },
        {
          "prop_name": "close_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "close_button_base_style",
          "prop_doc": null
        },
        {
          "prop_name": "body_style",
          "prop_doc": null
        },
        {
          "prop_name": "footer_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "label_slot",
          "slot_doc": null
        },
        {
          "slot_name": "header_actions",
          "slot_doc": null
        },
        {
          "slot_name": "footer",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Togglable"
      ],
      "is_mixin": false
    },
    "divider": {
      "component_type": "class",
      "sig": "divider(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A horizontal or vertical divider used to add visual separation\n    between components.\n\n    ```py\n    with hd.box():\n        hd.text(\"Item One\")\n        hd.divider(spacing=0.5)\n        hd.text(\"Item Two\")\n    ```\n\n    To use a divider in a horizontal box, pass `vertical=True` to\n    render a vertical divider.\n\n    ```py\n    with hd.hbox():\n        hd.text(\"Item One\")\n        hd.divider(vertical=True, spacing=1)\n        hd.text(\"Item Two\")\n    ```\n\n    ",
      "tag": "sl-divider",
      "props": [
        {
          "prop_name": "vertical",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the divider should be rendered vertically."
        },
        {
          "prop_name": "color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The color of the divider."
        },
        {
          "prop_name": "thickness",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The thickness of the divider."
        },
        {
          "prop_name": "spacing",
          "default_value": 0,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The spacing around the divider."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "drawer": {
      "component_type": "class",
      "sig": "drawer(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A drawer is an overlay container that slides in from the sides of\n    the viewport. A drawer has a title and a body, and the body can\n    contain arbitrary hyperdiv components.\n\n    ```py\n    with hd.box(gap=1):\n        placement = hd.radio_buttons(\n            \"start\",\n            \"top\",\n            \"end\",\n            \"bottom\",\n            value=\"start\"\n        )\n\n        with hd.drawer(\n            \"My Drawer\",\n            placement=placement.value,\n        ) as drawer:\n            hd.text(\"Drawer contents\")\n\n        if hd.button(\"Open Drawer\").clicked:\n            drawer.opened = True\n    ```\n\n    ## Contained Drawers\n\n    Drawers can be contained within a @component(box) if you set the\n    `contained` prop to `True`.\n\n    ```py\n    with hd.box(height=10, border=\"1px solid neutral-100\"):\n        with hd.drawer(\n            \"My Drawer\",\n            contained=True\n        ) as drawer:\n            hd.text(\"Drawer Contents\")\n\n    if hd.button(\"Open Drawer\").clicked:\n        drawer.opened = True\n    ```\n\n    ## Header Actions\n\n    Drawers can have additional components (such as icon buttons or\n    links) placed in a `header_actions` slot, which is rendered to the\n    left of the drawer close button.\n\n    ```py\n    with hd.drawer(\"My Drawer\") as drawer:\n        hd.text(\"Drawer Contents\")\n\n        with hd.hbox(\n            slot=drawer.header_actions,\n            align=\"center\",\n            gap=0.8\n        ):\n            hd.icon_button(\"gear\")\n            hd.icon_button(\"people\")\n\n    if hd.button(\"Open Drawer\").clicked:\n        drawer.opened = True\n    ```\n\n    In this example, we place a horizontal @component(box) in the\n    drawer's `header_actions` slot and put two side-by-side\n    @component(icon_button)s in that box.\n    ",
      "tag": "sl-drawer",
      "props": [
        {
          "prop_name": "placement",
          "default_value": "start",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('end', 'bottom', 'top', 'start')",
          "prop_doc": " Where the drawer opens from:\n * `top` - opens downward from the top.\n * `start` - opens rightward from the left.\n * `bottom` - opens upward from the bottom.\n * `end` - opens leftward from the right."
        },
        {
          "prop_name": "contained",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the drawer should be contained within its parent\n component. By default, the drawer is contained within the\n top-level viewport."
        },
        {
          "prop_name": "no_header",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Removes the header and the close button. Since this removes the\n default way to close the drawer, users should be provided with an\n alternative way to close the drawer."
        }
      ],
      "style_parts": [
        {
          "prop_name": "panel_style",
          "prop_doc": " The style part controlling the panel."
        },
        {
          "prop_name": "base_style",
          "prop_doc": " The style part controlling the base."
        },
        {
          "prop_name": "overlay_style",
          "prop_doc": null
        },
        {
          "prop_name": "header_style",
          "prop_doc": null
        },
        {
          "prop_name": "header_actions_style",
          "prop_doc": null
        },
        {
          "prop_name": "title_style",
          "prop_doc": null
        },
        {
          "prop_name": "close_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "close_button_base_style",
          "prop_doc": null
        },
        {
          "prop_name": "body_style",
          "prop_doc": null
        },
        {
          "prop_name": "footer_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "label_slot",
          "slot_doc": null
        },
        {
          "slot_name": "header_actions",
          "slot_doc": null
        },
        {
          "slot_name": "footer",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Togglable"
      ],
      "is_mixin": false
    },
    "dropdown": {
      "component_type": "class",
      "sig": "dropdown(*button_label, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A dropdown is an overlay component that opens near a \"trigger\"\n    component. Normally the trigger is a button, and clicking the\n    button will open the dropdown overlay.\n\n    The dropdown component is a container that has a `trigger` slot.\n    The trigger component should be placed in the `trigger` slot.\n\n    The body of the dropdown is the content that will open when the\n    `opened` prop is set to `True`.\n\n    Typical dropdown usage:\n\n    ```py\n    with hd.dropdown(\"Open\"):\n        hd.text(\"The content\")\n    ```\n\n    To customize the click target, don't pass a label, use the\n    `target` slot, and toggle the dropdown's `opened` prop when the\n    target is clicked:\n\n    ```py\n    with hd.dropdown() as dropdown:\n        # The trigger:\n        trigger = hd.button(\n            \"Open\",\n            variant='primary',\n            caret=True,\n            slot=dropdown.trigger\n        )\n        # When the trigger is clicked,\n        # the dropdown is toggled:\n        if trigger.clicked:\n            dropdown.opened = not dropdown.opened\n        # The content:\n        hd.text(\"The content\")\n    ```\n\n    In the following example, you can explore the behavior of the\n    dropdown's props, which can be used to control where, relative to\n    the trigger, the dropdown opens.\n\n    ```py\n    placement_values = (\n        \"top\",\n        \"top-start\",\n        \"top-end\",\n        \"bottom\",\n        \"bottom-start\",\n        \"bottom-end\",\n        \"right\",\n        \"right-start\",\n        \"right-end\",\n        \"left\",\n        \"left-start\",\n        \"left-end\"\n    )\n\n    with hd.box(gap=1):\n        placement = hd.select(\n            \"Placement:\",\n            options=placement_values,\n            value=\"bottom-start\"\n        )\n        skidding = hd.slider(\"Skidding\")\n        distance = hd.slider(\"Distance\")\n\n        with hd.dropdown(\n            \"Open Me\",\n            placement=placement.value,\n            skidding=int(skidding.value),\n            distance=int(distance.value)\n        ) as dropdown:\n            with hd.box(\n                border=\"1px solid green\",\n                padding=1,\n                background_color=\"neutral-50\"\n            ):\n                hd.text(\"Dropdown Contents\")\n    ```\n\n    ",
      "tag": "sl-dropdown",
      "props": [
        {
          "prop_name": "placement",
          "default_value": "bottom-start",
          "immutable": false,
          "markdown": "[ShoelacePlacement](/reference/prop-types/ShoelacePlacement)",
          "prop_doc": null
        },
        {
          "prop_name": "distance",
          "default_value": 0,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": null
        },
        {
          "prop_name": "skidding",
          "default_value": 0,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "trigger_style",
          "prop_doc": null
        },
        {
          "prop_name": "panel_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "trigger",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled",
        "Togglable"
      ],
      "is_mixin": false
    },
    "icon": {
      "component_type": "class",
      "sig": "icon(name=\"emoji-laughing-fill\", **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A component that renders one of the built-in icons. See\n    @prop_type(Icon) for the available icons. Icons can be styled\n    using style props, much like you style text.\n\n    Also see the related @component(icon_button).\n\n    ```py\n    with hd.box(gap=1):\n        hd.icon()\n        hd.icon(\"apple\", font_size=3)\n        hd.icon(\n            \"activity\",\n            font_color=\"red\",\n            font_size=2,\n            border=\"1px solid neutral-200\",\n            border_radius=\"large\",\n            padding=0.5\n        )\n    ```\n\n    ",
      "tag": "sl-icon",
      "props": [
        {
          "prop_name": "name",
          "default_value": "emoji-laughing-fill",
          "immutable": false,
          "markdown": "[Icon](/reference/prop-types/Icon)",
          "prop_doc": " The name of the icon."
        },
        {
          "prop_name": "assistive_label",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " An invisible label useful for accessibility."
        }
      ],
      "style_parts": [
        {
          "prop_name": "svg_style",
          "prop_doc": null
        },
        {
          "prop_name": "use_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "icon_button": {
      "component_type": "class",
      "sig": "icon_button(name=\"emoji-laughing-fill\", padding=0, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    An @component(icon) that behaves like a clickable button. Its\n    `clicked` event prop fires when the icon button is clicked.\n\n    ```py\n    button = hd.icon_button(\"apple\")\n    ```\n    ",
      "tag": "sl-icon-button",
      "props": [
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the icon button is disabled."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "icon",
        "Interactive"
      ],
      "is_mixin": false
    },
    "image": {
      "component_type": "class",
      "sig": "image(src, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    An image component.\n\n    ```py\n    hd.image(\"/assets/kitten.jpg\")\n    ```\n\n    When the image source is a path, it can either refer to a local\n    `/assets` path or a remote URL.\n\n    In addition to paths, the `src` prop can also be base64-encoded\n    image bytes. If you pass raw image bytes into the `image`\n    constructor, they will automatically be converted to base64.\n    ",
      "tag": "img",
      "props": [
        {
          "prop_name": "src",
          "default_value": "",
          "immutable": false,
          "markdown": "[ImageSrc](/reference/prop-types/ImageSrc)",
          "prop_doc": " The source path or URL of the image."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled",
        "Interactive"
      ],
      "is_mixin": false
    },
    "BrowserSingleton": {
      "component_type": "class",
      "sig": "BrowserSingleton()\n",
      "doc": "BrowserSingleton should not be instantiated directly.",
      "class_doc": "\n    A browser singleton is a non-UI component that communicates values\n    between Python <-> browser.\n\n    All instances of a BrowserSingleton class share the same underlying\n    state.\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "BaseState"
      ],
      "is_mixin": false
    },
    "location": {
      "component_type": "class",
      "sig": "location()\n",
      "doc": "BrowserSingleton should not be instantiated directly.",
      "class_doc": "\n    `location` is a Hyperdiv component that gives access to the\n    browser's location bar.  Using `location`, you can render\n    different things for different location paths, query args, and\n    hash args.\n\n    `location` offers three props: `path`, `query_args`, and `hash_arg`.\n\n    If the browser location is `https://my-app.com/foo/bar?a=1&b=2#hello`, then:\n\n    * `location().protocol == \"https:\"`\n    * `location().host == \"my-app.com\"`\n    * `location().path == \"/foo/bar\"`\n    * `location().query_args == \"a=1&b=2\"`\n    * `location().hash_arg == \"hello\"`\n\n    You can change the location by using the `go()` method. For\n    example, to change the location to `\"/foo/bar\"`, you can call\n    `location().go(path=\"/foo/bar\")`.\n\n    Changing the location by using `go()` or mutating the location\n    props is useful in some cases, but in general is an anti-pattern\n    and you should instead use @component(link)s to implement\n    navigation.\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "protocol",
          "default_value": null,
          "immutable": true,
          "markdown": "[Optional](/reference/prop-types/Optional)([PureString](/reference/prop-types/PureString))",
          "prop_doc": " The protocol part of the browser location bar."
        },
        {
          "prop_name": "host",
          "default_value": null,
          "immutable": true,
          "markdown": "[Optional](/reference/prop-types/Optional)([PureString](/reference/prop-types/PureString))",
          "prop_doc": " The host part of the browser location bar."
        },
        {
          "prop_name": "path",
          "default_value": "/",
          "immutable": false,
          "markdown": "[PathString](/reference/prop-types/PathString)",
          "prop_doc": " The path part of the browser location bar."
        },
        {
          "prop_name": "query_args",
          "default_value": "",
          "immutable": false,
          "markdown": "[LocationPart](/reference/prop-types/LocationPart)",
          "prop_doc": " The query args part of the browser location bar, not including\n the leading `?`."
        },
        {
          "prop_name": "hash_arg",
          "default_value": "",
          "immutable": false,
          "markdown": "[LocationPart](/reference/prop-types/LocationPart)",
          "prop_doc": " The hash part of the location bar, not including the leading\n `#`."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "go",
          "sig": "go(self, path, query_args='', hash_arg='')",
          "doc": "\n        Change the browser location bar by simultaneously mutating all\n        three props. For example, `go(path=\"/foo\", hash_arg=\"bar\")` will\n        set the location to `\"/foo#bar\"`. If `query_args` is currently\n        set to a value, if will be set to `\"\"`.\n\n        If you need to programmatically mutate the location, this is\n        the recommended way to do it. If instead you mutate\n        individual props, say `location().path = \"/foo\"`, that will\n        only change the path prop, and let the other props remain\n        unchanged, which is probably not what you want.\n        "
        },
        {
          "method_name": "to_string",
          "sig": "to_string(self)",
          "doc": "\n        Returns a string of the full location, suitable for pasting into\n        the browser's location bar.\n        "
        }
      ],
      "superclasses": [
        "BrowserSingleton"
      ],
      "is_mixin": false
    },
    "Singleton": {
      "component_type": "class",
      "sig": "Singleton()\n",
      "doc": "Singleton should not be instantiated directly.",
      "class_doc": "\n    A Singleton is a non-UI component that never gets sent to the\n    frontend. It is backend-only.\n\n    All instances of a Singleton class share the same underlying\n    state.\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "BaseState"
      ],
      "is_mixin": false
    },
    "lifecycle": {
      "component_type": "class",
      "sig": "lifecycle()\n",
      "doc": "Singleton should not be instantiated directly.",
      "class_doc": "\n    The `lifecycle` component gives you the opportunity to execute\n    one-time actions when the app starts or stops.\n\n    For example you can allocate resources on app start, and\n    de-allocate them before the app exits.\n\n    Or if you have long-running @component(task)s you can signal those\n    tasks to exit. The app won't cleanly shut down if there are\n    lingering tasks still executing.\n\n    ```py-nodemo\n\n    def my_task(state):\n        state.running = True\n\n        while state.running:\n            do_something()\n\n    def app():\n        state = hd.state(running=False)\n\n        task = hd.task()\n        task.run(my_task, state)\n\n        lifecycle = hd.lifecycle()\n        if lifecycle.app_stopped:\n            state.running = False\n    ```\n\n    Note that if the app function crashes, the code that is supposed\n    to execute on `app_stopped` may not be executed.\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "app_started",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " True for one frame when the app just started."
        },
        {
          "prop_name": "app_stopped",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " True for one frame when the app is about to exit."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Singleton"
      ],
      "is_mixin": false
    },
    "menu": {
      "component_type": "class",
      "sig": "menu(**kwargs)\n",
      "doc": null,
      "class_doc": "\n    A non-navigational menu component. You can build menus out using\n    @component(menu_item), @component(menu_label) and\n    @component(divider).\n\n    ```py\n    with hd.menu() as menu:\n        hd.menu_item(\"One\")\n        hd.menu_item(\"Two\")\n        hd.menu_item(\"Three\")\n        hd.divider(spacing=0.5)\n        hd.menu_label(\"Other options\")\n        hd.menu_item(\n            \"Settings\",\n            prefix_icon=\"gear\"\n        )\n        hd.menu_item(\n            \"Home\",\n            prefix_icon=\"house\"\n        )\n    ```\n\n    The menu's `selected_item` attribute can be used to do stuff when\n    an item was selected.\n\n    ```py\n    state = hd.state(last_selected=None)\n\n    with hd.box(gap=1):\n        with hd.menu() as menu:\n            hd.menu_item(\"One\")\n            hd.menu_item(\"Two\")\n            hd.menu_item(\"Three\")\n            hd.divider(spacing=0.5)\n            hd.menu_label(\"Other options\")\n            hd.menu_item(\n                \"Settings\",\n                prefix_icon=\"gear\"\n            )\n            hd.menu_item(\n                \"Home\",\n                prefix_icon=\"house\"\n            )\n\n        if menu.selected_item:\n            state.last_selected = menu.selected_item.label\n\n        hd.text(\"Last selected:\", state.last_selected)\n    ```\n\n    ### Checkable items\n\n    Menu items can act like checkboxes when you set `item_type` to `\"checkbox\"`.\n\n    ```py\n    with hd.menu():\n        hd.menu_item(\"One\", item_type=\"checkbox\")\n        hd.menu_item(\"Two\", item_type=\"checkbox\")\n    ```\n\n    You can get the checked items out of the menu using the `checked_items` property.\n\n    ```py\n    with hd.box(gap=1):\n        with hd.menu() as menu:\n            hd.menu_item(\"One\", item_type=\"checkbox\")\n            hd.menu_item(\"Two\", item_type=\"checkbox\")\n\n        hd.text(\"Checked items:\", [\n            item.label\n            for item in menu.checked_items\n        ])\n    ```\n\n    ### Dropdown menus\n\n    A typical use of menus is to put them in @component(dropdown)s:\n\n    ```py\n    with hd.dropdown() as dd:\n        trigger = hd.button(\n            \"Open Me\",\n            caret=True,\n            slot=dd.trigger\n        )\n        with hd.menu() as menu:\n            hd.menu_item(\"One\")\n            hd.menu_item(\"Two\")\n            hd.divider(spacing=0.5)\n            hd.menu_item(\"Three\")\n            hd.menu_item(\"Four\")\n        if trigger.clicked or menu.selected_item:\n            dd.opened = not dd.opened\n    ```\n    ",
      "tag": "sl-menu",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "item",
          "sig": "item(self, *args, **kwargs)",
          "doc": null
        },
        {
          "method_name": "items",
          "sig": "items # read-only property",
          "doc": null
        },
        {
          "method_name": "checked_items",
          "sig": "checked_items # read-only property",
          "doc": null
        }
      ],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "menu_item": {
      "component_type": "class",
      "sig": "menu_item(*label, prefix_icon=None, suffix_icon=None, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A menu item component to be used within the @component(menu) component.\n\n    This component exports the `prefix` and `suffix` slots that are\n    typically used for prefix and suffix icons. The `prefix_icon` and\n    `suffix_icon` args in the constructor can be used to quickly add\n    icons into these slots.\n\n    ```py\n    with hd.menu():\n        hd.menu_item(\n            \"Settings\",\n            prefix_icon=\"gear\",\n            suffix_icon=\"bell-slash\"\n        )\n    ```\n\n    ",
      "tag": "sl-menu-item",
      "props": [
        {
          "prop_name": "item_type",
          "default_value": "normal",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('checkbox', 'normal')",
          "prop_doc": " When the value of this prop is `\"checkbox\"`, the manu item is\n checkable and a check mark indicator is rendered next to it."
        },
        {
          "prop_name": "checked",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the item is checked. Only relevant when `item_type` is\n set to `\"checkbox\"`."
        },
        {
          "prop_name": "value",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " A hidden value, like an identifier, that can be assigned to this\n item. You can use this to identify the selected item in a menu."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the item can be selected."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "checked_icon_style",
          "prop_doc": null
        },
        {
          "prop_name": "prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "suffix_style",
          "prop_doc": null
        },
        {
          "prop_name": "submenu_icon_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "prefix",
          "slot_doc": " Prefix slot"
        },
        {
          "slot_name": "suffix",
          "slot_doc": " Suffix slot"
        }
      ],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Interactive"
      ],
      "is_mixin": false
    },
    "menu_label": {
      "component_type": "class",
      "sig": "menu_label(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A menu component that can be used to give titles to sections\n    within a @component(menu).\n\n    ```py\n    with hd.menu():\n        hd.menu_label(\"First section\")\n        hd.menu_item(\"One\")\n        hd.menu_item(\"Two\")\n        hd.divider(spacing=0.5)\n        hd.menu_label(\"Second section\")\n        hd.menu_item(\"Three\")\n        hd.menu_item(\"Four\")\n    ```\n    ",
      "tag": "sl-menu-label",
      "props": [],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "plaintext": {
      "component_type": "class",
      "sig": "plaintext(*content, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A component that renders a block of plain text. Unlike\n    @component(text), which wraps the text in a `<p>` tag, `plaintext`\n    generates a raw block of text that isn't wrapped in an HTML\n    tag. As such, it cannot be styled or slotted.\n\n    ```py\n    hd.plaintext(\"Hello\")\n    ```\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "content",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The text content."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component"
      ],
      "is_mixin": false
    },
    "progress_bar": {
      "component_type": "class",
      "sig": "progress_bar(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    Renders a progress bar that can be either indeterminate, or have a\n    concrete percentage value.\n\n    ### Indeterminate\n\n    ```py\n    hd.progress_bar(indeterminate=True)\n    ```\n\n    ### Concrete value\n\n    ```py\n    hd.progress_bar(value=40)\n    ```\n\n    ### Custom progress bar\n\n    ```py\n    hd.progress_bar(\n        \"40%\",\n        value=40,\n        track_color=\"blue-50\",\n        indicator_color=\"green-300\",\n        label_color=\"yellow\",\n        bar_height=4,\n        label_style=hd.style(\n            font_size=2,\n            font_family=\"mono\"\n        ),\n    )\n    ```\n\n    ### Mutating the value\n\n    ```py\n    with hd.box(gap=1):\n        bar = hd.progress_bar(value=40)\n        with hd.hbox(gap=1):\n            if hd.button(\"Increase\").clicked:\n                if bar.value <= 95:\n                    bar.value += 5\n            if hd.button(\"Reset\").clicked:\n                    bar.value = 40\n    ```\n\n    ",
      "tag": "sl-progress-bar",
      "props": [
        {
          "prop_name": "value",
          "default_value": 0,
          "immutable": false,
          "markdown": "[ClampedFloat](/reference/prop-types/ClampedFloat)(low=0, high=100)",
          "prop_doc": null
        },
        {
          "prop_name": "indeterminate",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "assistive_label",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": null
        },
        {
          "prop_name": "bar_height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": null
        },
        {
          "prop_name": "track_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": null
        },
        {
          "prop_name": "indicator_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": null
        },
        {
          "prop_name": "label_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "indicator_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "progress_ring": {
      "component_type": "class",
      "sig": "progress_ring(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A customizable circular progress component that can be used to\n    indicate progress to the user.\n\n    ```py\n    with hd.box(gap=0.5):\n        progress = hd.progress_ring(value=10)\n        with hd.hbox():\n            minus = hd.icon_button(\"dash\")\n            if minus.clicked:\n                progress.value -= 10\n            plus = hd.icon_button(\"plus\")\n            if plus.clicked:\n                progress.value += 10\n    ```\n\n    ",
      "tag": "sl-progress-ring",
      "props": [
        {
          "prop_name": "value",
          "default_value": 0,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " The value of the progress ring. 0 indicates an empty ring, and\n 100 indicates a full ring. Negative values or values over 100\n will cause the ring to wrap around."
        },
        {
          "prop_name": "assistive_label",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " An invisible label useful for accessibility."
        },
        {
          "prop_name": "track_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The width of the background track."
        },
        {
          "prop_name": "track_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The color of the background track."
        },
        {
          "prop_name": "indicator_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The width of the progress indicator."
        },
        {
          "prop_name": "indicator_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The color of the progress indicator."
        },
        {
          "prop_name": "size",
          "default_value": 4,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The diameter of the progress ring."
        },
        {
          "prop_name": "transition_duration",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([TimeValue](/reference/prop-types/TimeValue))",
          "prop_doc": " How long it takes to visually transition from the current value\n to the new value, when the value changes."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "split_panel": {
      "component_type": "class",
      "sig": "split_panel(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A container that renders side by side components with a draggable\n    divider between them. The divider can be dragged to increase the\n    width of one component while decreasing the width of the other.\n\n    The split panel provides the slots `start` and `end` into which\n    the two components can be slotted.\n\n    ```py\n    with hd.split_panel(height=5) as sp:\n        with hd.box(\n            align=\"center\",\n            justify=\"center\",\n            horizontal_scroll=False,\n            background_color=\"neutral-50\",\n            slot=sp.start,\n        ):\n            hd.text(\"One\")\n        with hd.box(\n            align=\"center\",\n            justify=\"center\",\n            horizontal_scroll=False,\n            background_color=\"neutral-50\",\n            slot=sp.end,\n        ):\n            hd.text(\"Two\")\n    ```\n\n    ### Custom Divider\n\n    The divider box can be customized using the `divider_style` style\n    part, and custom components can be slotted into the \"grip\" area of\n    the divider using the `divider` slot.\n\n    ```py\n    with hd.split_panel(\n        height=5,\n        divider_width=\"1px\",\n        divider_style=hd.style(\n            background_color=\"green\"\n        )\n    ) as sp:\n        with hd.box(\n            align=\"center\",\n            justify=\"center\",\n            horizontal_scroll=False,\n            background_color=\"neutral-50\",\n            slot=sp.start,\n        ):\n            hd.text(\"One\")\n        with hd.box(\n            align=\"center\",\n            justify=\"center\",\n            horizontal_scroll=False,\n            background_color=\"neutral-50\",\n            slot=sp.end,\n        ):\n            hd.text(\"Two\")\n        with hd.box(slot=sp.divider):\n            hd.icon(\"circle-fill\", font_color=\"green\")\n    ```\n\n    ",
      "tag": "sl-split-panel",
      "props": [
        {
          "prop_name": "position",
          "default_value": 50,
          "immutable": false,
          "markdown": "[ClampedFloat](/reference/prop-types/ClampedFloat)(low=0, high=100)",
          "prop_doc": " The position of the draggable divider expressed as a percentage."
        },
        {
          "prop_name": "vertical",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the split panel is rendered vertically. In this case,\n the draggable divider is a horizontal divider and can be dragged\n up and down."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the divider can be dragged."
        },
        {
          "prop_name": "primary",
          "default_value": null,
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('end', None, 'start')",
          "prop_doc": " Which panel is considered the primary panel."
        },
        {
          "prop_name": "primary_min_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The minimum size of the primary panel."
        },
        {
          "prop_name": "primary_max_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The maximum size of the primary panel."
        },
        {
          "prop_name": "snap",
          "default_value": null,
          "immutable": false,
          "markdown": "[Snap](/reference/prop-types/Snap)",
          "prop_doc": " The points to which the divider snaps while dragged."
        },
        {
          "prop_name": "snap_threshold",
          "default_value": 12,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " When the divider is within a certain distance from a snapping\n point, it immediately snaps into place. This prop sets that\n distance in pixels."
        },
        {
          "prop_name": "divider_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The width of the divider."
        },
        {
          "prop_name": "divider_hit_area",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The space/area around the divider from which the divider can be\n dragged."
        }
      ],
      "style_parts": [
        {
          "prop_name": "start_style",
          "prop_doc": null
        },
        {
          "prop_name": "end_style",
          "prop_doc": null
        },
        {
          "prop_name": "panel_style",
          "prop_doc": null
        },
        {
          "prop_name": "divider_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "start",
          "slot_doc": null
        },
        {
          "slot_name": "end",
          "slot_doc": null
        },
        {
          "slot_name": "divider",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "spinner": {
      "component_type": "class",
      "sig": "spinner(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    An customizable component that can be used to show indeterminate\n    progress.\n\n    ```py\n    with hd.box(font_size=4):\n        hd.spinner(\n            speed=\"5s\",\n            track_width=0.5\n        )\n    ```\n    ",
      "tag": "sl-spinner",
      "props": [
        {
          "prop_name": "track_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The width of the background spinner track."
        },
        {
          "prop_name": "track_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The color of the background spinner track."
        },
        {
          "prop_name": "indicator_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The color of the spinning indicator."
        },
        {
          "prop_name": "speed",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([TimeValue](/reference/prop-types/TimeValue))",
          "prop_doc": " The speed of the spinner. A higher time value causes the spinner\n to spin slower."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Slottable"
      ],
      "is_mixin": false
    },
    "state": {
      "component_type": "class",
      "sig": "state(**prop_kwargs)\n",
      "doc": null,
      "class_doc": "\n    `state` is the default and quickest means by which users can\n    create and maintain custom application and UI state. The keyword\n    arguments passed into the `state` constructor are dynamically\n    converted into untyped props that persist across the application\n    session.\n\n    ```py\n    state = hd.state(count=0, name=\"Henry\")\n\n    if hd.button(\"Increment Count\").clicked:\n        state.count += 1\n\n    if hd.button(\"Toggle Name\").clicked:\n        if state.name == \"Henry\":\n            state.name = \"Bob\"\n        else:\n            state.name = \"Henry\"\n\n    hd.text(\"Count:\", state.count)\n    hd.text(\"Name:\", state.name)\n\n    ```\n\n    In the example above, `count` and `name` become props of\n    `state`. When the user clicks the buttons, the props are mutated.\n\n    ## Initial Values\n\n    Since the app function re-runs over and over, the initial values\n    passed to `state` are recreated on every run. This is fine in most\n    cases, but can cause unexpected behaviors if the initialization\n    value is an object that is supposed to be unique.\n\n    For example:\n\n    ```py-nodemo\n    state = hd.state(lock=threading.Lock())\n    ```\n\n    Here, the lock will be a *different lock object* every time the\n    app re-runs, since `threading.Lock()` is called on every run. To\n    get a unique lock object, use this pattern:\n\n    ```py-nodemo\n    state = hd.state(lock=None)\n    if state.lock is None:\n        state.lock = threading.Lock()\n    ```\n\n    In this example, the lock object is created only once, on the\n    first run, and stored in `state.lock`. Since the `lock` prop is\n    mutated on the first run, subsequent initializations to `None`\n    will be ignored, and the prop will take its value from its\n    internal, mutated state.\n\n    If you want to define state with typed props, see @component(BaseState).\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "BaseState"
      ],
      "is_mixin": false
    },
    "tab": {
      "component_type": "class",
      "sig": "tab(*label, slot=None, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    Renders a tab component. This component is not useful\n    directly. Instead, a group of tabs should be nested inside a\n    @component(tab_group).\n    ",
      "tag": "sl-tab",
      "props": [
        {
          "prop_name": "active",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether this tab is the active tab."
        },
        {
          "prop_name": "closable",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render a close button."
        },
        {
          "prop_name": "closed_clicked",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " Whether the close button was clicked."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether this tab is disabled. If it is disabled, it cannot be\n activated."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "close_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "close_button_base_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "tab_group": {
      "component_type": "class",
      "sig": "tab_group(*tabs, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    `tab_group` groups together a set of @component(tab)\n    components. You can inspect the `active` prop on each tab to see\n    which tab is currently selected, and render content specific to\n    that tab.\n\n    ```py\n    with hd.tab_group() as tabs:\n        t1 = hd.tab(\"One\")\n        t2 = hd.tab(\"Two\")\n        t3 = hd.tab(\"Three\")\n\n    with hd.box(padding=1):\n        if t1.active:\n            hd.text(\"One\")\n        elif t2.active:\n            hd.text(\"Two\")\n        else:\n            hd.text(\"Three\")\n    ```\n\n    If you don't need control over how each tab is rendered, there is\n    a much terser alternative shorthand notation by passing the tab\n    names directly in the constructor, and using the `active` prop on\n    the tab group to inspect which tab is active, using the tab name:\n\n    ```py\n    tabs = hd.tab_group(\"One\", \"Two\", \"Three\")\n\n    with hd.box(padding=1):\n        if tabs.active == \"One\":\n            hd.text(\"One\")\n        elif tabs.active == \"Two\":\n            hd.text(\"Two\")\n        else:\n            hd.text(\"Three\")\n    ```\n\n    ### Vertical tabs\n\n    ```py\n    with hd.hbox():\n        tabs = hd.tab_group(\n            \"One\", \"Two\", \"Three\",\n            placement=\"start\"\n        )\n        with hd.box(padding=1):\n            if tabs.active == \"One\":\n                hd.text(\"One\")\n            elif tabs.active == \"Two\":\n                hd.text(\"Two\")\n            else:\n                hd.text(\"Three\")\n    ```\n    ",
      "tag": "sl-tab-group",
      "props": [
        {
          "prop_name": "placement",
          "default_value": "top",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('end', 'bottom', 'top', 'start')",
          "prop_doc": " The placement of the tabs:\n\n * top: the tabs are laid out horizontally, the underline is\n   rendered below the tabs, and the tab group is placed at the\n   top of the tab group container.\n\n * bottom: the tabs are laid out horizontally, the underline is\n   rendered above the tabs, and the tab group is placed at the\n   bottom of the tab group container.\n\n * start: the tabs are laid out vertically, the underline is\n   rendered to the right of the tabs, and the tab group is placed\n   at the start of the tab group container.\n\n * end: the tabs are laid out vertically, the underline is\n   rendered to the left of the tabs, and the tab group is placed\n   at the end of the tab group container."
        },
        {
          "prop_name": "activation",
          "default_value": "auto",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('manual', 'auto')",
          "prop_doc": " By default, when navigating with the keyboard, tabs are\n automatically activated when pressing the left or right arrow\n keys. When activation is set to `\"manual\"`, you have to press\n Space or Enter to activate the focused tab."
        },
        {
          "prop_name": "no_scroll_controls",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render scroll buttons when the tabs overflow."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "nav_style",
          "prop_doc": null
        },
        {
          "prop_name": "tabs_style",
          "prop_doc": null
        },
        {
          "prop_name": "active_tab_indicator_style",
          "prop_doc": null
        },
        {
          "prop_name": "body_style",
          "prop_doc": null
        },
        {
          "prop_name": "scroll_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "scroll_button_start_style",
          "prop_doc": null
        },
        {
          "prop_name": "scroll_button_end_style",
          "prop_doc": null
        },
        {
          "prop_name": "scroll_button_base_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "nav",
          "slot_doc": null
        }
      ],
      "methods": [
        {
          "method_name": "closed",
          "sig": "closed # read-only property",
          "doc": null
        },
        {
          "method_name": "active",
          "sig": "active # read-only property",
          "doc": null
        }
      ],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "tag": {
      "component_type": "class",
      "sig": "tag(*label, width=\"fit-content\", **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A tag component similar to @component(badge).\n\n    ```py\n    state = hd.state(removed=False)\n\n    with hd.box(gap=1):\n        hd.tag(\"A tag\")\n        hd.tag(\"A danger tag\", variant=\"danger\")\n        hd.tag(\"A small tag\", size=\"small\")\n        hd.tag(\"A large tag\", size=\"large\")\n        hd.tag(\n            \"A warning pill tag\",\n            variant=\"warning\",\n            pill=True\n        )\n    ```\n\n    ### Removable tags\n\n    When passing `removable=True`, the tag renders a close button.\n    The event prop `removed` fires when the button is clicked.\n\n    ```py\n    state = hd.state(removed=False)\n\n    if not state.removed:\n        tag = hd.tag(\n            \"A removable tag\",\n            removable=True\n        )\n        if tag.removed:\n            state.removed = True\n    ```\n\n    ",
      "tag": "sl-tag",
      "props": [
        {
          "prop_name": "variant",
          "default_value": "neutral",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('text', 'warning', 'neutral', 'primary', 'success', 'danger')",
          "prop_doc": " The variant of the tag."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the tag."
        },
        {
          "prop_name": "pill",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the tag is rendered as a pill."
        },
        {
          "prop_name": "removable",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether a closed button is rendered in the tag."
        },
        {
          "prop_name": "removed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " Event prop that fires when the closed button is clicked."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "content_style",
          "prop_doc": null
        },
        {
          "prop_name": "remove_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "remove_button_base_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Interactive"
      ],
      "is_mixin": false
    },
    "text": {
      "component_type": "class",
      "sig": "text(*content, **kwargs)\n",
      "doc": "\n        The chunks passed in `*content` will be joined by `\" \"` and used\n        to initialize the `content` prop.\n\n        ```py\n        x = 2\n        hd.text(\"I have\", x, \"chickens.\")\n        # is equivalent to\n        hd.text(content=f\"I have {x} chickens.\")\n        ```\n\n        ",
      "class_doc": "\n    Renders a block of text.\n\n    ```py\n    hd.text(\"Hello World\")\n    ```\n\n    ### Can be styled\n\n    ```py\n    hd.text(\n        \"Hello World\",\n        border=\"1px solid green-200\",\n        background_color=\"green-50\",\n        padding=1,\n        border_radius=\"large\",\n        width=\"fit-content\",\n    )\n    ```\n\n    ",
      "tag": "p",
      "props": [
        {
          "prop_name": "content",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "h1": {
      "component_type": "class",
      "sig": "h1(*content, **kwargs)\n",
      "doc": "\n        The chunks passed in `*content` will be joined by `\" \"` and used\n        to initialize the `content` prop.\n\n        ```py\n        x = 2\n        hd.text(\"I have\", x, \"chickens.\")\n        # is equivalent to\n        hd.text(content=f\"I have {x} chickens.\")\n        ```\n\n        ",
      "class_doc": "\n    A component that works identically to @component(text) but renders\n    an HTML `<h1>` tag, the largest possible heading.\n\n    This is roughly equivalent to using one hash-mark in Markdown:\n    `hd.markdown(\"# Heading\")`.\n\n    ",
      "tag": "h1",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "text"
      ],
      "is_mixin": false
    },
    "h2": {
      "component_type": "class",
      "sig": "h2(*content, **kwargs)\n",
      "doc": "\n        The chunks passed in `*content` will be joined by `\" \"` and used\n        to initialize the `content` prop.\n\n        ```py\n        x = 2\n        hd.text(\"I have\", x, \"chickens.\")\n        # is equivalent to\n        hd.text(content=f\"I have {x} chickens.\")\n        ```\n\n        ",
      "class_doc": "\n    A component that works identically to @component(text) but renders\n    an HTML `<h2>` tag, one step smaller than @component(h1).\n\n    This is roughly equivalent to using two hash-marks in Markdown:\n    `hd.markdown(\"## Heading\")`.\n    ",
      "tag": "h2",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "text"
      ],
      "is_mixin": false
    },
    "h3": {
      "component_type": "class",
      "sig": "h3(*content, **kwargs)\n",
      "doc": "\n        The chunks passed in `*content` will be joined by `\" \"` and used\n        to initialize the `content` prop.\n\n        ```py\n        x = 2\n        hd.text(\"I have\", x, \"chickens.\")\n        # is equivalent to\n        hd.text(content=f\"I have {x} chickens.\")\n        ```\n\n        ",
      "class_doc": "\n    A component that works identically to @component(text) but renders\n    an HTML `<h3>` tag, one step smaller than @component(h2).\n\n    This is roughly equivalent to using three hash-marks in Markdown:\n    `hd.markdown(\"### Heading\")`.\n    ",
      "tag": "h3",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "text"
      ],
      "is_mixin": false
    },
    "h4": {
      "component_type": "class",
      "sig": "h4(*content, **kwargs)\n",
      "doc": "\n        The chunks passed in `*content` will be joined by `\" \"` and used\n        to initialize the `content` prop.\n\n        ```py\n        x = 2\n        hd.text(\"I have\", x, \"chickens.\")\n        # is equivalent to\n        hd.text(content=f\"I have {x} chickens.\")\n        ```\n\n        ",
      "class_doc": "\n    A component that works identically to @component(text) but renders\n    an HTML `<h4>` tag, one step smaller than @component(h3).\n\n    This is roughly equivalent to using four hash-marks in Markdown:\n    `hd.markdown(\"#### Heading\")`.\n    ",
      "tag": "h4",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "text"
      ],
      "is_mixin": false
    },
    "h5": {
      "component_type": "class",
      "sig": "h5(*content, **kwargs)\n",
      "doc": "\n        The chunks passed in `*content` will be joined by `\" \"` and used\n        to initialize the `content` prop.\n\n        ```py\n        x = 2\n        hd.text(\"I have\", x, \"chickens.\")\n        # is equivalent to\n        hd.text(content=f\"I have {x} chickens.\")\n        ```\n\n        ",
      "class_doc": "\n    A component that works identically to @component(text) but renders\n    an HTML `<h5>` tag, one step smaller than @component(h4).\n\n    This is roughly equivalent to using five hash-marks in Markdown:\n    `hd.markdown(\"##### Heading\")`.\n    ",
      "tag": "h5",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "text"
      ],
      "is_mixin": false
    },
    "markdown": {
      "component_type": "class",
      "sig": "markdown(*content, gap=1.5, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    The `markdown` component accepts content in markdown syntax and\n    uses the [Mistune](https://mistune.lepture.com/) Markdown parser\n    to render it as HTML in the browser.\n\n    You can use `markdown` to style text:\n\n    ```py\n    hd.markdown(\"# A heading\")\n    hd.markdown(\"## A subheading\")\n    hd.markdown(\"~~Strikethrough text~~\")\n    hd.markdown(\"*Italics text*\")\n    hd.markdown(\"**Bold text**\")\n    ```\n\n    You can also use triple-quote strings to render multi-paragraph\n    content:\n\n    ```py\n    hd.markdown(\n        '''\n        # A heading\n\n        A paragraph.\n\n        Another paragraph.\n\n        [A link](https://my-link.com)\n\n        ## A subheading\n\n        An ordered list:\n        1. Item one\n        2. Item two\n        3. Item three\n\n        An unordered list:\n        * Item one\n        * Item two\n        * Item three\n\n        A code block:\n\n        ```js\n        const add = (a, b) => a + b;\n        ```\n        '''\n    )\n    ```\n\n    Markdown supports box props, so you can adjust the gap between its\n    children, alignment, etc., but you cannot control the individual\n    styles of its child components.\n\n    To learn Markdown syntax, see:\n\n    * [CommonMark](https://commonmark.org)\n    * [CommonMark Tutorial](https://commonmark.org/help)\n\n    ",
      "tag": "div",
      "props": [
        {
          "prop_name": "content",
          "default_value": "",
          "immutable": false,
          "markdown": "[Markdown](/reference/prop-types/Markdown)",
          "prop_doc": " The markdown content."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Boxy",
        "Styled"
      ],
      "is_mixin": false
    },
    "code": {
      "component_type": "function",
      "sig": "code(code_block, language=\"python\", **kwargs)\n",
      "doc": "\n    Calls @component(markdown) to render the given code block.\n    `**kwargs` are passed down to @component(markdown).\n\n    `language` can be the short name of any lexer supported by\n    [Pygments](https://pygments.org/docs/lexers/).\n\n    ```py\n    hd.code(\n        '''\n        def f(x, y):\n            return x + y\n        '''\n    )\n    ```\n    ```py\n    hd.code(\n        '''\n        async function hello() {\n            const a = await f(\"foo\");\n            const b = await g(\"bar\");\n            return a + b;\n        }\n        ''',\n        language=\"javascript\"\n    )\n    ```\n    "
    },
    "theme": {
      "component_type": "class",
      "sig": "theme()\n",
      "doc": null,
      "class_doc": "\n    Allows access to the light/dark mode theme setting. You can set\n    the theme by mutating the `mode` prop.\n\n    ```py\n    theme = hd.theme()\n    icon = \"sun\"\n    mode = \"light\"\n    if theme.is_light:\n        icon = \"moon\"\n        mode = \"dark\"\n    if hd.icon_button(icon).clicked:\n        theme.mode = mode\n    ```\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "system_mode",
          "default_value": null,
          "immutable": true,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('light', None, 'dark')",
          "prop_doc": " The current system theme setting. This prop is automatically,\n internally-updated as the system setting changes. Even though\n this prop technically accepts `None` as a value, `None` is never\n visible from a user perspective. It is set to `None` only\n briefly on startup, and is immediately updated to a concrete\n value before the application runs."
        },
        {
          "prop_name": "mode",
          "default_value": "system",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('system', 'light', 'dark')",
          "prop_doc": " The theme mode. If the mode is set to `\"system\"`, the theme\n follows the value of the `system_mode` prop."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "is_light",
          "sig": "is_light # read-only property",
          "doc": "\n        Returns `True` if the theme is in light mode, and `False` if the\n        theme is in dark mode, regardless of whether the theme mode is\n        set by the user or follows system.\n        "
        },
        {
          "method_name": "is_dark",
          "sig": "is_dark # read-only property",
          "doc": "The inverse of `is_light`."
        },
        {
          "method_name": "set_and_remember_theme_mode",
          "sig": "set_and_remember_theme_mode(self, mode)",
          "doc": "\n        Sets the theme mode and updates the browser's local storage to\n        remember this setting. Upon app revisits/reloads, the theme\n        will load with this setting.\n        "
        },
        {
          "method_name": "reset_and_forget_theme_mode",
          "sig": "reset_and_forget_theme_mode(self)",
          "doc": "\n        Removes the theme mode setting from the browser's local storage,\n        causing the theme setting to default to `system`.\n        "
        }
      ],
      "superclasses": [
        "BrowserSingleton"
      ],
      "is_mixin": false
    },
    "tooltip": {
      "component_type": "class",
      "sig": "tooltip(*content, **kwargs)\n",
      "doc": "\n        If `*content` is passed, it will be joined by `\" \"` and used to\n        initialize the `content` prop.\n        ",
      "class_doc": "\n    Wraps a target component in a tooltip.\n\n    ```py\n    with hd.tooltip(\"Settings\"):\n        hd.icon(\"gear\")\n    ```\n    ",
      "tag": "sl-tooltip",
      "props": [
        {
          "prop_name": "content",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The text rendered in the tooltip."
        },
        {
          "prop_name": "placement",
          "default_value": "top",
          "immutable": false,
          "markdown": "[ShoelacePlacement](/reference/prop-types/ShoelacePlacement)",
          "prop_doc": " Placement of the tooltip relative to the wrapped component."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " When `disabled` is set to `True`, the tooltip stays hidden."
        },
        {
          "prop_name": "distance",
          "default_value": 8,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " How far the tooltip is from the target."
        },
        {
          "prop_name": "skidding",
          "default_value": 0,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " How far the tooltip is displaced along the target."
        },
        {
          "prop_name": "trigger",
          "default_value": [
            "hover",
            "focus"
          ],
          "immutable": false,
          "markdown": "[TooltipTrigger](/reference/prop-types/TooltipTrigger)",
          "prop_doc": " The set of actions on which the tooltip becomes visible. When\n the action is `\"manual\"`, the tooltip does not become visible\n unless the `opened` prop is programmatically set to `True`."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "body_style",
          "prop_doc": null
        },
        {
          "prop_name": "base_popup_style",
          "prop_doc": null
        },
        {
          "prop_name": "base_arrow_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled",
        "Togglable"
      ],
      "is_mixin": false
    },
    "carousel_item": {
      "component_type": "class",
      "sig": "carousel_item(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    To be used with @component(carousel).\n    ",
      "tag": "sl-carousel-item",
      "props": [
        {
          "prop_name": "aspect_ratio",
          "default_value": null,
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "carousel": {
      "component_type": "class",
      "sig": "carousel(**kwargs)\n",
      "doc": null,
      "class_doc": "A carousel component that groups a set of\n    @component(carousel_item) containers, which can contain arbitrary\n    content. You can flip between the carousel items by interacting\n    with the navigation controls.\n\n    ```py\n    with hd.carousel() as carousel:\n        with hd.carousel_item() as it1:\n            hd.text(\"1\")\n        with hd.carousel_item() as it2:\n            hd.text(\"2\")\n        with hd.carousel_item() as it3:\n            hd.text(\"3\")\n        with hd.carousel_item() as it4:\n            hd.text(\"4\")\n    ```\n\n    You can inspect which carousel item is selected by using the\n    `selected_item` attribute.\n\n    ```py\n    with hd.carousel() as carousel:\n        with hd.carousel_item() as it1:\n            hd.text(\"1\")\n        with hd.carousel_item() as it2:\n            hd.text(\"2\")\n        with hd.carousel_item() as it3:\n            hd.text(\"3\")\n        with hd.carousel_item() as it4:\n            hd.text(\"4\")\n\n    if carousel.selected_item == it1:\n        hd.text(\"1\")\n    if carousel.selected_item == it2:\n        hd.text(\"2\")\n    if carousel.selected_item == it3:\n        hd.text(\"3\")\n    if carousel.selected_item == it4:\n        hd.text(\"4\")\n    ```\n\n    ",
      "tag": "sl-carousel",
      "props": [
        {
          "prop_name": "loop",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to loop continuously when `autoplay` is `True`."
        },
        {
          "prop_name": "navigation",
          "default_value": true,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the left and right navigation buttons."
        },
        {
          "prop_name": "pagination",
          "default_value": true,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the pagination buttons at the bottom of the\n carousel."
        },
        {
          "prop_name": "autoplay",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to flip between the carousel items automatically."
        },
        {
          "prop_name": "autoplay_interval",
          "default_value": 3000,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " How long to wait (in milliseconds) before going to the next item\n in the carousel, when `autoplay` is set to `True`."
        },
        {
          "prop_name": "slides_per_page",
          "default_value": 1,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " How many slides (carousel items) should be rendered per page."
        },
        {
          "prop_name": "slides_per_move",
          "default_value": 1,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " How many carousel items to skip when navigating."
        },
        {
          "prop_name": "orientation",
          "default_value": "horizontal",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('vertical', 'horizontal')",
          "prop_doc": " Whether the carousel items move left-right or top-bottom when\n navigating."
        },
        {
          "prop_name": "mouse_dragging",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the carousel can be navigated by grabbing and dragging\n the carousel items with the mouse."
        },
        {
          "prop_name": "aspect_ratio",
          "default_value": null,
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The aspect ratio of the carousel. A string taking values like\n `\"3/4\"`, `\"7/4\"`, etc."
        },
        {
          "prop_name": "slide_gap",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The space between the slides."
        },
        {
          "prop_name": "scroll_hint",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The amount of space to partially reveal the next slide."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "scroll_container_style",
          "prop_doc": null
        },
        {
          "prop_name": "pagination_style",
          "prop_doc": null
        },
        {
          "prop_name": "pagination_item_style",
          "prop_doc": null
        },
        {
          "prop_name": "pagination_item_active_style",
          "prop_doc": null
        },
        {
          "prop_name": "navigation_style",
          "prop_doc": null
        },
        {
          "prop_name": "navigation_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "navigation_button_previous_style",
          "prop_doc": null
        },
        {
          "prop_name": "navigation_button_next_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "next_icon",
          "slot_doc": null
        },
        {
          "slot_name": "previous_icon",
          "slot_doc": null
        }
      ],
      "methods": [
        {
          "method_name": "selected_item",
          "sig": "selected_item # read-only property",
          "doc": null
        }
      ],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "image_comparer": {
      "component_type": "class",
      "sig": "image_comparer(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A component that allows visually comparing two images by sliding a divider.\n\n    ```py\n    with hd.image_comparer() as ic:\n        hd.image(\n            \"/assets/kitten-bw.jpg\",\n            slot=ic.before\n        )\n        hd.image(\n            \"/assets/kitten.jpg\",\n            slot=ic.after\n        )\n    ```\n    ",
      "tag": "sl-image-comparer",
      "props": [
        {
          "prop_name": "position",
          "default_value": 50,
          "immutable": false,
          "markdown": "[ClampedFloat](/reference/prop-types/ClampedFloat)(low=0, high=100)",
          "prop_doc": " The divider position, as a percentage."
        },
        {
          "prop_name": "divider_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The divider width."
        },
        {
          "prop_name": "handle_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The size of the divider handle."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "before_style",
          "prop_doc": null
        },
        {
          "prop_name": "after_style",
          "prop_doc": null
        },
        {
          "prop_name": "divider_style",
          "prop_doc": null
        },
        {
          "prop_name": "handle_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "before",
          "slot_doc": null
        },
        {
          "slot_name": "after",
          "slot_doc": null
        },
        {
          "slot_name": "handle",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "clipboard": {
      "component_type": "class",
      "sig": "clipboard()\n",
      "doc": null,
      "class_doc": "\n    This component allows writing data to the user's clipboard.\n\n    ```py\n    clipboard = hd.clipboard()\n    if hd.button(\"Copy to clipboard\").clicked:\n        clipboard.write(\"Clipboard value\")\n    ```\n\n    This component only allows you write to the clipboard. You cannot\n    inspect the current clipboard value.\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "write",
          "sig": "write(self, value)",
          "doc": "Writes `value` to the user's clipboard."
        }
      ],
      "superclasses": [
        "BrowserSingleton"
      ],
      "is_mixin": false
    },
    "text_input": {
      "component_type": "class",
      "sig": "text_input(\n    *label,\n    name=None,\n    prefix_icon=None,\n    suffix_icon=None,\n    clear_icon=None,\n    show_password_icon=None,\n    hide_password_icon=None,\n    **kwargs\n)\n",
      "doc": "\n        The `*label` argument sets the text input's label.\n\n        The kwargs suffixed by `_icon` each take an icon name and slot\n        that icon into the respective slot.\n        ",
      "class_doc": "\n    The Hyperdiv text input component.\n\n    ```py\n    ti = hd.text_input(placeholder=\"Enter some text\")\n    hd.text(\"You entered:\", ti.value)\n    ```\n\n    ## Input Types\n\n    `text_input` supports multiple types of inputs, including\n    passwords, numbers, dates, and times.\n\n    ```py\n    hd.text_input(\n        \"Enter a number:\",\n        input_type=\"number\"\n    )\n    hd.text_input(\n        \"Enter a password:\",\n        input_type=\"password\",\n        password_toggle=True,\n    )\n    hd.text_input(\n        \"Enter a date:\",\n        input_type=\"date\"\n    )\n    hd.text_input(\n        \"Enter a date and time:\",\n        input_type=\"datetime-local\"\n    )\n    hd.text_input(\n        \"Enter a time:\",\n        input_type=\"time\"\n    )\n    ```\n\n    Some of the props of `text_input` are only relevant for certain\n    input types. For example the `password_toggle` prop, shown above,\n    will only affect the `password` input type.\n\n    ## Slots\n\n    `text_input` supports slots for adding prefix and suffix icons to\n    the input.\n\n    ```py\n    hd.text_input(\n        prefix_icon=\"gear\",\n        suffix_icon=\"chevron-right\"\n    )\n    ```\n\n    The password show/hide icons can also be customized:\n\n    ```py\n    hd.text_input(\n        value=\"mypassword\",\n        input_type=\"password\",\n        password_toggle=True,\n        show_password_icon=\"sunglasses\",\n        hide_password_icon=\"eyeglasses\",\n    )\n    ```\n    ",
      "tag": "sl-input",
      "props": [
        {
          "prop_name": "input_type",
          "default_value": "text",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('password', 'number', 'text', 'search', 'date', 'time', 'tel', 'datetime-local')",
          "prop_doc": " The type of the input.\n\n * `text`: The default type.\n * `time`: Renders a time picker in the input.\n * `date`: Renders a date picker in the input.\n * `datetime-local`: Renders a date and time picker.\n * `number`: Restricts the input to a number, and shows a number\n   keyboard on mobile.`text_input` exposes additional options\n   specific to this input type.\n * `password`: Renders a password input, with the input value\n   obscured by default. `text_input` exposes additional options\n   specific to this input type.\n * `tel`: Functionally identical to `text` but may render a\n   keyboard specific for inputting phone numbers while on mobile.\n * `search`: Functionally identical to `text` but may be styled\n   specifically by the browser."
        },
        {
          "prop_name": "name",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The name of the text input. If left unspecified, it is set to\n the label."
        },
        {
          "prop_name": "value",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The value/contents of the text input."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the text input."
        },
        {
          "prop_name": "filled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the text input should be rendered with a filled style."
        },
        {
          "prop_name": "pill",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the text input should be rendered as a pill."
        },
        {
          "prop_name": "help_text",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " Help text/hint to be rendered under the input."
        },
        {
          "prop_name": "clearable",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether a \"x\" button should be rendered that clears the input\n when clicked."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the text input should be rendered as disabled."
        },
        {
          "prop_name": "placeholder",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " A placeholder to show when the input is empty. This prop will\n not render anything for date and time inputs, which are\n pre-populated with a date/time picker."
        },
        {
          "prop_name": "readonly",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the input is readonly."
        },
        {
          "prop_name": "password_toggle",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " If the input type is `\"password\"`, whether to render a button\n that allows revealing the password."
        },
        {
          "prop_name": "password_visible",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the password is visible."
        },
        {
          "prop_name": "no_spin_buttons",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " When the input type is `number`, this option hides the\n increment/decrement buttons."
        },
        {
          "prop_name": "minlength",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": " The minimum length of the input, in number of characters."
        },
        {
          "prop_name": "maxlength",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": " The maximum length of the input, in number of characters."
        },
        {
          "prop_name": "min_value",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": " If the input type is `\"number\"` this sets the minimum value that\n can be typed in."
        },
        {
          "prop_name": "max_value",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": " If the input type is `\"number\"`, this sets the maximum value that\n can be typed in."
        },
        {
          "prop_name": "step",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": " If the input type is `\"number\"`, this determines the\n step/increment that the value increments/decrements by when\n clicking the up/down buttons."
        },
        {
          "prop_name": "autocapitalize",
          "default_value": null,
          "immutable": false,
          "markdown": "[InputAutoCapitalize](/reference/prop-types/InputAutoCapitalize)",
          "prop_doc": " Determines how input text will be auto-capitalized."
        },
        {
          "prop_name": "autocorrect",
          "default_value": null,
          "immutable": false,
          "markdown": "[InputAutoCorrect](/reference/prop-types/InputAutoCorrect)",
          "prop_doc": " Determines how input text will be auto-corrected."
        },
        {
          "prop_name": "autocomplete",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([String](/reference/prop-types/String))",
          "prop_doc": null
        },
        {
          "prop_name": "autofocus",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Bool](/reference/prop-types/Bool))",
          "prop_doc": " Whether this text input should be auto-focused."
        },
        {
          "prop_name": "enterkeyhint",
          "default_value": null,
          "immutable": false,
          "markdown": "[InputEnterKeyHint](/reference/prop-types/InputEnterKeyHint)",
          "prop_doc": " Determines the behavior of the Enter key."
        },
        {
          "prop_name": "spellcheck",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether spell-check is turned on."
        },
        {
          "prop_name": "inputmode",
          "default_value": null,
          "immutable": false,
          "markdown": "[InputMode](/reference/prop-types/InputMode)",
          "prop_doc": " Determines the virtual keyboard shown on mobile."
        },
        {
          "prop_name": "pattern",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([String](/reference/prop-types/String))",
          "prop_doc": " A regex pattern that restricts what can be typed in this input."
        },
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " Whether the input value changed in this run."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "help_text_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_wrapper_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_base_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_style",
          "prop_doc": null
        },
        {
          "prop_name": "prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "clear_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "password_toggle_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "suffix_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "label_slot",
          "slot_doc": null
        },
        {
          "slot_name": "prefix",
          "slot_doc": null
        },
        {
          "slot_name": "suffix",
          "slot_doc": null
        },
        {
          "slot_name": "clear",
          "slot_doc": null
        },
        {
          "slot_name": "show_password",
          "slot_doc": null
        },
        {
          "slot_name": "hide_password",
          "slot_doc": null
        }
      ],
      "methods": [
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": null
        }
      ],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "form": {
      "component_type": "class",
      "sig": "form(disabled=False, gap=1, **kwargs)\n",
      "doc": "\n        If `disabled` is `True`, all the form inputs will be rendered\n        disabled, overriding the individual `disabled` kwargs passed\n        to each input. If you mutated the `disabled` prop on any of\n        the form inputs, that mutated value will take precedence.\n\n        The rest of the kwargs are passed to the `box` superclass.\n        ",
      "class_doc": "\n    This is the core component for creating Hyperdiv forms with\n    validation.\n\n    `form` inherits from @component(box) and accepts the same props\n    for laying out its children. A form can contain arbitrary\n    components in addition to the form's inputs.\n\n    `form` provides methods for adding input components such as\n    @component(button), @component(checkbox), @component(select),\n    etc. Input components should be added to the form using these\n    methods. Otherwise, the form will not be aware of those components\n    being part of the form. Using these methods, the user can set up\n    validation for each component by passing `required=True`, which\n    uses a basic built-in validation, or passing a custom validation\n    function using the `validation` kwarg.\n\n    When the form is submitted, by either clicking the submit button\n    or pressing Enter while an input is focused, validation is run on\n    all the form inputs. If validation fails on an input component,\n    the validation error message is rendered next to that component.\n\n    A validation function inputs the component's value and returns\n    `None` if validation is successful, or an error message if the\n    validation failed. The error message is bubbled up to the user.\n\n    If the form was submitted and validation passed, the `submitted`\n    attribute of the form becomes `True`, and the `form_data` property\n    can be used to access the input components' values in the form of\n    a dictionary mapping input names to input values.\n\n    ```py\n    with hd.form() as form:\n        form.text_input(\n            \"Enter some text\",\n            required=True\n        )\n        form.submit_button()\n    if form.submitted:\n        print(form.form_data)\n    ```\n\n    In the example above, if you leave the text input empty and submit\n    the form, a validation error message will be rendered. If you\n    input some text and press Enter, the form data dictionary will be\n    printed at the command line.\n\n    ### Custom validation\n\n    In this example, the form will not pass validation unless the word\n    `\"bunny\"` is typed in the text input:\n\n    ```py\n    def bunny_validation(value):\n        if value != \"bunny\":\n            return \"Please enter 'bunny'\"\n\n    with hd.form() as form:\n        form.text_input(\n            \"Enter some text\",\n            validation=bunny_validation\n        )\n        form.submit_button()\n    if form.submitted:\n        print(form.form_data)\n    ```\n\n    Since validation is implemented with Python functions, arbitrarily\n    complex validation can be expressed. Here is an email validator using\n    the Python package [email-validator](https://pypi.org/project/email-validator/):\n\n    ```py\n    def validate_email(email):\n        import email_validator\n\n        try:\n            email_validator.validate_email(email)\n        except Exception as e:\n            return str(e)\n\n    with hd.form() as form:\n        form.text_input(\n            \"Enter your email\",\n            validation=validate_email,\n        )\n        form.submit_button()\n    if form.submitted:\n        print(form.form_data)\n    ```\n\n    ### Async validation\n\n    If validation function calls are heavy, they can be made async and\n    they will run in the background, keeping the UI responsive.\n\n    If a validation function is defined with `async def`, it will\n    automatically be run in the background. If a validation function\n    is not defined with `async_def`, it can be made to run in the\n    background by passing it to the form control using the\n    `async_validation` keyword argument instead of `validation`.\n\n    ```py\n    async def bunny_validation(value):\n        import asyncio\n        await asyncio.sleep(1)\n        if value != \"bunny\":\n            return \"Please enter 'bunny'\"\n\n    with hd.form() as form:\n        form.text_input(\n            \"Enter some text\",\n            validation=bunny_validation\n        )\n        form.submit_button()\n    if form.submitted:\n        print(form.form_data)\n    ```\n\n    ### Names and values\n\n    The form data dictionary returned by `form_data` can be curated by\n    providing custom names to the input components. By default their\n    labels are used as names, but custom names will override that\n    behavior.\n\n    ```py\n    with hd.form() as form:\n        form.text_input(\n            \"Enter some text\",\n            name=\"text\"\n        )\n        form.checkbox(\n            \"Include Shipping\",\n            name=\"shipping\"\n        )\n        form.submit_button()\n    if form.submitted:\n        print(form.form_data)\n    ```\n\n    The `form.form_data` dictionary will look like `{'text': 'Some\n    text', 'shipping': True}`.\n\n    ### Resetting a form\n\n    `form` provides the `reset_button` method which will add a reset\n    button to the form, that when clicked will reset all the form's\n    inputs to to initial values.\n\n    ```py\n    with hd.form() as form:\n        form.text_input(\n            \"Enter some text\",\n            name=\"text\"\n        )\n        form.checkbox(\n            \"Include Shipping\",\n            name=\"shipping\",\n            checked=True\n        )\n        with hd.hbox(gap=1):\n            form.submit_button()\n            form.reset_button()\n    if form.submitted:\n        print(form.form_data)\n    ```\n\n    ",
      "tag": "form",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "submitted",
          "sig": "submitted # read-only property",
          "doc": "\n        Returns `True` if the form was submitted and all fields passed\n        validation, and `False` otherwise.\n\n        This property acts like an event, and becomes `True` once per\n        submission.\n        "
        },
        {
          "method_name": "submit_failed",
          "sig": "submit_failed # read-only property",
          "doc": "\n        Returns `True` if the form was submitted and some of the\n        validations failed.\n\n        Returns `False` if the form was submitted and all the\n        validations passed.\n\n        Returns `None` if the form is pending submission. This will\n        happen when some of the fields use async validation.\n        "
        },
        {
          "method_name": "form_data",
          "sig": "form_data # read-only property",
          "doc": "\n        When `submitted` is `True`, this property returns a dictionary\n        mapping form field names to values. If `submitted` is not `True`,\n        this property returns `None`.\n\n        If the user has not provided a value for the `name` prop on\n        any field in the form, that field's label will be used\n        instead.\n\n        ```py\n        with hd.form() as form:\n            form.text_input(\"An input\")\n            form.text_input(\"Another input\", name=\"another-input\")\n\n        if form.submitted:\n            # prints {'An input': '', 'another-input', ''}\n            print(form.form_data)\n        ```\n\n        "
        },
        {
          "method_name": "checkbox",
          "sig": "checkbox(self, *label, wrapper_style=None, **kwargs)",
          "doc": "\n        Adds a @component(checkbox) component to the form.\n\n        The `wrapper_style` argument can be a @component(style)\n        instance to control the style style of the internal container\n        that wraps the form input + the validation error message.\n\n        The `**kwargs` are passed on to the @component(checkbox)\n        constructor.\n\n        "
        },
        {
          "method_name": "color_picker",
          "sig": "color_picker(self, wrapper_style=None, **kwargs)",
          "doc": "Adds a @component(color_picker) component to the form."
        },
        {
          "method_name": "text_input",
          "sig": "text_input(self, *label, wrapper_style=None, **kwargs)",
          "doc": "Adds a @component(text_input) component to the form."
        },
        {
          "method_name": "textarea",
          "sig": "textarea(self, *label, wrapper_style=None, **kwargs)",
          "doc": "Adds a @component(textarea) component to the form."
        },
        {
          "method_name": "radio_group",
          "sig": "radio_group(self, *label, wrapper_style=None, **kwargs)",
          "doc": "Adds a @component(radio_group) component to the form."
        },
        {
          "method_name": "slider",
          "sig": "slider(self, *label, wrapper_style=None, **kwargs)",
          "doc": "Adds a @component(slider) component to the form."
        },
        {
          "method_name": "select",
          "sig": "select(self, *label, wrapper_style=None, **kwargs)",
          "doc": "Adds a @component(select) component to the form."
        },
        {
          "method_name": "switch",
          "sig": "switch(self, *label, wrapper_style=None, **kwargs)",
          "doc": "Adds a @component(switch) component to the form."
        },
        {
          "method_name": "submit_button",
          "sig": "submit_button(self, *label, **kwargs)",
          "doc": "\n        Adds a @component(button) component to the form with\n        `type=\"submit\"`. When this button is clicked, the form is\n        submitted for validation. If validation passes,\n        `form.submitted` becomes `True`. Otherwise, validation\n        messages are shown to the user on any field that failed\n        validation.\n\n        If the label is omitted it is automatically set to `\"Submit\"`.\n\n        "
        },
        {
          "method_name": "reset_button",
          "sig": "reset_button(self, *label, **kwargs)",
          "doc": "\n        Adds a @component(button) component to the form. When this button\n        is clicked, all fields in the form are reset.\n\n        If the label is omitted, it is automatically set to `\"Reset\"`.\n        "
        },
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": "\n        A way to programmatically reset the form.\n        "
        }
      ],
      "superclasses": [
        "box"
      ],
      "is_mixin": false
    },
    "radio": {
      "component_type": "class",
      "sig": "radio(*label, value=None, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A radio input component to be used with @component(radio_group).\n    It isn't useful by itself.\n\n    ```py\n    r = hd.radio(\"A radio button\")\n    ```\n    ",
      "tag": "sl-radio",
      "props": [
        {
          "prop_name": "value",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([String](/reference/prop-types/String))",
          "prop_doc": " The value of the radio button. By default, the value is set to\n be equal to the label, if the value prop is not given."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the radio button."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the radio button can be selected."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "control_style",
          "prop_doc": null
        },
        {
          "prop_name": "control_checked_style",
          "prop_doc": null
        },
        {
          "prop_name": "checked_icon_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "radio_button": {
      "component_type": "class",
      "sig": "radio_button(*label, value=None, width=\"fit-content\", **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A radio button component to be used with\n    @component(radio_group). Similar to @component(radio), but\n    rendered as a button.\n\n    This component isn't useful by itself and should only be used when\n    nested in a @component(radio_group).\n\n    ```py\n    hd.radio_button(\"My Button\")\n    ```\n    ",
      "tag": "sl-radio-button",
      "props": [
        {
          "prop_name": "value",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([String](/reference/prop-types/String))",
          "prop_doc": " The value of the radio button. By default, if `value` isn't\n provided, it is set to be equal to the label."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the radio button."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether this radio button can be selected."
        },
        {
          "prop_name": "pill",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the radio button as a pill."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "button_style",
          "prop_doc": null
        },
        {
          "prop_name": "button_checked_style",
          "prop_doc": null
        },
        {
          "prop_name": "prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "suffix_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "prefix",
          "slot_doc": null
        },
        {
          "slot_name": "suffix",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "radio_group": {
      "component_type": "class",
      "sig": "radio_group(\n    *label_args, options=None, button_options=None, name=None, label=\"\", **kwargs\n)\n",
      "doc": null,
      "class_doc": "\n    An exclusive choice component, allowing the user to select one\n    from multiple choices. @component(radio)s and\n    @component(radio_button)s can be nested within a `radio_group`.\n\n    ### Radios\n\n    ```py\n    with hd.box(gap=1):\n        with hd.radio_group(value=\"One\") as group:\n            hd.radio(\"One\")\n            hd.radio(\"Two\")\n            hd.radio(\"Three\")\n\n        hd.text(\"Selected:\", group.value)\n    ```\n\n    ### Radio buttons\n\n    ```py\n    with hd.box(gap=1):\n        with hd.radio_group(value=\"One\") as group:\n            hd.radio_button(\"One\")\n            hd.radio_button(\"Two\")\n            hd.radio_button(\"Three\")\n\n        hd.text(\"Selected:\", group.value)\n    ```\n\n    Using the `pill` option to make a rounded radio button group:\n\n    ```py\n    with hd.box(gap=1):\n        with hd.radio_group(value=\"One\") as group:\n            hd.radio_button(\"One\", pill=True)\n            hd.radio_button(\"Two\")\n            hd.radio_button(\"Three\", pill=True)\n\n        hd.text(\"Selected:\", group.value)\n    ```\n\n    ### Shorthand syntax\n\n    Radio groups can be quickly created in one shot by passing the `options` kwarg.\n\n    ```py\n    hd.radio_group(\n        options=(\"One\", \"Two\", \"Three\"),\n        value=\"One\"\n    )\n    ```\n\n    Similarly, by passing `button_options` to create button groups:\n\n    ```py\n    hd.radio_group(\n        button_options=(\"One\", \"Two\", \"Three\"),\n        value=\"One\"\n    )\n    ```\n\n    In addition, the helper functions `radios` and `radio_buttons` are provided:\n\n    ```py\n    with hd.box(gap=1):\n        hd.radios(\n            \"One\", \"Two\", \"Three\",\n            value=\"One\"\n        )\n        hd.radio_buttons(\n            \"One\", \"Two\", \"Three\",\n            value=\"One\"\n        )\n    ```\n    ",
      "tag": "sl-radio-group",
      "props": [
        {
          "prop_name": "label",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The visible label of the group."
        },
        {
          "prop_name": "name",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The name of the group. By default, if `name` is not provided, it\n is set to the label of the group."
        },
        {
          "prop_name": "value",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The value of the nested @component(radio) or\n @component(radio_button) that is currently selected."
        },
        {
          "prop_name": "help_text",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " A small text hint further describing the radio group."
        },
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " Whether the value of the radio group changed."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " If this prop is True, the @component(radio) and\n @component(radio_button) children of this radio group will be\n disabled."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_wrapper_style",
          "prop_doc": null
        },
        {
          "prop_name": "help_text_style",
          "prop_doc": null
        },
        {
          "prop_name": "button_group_wrapper_style",
          "prop_doc": null
        },
        {
          "prop_name": "button_group_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": null
        }
      ],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "radios": {
      "component_type": "function",
      "sig": "radios(*options, label=None, **kwargs)\n",
      "doc": "\n    Creates a @component(radio_group) with the given label, with\n    nested @component(radio)s, one @component(radio) per item in\n    `options`.\n    "
    },
    "radio_buttons": {
      "component_type": "function",
      "sig": "radio_buttons(*options, label=None, **kwargs)\n",
      "doc": "\n    Creates a @component(radio_group) with the given label, with\n    nested @component(radio_button)s, one @component(radio_button)\n    per item in `options`.\n    "
    },
    "slider": {
      "component_type": "class",
      "sig": "slider(*label, name=None, min_value=0, max_value=100, value=None, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A slider (range) input component allowing users to choose a value\n    from interval by sliding a knob.\n\n    ```py\n    with hd.box(gap=1):\n        slider = hd.slider()\n        hd.text(slider.value)\n    ```\n\n    ### Custom range\n\n    ```py\n    with hd.box(gap=1):\n        slider = hd.slider(min_value=30, max_value=50)\n        hd.text(slider.value)\n    ```\n\n    ### Default value with custom step\n\n    ```py\n    with hd.box(gap=1):\n        slider = hd.slider(\n            min_value=30,\n            max_value=50,\n            step=5,\n            value=35,\n        )\n        hd.text(slider.value)\n    ```\n\n    ### Customizable\n\n    ```py\n    with hd.box(gap=1):\n        slider = hd.slider(\n            value=40,\n            track_active_color=\"primary\",\n            track_height=1,\n            thumb_size=2,\n        )\n        hd.text(slider.value)\n    ```\n\n    ",
      "tag": "sl-range",
      "props": [
        {
          "prop_name": "name",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The name of the component. If `name` is not provided, it is set\n to the slider's label."
        },
        {
          "prop_name": "value",
          "default_value": 0,
          "immutable": false,
          "markdown": "[Float](/reference/prop-types/Float)",
          "prop_doc": " The value of the slider."
        },
        {
          "prop_name": "help_text",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " Small hint text rendered below the slider."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the slider can be interacted with."
        },
        {
          "prop_name": "min_value",
          "default_value": 0,
          "immutable": false,
          "markdown": "[Float](/reference/prop-types/Float)",
          "prop_doc": " The minimum value of the slider."
        },
        {
          "prop_name": "max_value",
          "default_value": 100,
          "immutable": false,
          "markdown": "[Float](/reference/prop-types/Float)",
          "prop_doc": " The maximum value of the slider."
        },
        {
          "prop_name": "step",
          "default_value": 1,
          "immutable": false,
          "markdown": "[Float](/reference/prop-types/Float)",
          "prop_doc": " The step/increment of the slider."
        },
        {
          "prop_name": "tooltip",
          "default_value": "top",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('bottom', 'none', 'top')",
          "prop_doc": " Where to position the knob/thumb tooltip."
        },
        {
          "prop_name": "thumb_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The size of the draggable thumb."
        },
        {
          "prop_name": "tooltip_offset",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The offset of the tooltip."
        },
        {
          "prop_name": "track_active_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The color of the track to the left of the thumb."
        },
        {
          "prop_name": "track_inactive_color",
          "default_value": null,
          "immutable": false,
          "markdown": "[Color](/reference/prop-types/Color)",
          "prop_doc": " The color of the track to the right of the thumb."
        },
        {
          "prop_name": "track_height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The height of the track."
        },
        {
          "prop_name": "track_active_offset",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The point around which the \"active\" track color activates."
        },
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "slider_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_wrapper_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_style",
          "prop_doc": null
        },
        {
          "prop_name": "tooltip_style",
          "prop_doc": null
        },
        {
          "prop_name": "help_text_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "label_slot",
          "slot_doc": null
        }
      ],
      "methods": [
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": null
        }
      ],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "option": {
      "component_type": "class",
      "sig": "option(*label, value=None, prefix_icon=None, suffix_icon=False, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    An option component that is not usable by itself, but should be\n    nested within @component(select).\n\n    Options support `prefix` and `suffix` slots, that are typically\n    used to slot prefix and suffix icons.\n\n    ```py\n    hd.option(\"An option\", prefix_icon=\"gear\")\n    ```\n    ",
      "tag": "sl-option",
      "props": [
        {
          "prop_name": "value",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The value of the option. By default it is set to its label."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether this option can be selected."
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "checked_icon_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "suffix_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "prefix",
          "slot_doc": null
        },
        {
          "slot_name": "suffix",
          "slot_doc": null
        }
      ],
      "methods": [],
      "superclasses": [
        "LabelComponent",
        "Styled"
      ],
      "is_mixin": false
    },
    "select": {
      "component_type": "class",
      "sig": "select(\n    *label,\n    options=None,\n    name=None,\n    prefix_icon=None,\n    clear_icon=None,\n    expand_icon=None,\n    **kwargs\n)\n",
      "doc": "\n        If `options` is given as an iterable of option labels,\n        @component(option) components will be automatically created\n        for each given option.\n        ",
      "class_doc": "\n    An input component that allows selecting one or more options from\n    a dropdown-style menu. Options within a `select` are created using\n    @component(option). @component(divider) can be used to insert\n    visual separation between option groups.\n\n    ### Single select\n\n    ```py\n    with hd.box(gap=1):\n        with hd.select(\n            placeholder=\"Choose One:\"\n        ) as select:\n            hd.option(\"One\")\n            hd.option(\"Two\")\n            hd.divider()\n            hd.option(\"Three\")\n            hd.option(\"Four\")\n        hd.text(\"Selected:\", select.value)\n    ```\n\n    ### Multi-select\n\n    When setting `multiple` to `True`, multiple items can be selected,\n    and the `value` prop outputs a list of all the selected values.\n\n    ```py\n    with hd.box(gap=1):\n        with hd.select(\n            placeholder=\"Choose Multiple:\",\n            value=(\"One\", \"Two\"),\n            multiple=True,\n        ) as select:\n            hd.option(\"One\")\n            hd.option(\"Two\")\n            hd.divider()\n            hd.option(\"Three\")\n            hd.option(\"Four\")\n        hd.text(\"Selected:\", select.value)\n    ```\n\n    ",
      "tag": "sl-select",
      "props": [
        {
          "prop_name": "name",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The name of the select. Relevant when using select in a\n @component(form). Automatically set to the select's label if\n `name` is not specified."
        },
        {
          "prop_name": "value",
          "default_value": "",
          "immutable": false,
          "markdown": "[Union](/reference/prop-types/Union)([PureString](/reference/prop-types/PureString), [List](/reference/prop-types/List)([String](/reference/prop-types/String)))",
          "prop_doc": " The value of the select."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the select."
        },
        {
          "prop_name": "placeholder",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " Ghost text to render in the select box when no items are\n selected."
        },
        {
          "prop_name": "multiple",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether this select is exclusive-choice or multiple choice."
        },
        {
          "prop_name": "max_options_visible",
          "default_value": 3,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": " The max number of options to render in the select when\n `multiple` is `True`."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether this select can be interacted with."
        },
        {
          "prop_name": "clearable",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Renders a clear button that allows clearing all the options in\n one click."
        },
        {
          "prop_name": "hoist",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "filled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render a filled-background select instead of an outline."
        },
        {
          "prop_name": "pill",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether to render the select as a pill."
        },
        {
          "prop_name": "placement",
          "default_value": "bottom",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('bottom', 'top')",
          "prop_doc": " Where to open the menu."
        },
        {
          "prop_name": "help_text",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " A small text hint to render under the select."
        },
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "help_text_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_wrapper_style",
          "prop_doc": null
        },
        {
          "prop_name": "combobox_style",
          "prop_doc": null
        },
        {
          "prop_name": "prefix_style",
          "prop_doc": null
        },
        {
          "prop_name": "display_input_style",
          "prop_doc": null
        },
        {
          "prop_name": "listbox_style",
          "prop_doc": null
        },
        {
          "prop_name": "tags_style",
          "prop_doc": null
        },
        {
          "prop_name": "tag_style",
          "prop_doc": null
        },
        {
          "prop_name": "tag_base_style",
          "prop_doc": null
        },
        {
          "prop_name": "tag_content_style",
          "prop_doc": null
        },
        {
          "prop_name": "tag_remove_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "tag_remove_button_base_style",
          "prop_doc": null
        },
        {
          "prop_name": "clear_button_style",
          "prop_doc": null
        },
        {
          "prop_name": "expand_icon_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "label_slot",
          "slot_doc": null
        },
        {
          "slot_name": "prefix",
          "slot_doc": null
        },
        {
          "slot_name": "clear_icon_slot",
          "slot_doc": null
        },
        {
          "slot_name": "expand_icon_slot",
          "slot_doc": null
        }
      ],
      "methods": [
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": null
        }
      ],
      "superclasses": [
        "LabelComponent",
        "Togglable"
      ],
      "is_mixin": false
    },
    "switch": {
      "component_type": "class",
      "sig": "switch(*label, name=None, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    Essentially a checkbox that is rendered in a on/off switch style.\n\n    ```py\n    hd.switch(\"Toggle Me\", checked=True)\n    ```\n    ",
      "tag": "sl-switch",
      "props": [
        {
          "prop_name": "name",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": " The name of the switch, which is relevant when a switch is used\n inside a @component(form). Set to the switch's label if a name\n is not provided."
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": " The size of the switch."
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Disables the ability to toggle the switch."
        },
        {
          "prop_name": "checked",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the switch is checked/toggled on."
        },
        {
          "prop_name": "switch_width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The width of the switch."
        },
        {
          "prop_name": "switch_height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The height of the switch."
        },
        {
          "prop_name": "thumb_size",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": " The size of the \"thumb\" button that toggles the switch."
        },
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "control_style",
          "prop_doc": null
        },
        {
          "prop_name": "thumb_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        }
      ],
      "slots": [],
      "methods": [
        {
          "method_name": "value",
          "sig": "value # read-only property",
          "doc": null
        },
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": null
        }
      ],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "textarea": {
      "component_type": "class",
      "sig": "textarea(*label, name=None, **kwargs)\n",
      "doc": null,
      "class_doc": "\n    A text area component.\n\n    ```py\n    hd.textarea(placeholder=\"Type here\")\n    ```\n    ",
      "tag": "sl-textarea",
      "props": [
        {
          "prop_name": "value",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": null
        },
        {
          "prop_name": "name",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": null
        },
        {
          "prop_name": "size",
          "default_value": "medium",
          "immutable": false,
          "markdown": "[ShoelaceSize](/reference/prop-types/ShoelaceSize)",
          "prop_doc": null
        },
        {
          "prop_name": "filled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "help_text",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": null
        },
        {
          "prop_name": "placeholder",
          "default_value": "",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": null
        },
        {
          "prop_name": "rows",
          "default_value": 4,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": null
        },
        {
          "prop_name": "resize",
          "default_value": "vertical",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('auto', 'none', 'vertical')",
          "prop_doc": null
        },
        {
          "prop_name": "disabled",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "readonly",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "minlength",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": null
        },
        {
          "prop_name": "maxlength",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": null
        },
        {
          "prop_name": "autocapitalize",
          "default_value": null,
          "immutable": false,
          "markdown": "[InputAutoCapitalize](/reference/prop-types/InputAutoCapitalize)",
          "prop_doc": null
        },
        {
          "prop_name": "autocorrect",
          "default_value": null,
          "immutable": false,
          "markdown": "[InputAutoCorrect](/reference/prop-types/InputAutoCorrect)",
          "prop_doc": null
        },
        {
          "prop_name": "autocomplete",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([String](/reference/prop-types/String))",
          "prop_doc": null
        },
        {
          "prop_name": "autofocus",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "enterkeyhint",
          "default_value": null,
          "immutable": false,
          "markdown": "[InputEnterKeyHint](/reference/prop-types/InputEnterKeyHint)",
          "prop_doc": null
        },
        {
          "prop_name": "spellcheck",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "inputmode",
          "default_value": null,
          "immutable": false,
          "markdown": "[InputMode](/reference/prop-types/InputMode)",
          "prop_doc": null
        },
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": null
        }
      ],
      "style_parts": [
        {
          "prop_name": "base_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_wrapper_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_base_style",
          "prop_doc": null
        },
        {
          "prop_name": "input_style",
          "prop_doc": null
        },
        {
          "prop_name": "label_style",
          "prop_doc": null
        },
        {
          "prop_name": "help_text_style",
          "prop_doc": null
        }
      ],
      "slots": [
        {
          "slot_name": "label_slot",
          "slot_doc": null
        }
      ],
      "methods": [
        {
          "method_name": "reset",
          "sig": "reset(self)",
          "doc": null
        }
      ],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "window": {
      "component_type": "class",
      "sig": "window()\n",
      "doc": null,
      "class_doc": "\n    `window` gives access to the browser's window dimensions, to allow\n    rendering responsively based on window size.\n\n    ```py\n    window = hd.window()\n    if window.width < 1200:\n        size = \"small\"\n        color = \"red\"\n    else:\n        size = \"large\"\n        color = \"green\"\n    hd.button(\"Hello\", size=size, font_color=color)\n    ```\n\n    To do something when the window dimensions change, use the\n    `changed` event prop.\n\n    ```py\n    window = hd.window()\n    state = hd.state(count=0)\n    if window.changed:\n        state.count += 1\n    hd.text(\"Window resized\", state.count, \"times.\")\n    ```\n\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "changed",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": " Whether the browser window was resized."
        },
        {
          "prop_name": "width",
          "default_value": null,
          "immutable": true,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": " The window width in pixels."
        },
        {
          "prop_name": "height",
          "default_value": null,
          "immutable": true,
          "markdown": "[Optional](/reference/prop-types/Optional)([Int](/reference/prop-types/Int))",
          "prop_doc": " The window height in pixels."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "BrowserSingleton"
      ],
      "is_mixin": false
    },
    "list_base": {
      "component_type": "class",
      "sig": "list_base(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    Base class for list components.\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Styled"
      ],
      "is_mixin": false
    },
    "list": {
      "component_type": "class",
      "sig": "list(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    Renders an unordered (bullet-point) list of @component(list_item)s.\n\n    ```py\n    hd.text(\"Here is a list:\")\n    with hd.list():\n        hd.list_item(\"One\")\n        hd.list_item(\"Two\")\n        hd.list_item(\"Three\")\n        hd.list_item(\"Four\")\n    ```\n\n    ### Custom item numbers\n\n    The bullet formatting can be controlled via the `style_type` prop.\n\n    ```py\n    hd.text(\"Here is a list:\")\n    with hd.list(style_type=\"square\"):\n        hd.list_item(\"One\")\n        hd.list_item(\"Two\")\n        hd.list_item(\"Three\")\n        hd.list_item(\"Four\")\n    ```\n    ",
      "tag": "ul",
      "props": [
        {
          "prop_name": "style_type",
          "default_value": "disc",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('square', 'disc', 'circle', 'none')",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "list_base"
      ],
      "is_mixin": false
    },
    "ordered_list": {
      "component_type": "class",
      "sig": "ordered_list(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    Renders an ordered (numbered) list of @component(list_item)s.\n\n    ```py\n    hd.text(\"Here is a list:\")\n    with hd.ordered_list():\n        hd.list_item(\"One\")\n        hd.list_item(\"Two\")\n        hd.list_item(\"Three\")\n        hd.list_item(\"Four\")\n    ```\n\n    ### Custom item numbers\n\n    The number formatting can be controlled via the `style_type` prop.\n\n    ```py\n    hd.text(\"Here is a list:\")\n    with hd.ordered_list(style_type=\"lower-roman\"):\n        hd.list_item(\"One\")\n        hd.list_item(\"Two\")\n        hd.list_item(\"Three\")\n        hd.list_item(\"Four\")\n    ```\n    ",
      "tag": "ol",
      "props": [
        {
          "prop_name": "style_type",
          "default_value": "decimal",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('none', 'lower-roman', 'upper-latin', 'lower-latin', 'upper-roman', 'decimal')",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "list_base"
      ],
      "is_mixin": false
    },
    "list_item": {
      "component_type": "class",
      "sig": "list_item(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A list item component to be used with @component(list) or @component(ordered_list).\n    Not useful on its own.\n    ",
      "tag": "li",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "LabelComponent"
      ],
      "is_mixin": false
    },
    "box_list": {
      "component_type": "class",
      "sig": "box_list(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    Renders a list of @component(box_list_item)s.\n\n    By contrast to @component(list) and @component(ordered_list),\n    `box_list` does not render a bullet point or number on its\n    children, and subclasses @component(box), giving you a greater\n    amount of control over how the children are rendered within\n    the list.\n\n    This type of list is convenient, for example, when building\n    navigation menus. Accessibility tools will recognize this\n    component as a list, even though it effectively works like a box.\n\n    ```py\n    with hd.box_list():\n        hd.box_list_item(\"One\")\n        hd.box_list_item(\"Two\")\n    ```\n\n    ### Custom alignment\n\n    ```py\n    with hd.box_list(\n        direction=\"horizontal\",\n        gap=1\n    ):\n        hd.box_list_item(\n            \"One\",\n            border=\"1px solid green\",\n            padding=1\n        )\n        hd.box_list_item(\n            \"Two\",\n            border=\"1px solid green\",\n            padding=1\n        )\n    ```\n\n    ",
      "tag": "ul",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "box"
      ],
      "is_mixin": false
    },
    "box_list_item": {
      "component_type": "class",
      "sig": "box_list_item(*label, **kwargs)\n",
      "doc": "\n        If `*label` is provided, it will be concatenated by spaces and\n        stored as a `text` or `plaintext` component in the component's\n        body.\n\n        If `*label` is not provided, it is assumed the caller will\n        store the label explicitly.\n\n        `**kwargs` are passed up to @component(Component).\n        ",
      "class_doc": "\n    A list item component that can be nested in a @component(box_list).\n\n    By contrast to @component(list_item), `box_list_item` subclasses\n    @component(box), giving flexible control over how its\n    children are aligned.\n\n    ```py\n    with hd.box_list(gap=0.5):\n        with hd.box_list_item(\n            direction=\"horizontal\",\n            align=\"center\",\n            gap=0.5\n        ):\n            hd.icon(\"arrow-right\")\n            hd.link(\"An item\", href=\"#\")\n\n        with hd.box_list_item(\n            direction=\"horizontal\",\n            align=\"center\",\n            gap=0.5\n        ):\n            hd.icon(\"chevron-right\")\n            hd.link(\"Another item\", href=\"#\")\n    ```\n\n    ",
      "tag": "li",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "list_item",
        "box"
      ],
      "is_mixin": false
    },
    "nav": {
      "component_type": "class",
      "sig": "nav(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    A @component(box) that is useful for building usable navigation\n    menus. Navigation menus should be wrapped in `nav` in order to\n    help screen readers and other accessibility tools to better\n    understand the website's structure.\n\n    See more [here](https://www.w3schools.com/tags/tag_nav.asp).\n\n    ",
      "tag": "nav",
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "box"
      ],
      "is_mixin": false
    },
    "local_storage": {
      "component_type": "class",
      "sig": "local_storage()\n",
      "doc": "\n        Unlike typical Hyperdiv components, `local_storage` cannot be\n        instantiated. All methods are static.\n        ",
      "class_doc": "\n    A Hyperdiv interface to browser localStorage. Using this interface,\n    you can read and write data into the user's browser, and this data\n    persists across app visits. `local_storage` can be used to\n    implement authentication and store various user settings.\n\n    Each `local_storage` function returns an @component(async_command)\n    component. The `async_command` can be used to inspect whether the\n    function is still running, and its return value if it is done\n    running.\n\n    `local_storage` maintains an internal cache of\n    @component(async_command) objects that have been returned by reads\n    (`get_item` and `has_item`). The cache is keyed by the local\n    storage key. When a write (`set_item`, `remove_item`) is invoked\n    at that key, the related `async_command` objects will be reset. This\n    will trigger corresponding reads to re-run and get the new values.\n\n    When `clear()` is called, all keys are removed from localStorage\n    and the cache, and all reads re-run.\n\n    ```py\n    command = hd.local_storage.get_item(\"test_key\")\n\n    hd.markdown(\"`test_key` value:\", command.result)\n\n    if hd.button(\"Set key\").clicked:\n        hd.local_storage.set_item(\"test_key\", \"Bunnies\")\n\n    if hd.button(\"Remove key\").clicked:\n        hd.local_storage.remove_item(\"test_key\")\n    ```\n\n    ",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "get_item",
          "sig": "get_item(key)",
          "doc": "\n        Calls the browser's `window.localStorage.getItem(key)`.\n        "
        },
        {
          "method_name": "has_item",
          "sig": "has_item(key)",
          "doc": "\n        Tests if a key exists in the browser's localStorage. The returned\n        @component(async_command)'s `result` prop is set to `True` if the\n        given key exists in the browser's localStorage, or `False`\n        otherwise.\n        "
        },
        {
          "method_name": "set_item",
          "sig": "set_item(key, value)",
          "doc": "\n        Calls the browser's `window.localStorage.setItem(key, value)`.\n        "
        },
        {
          "method_name": "remove_item",
          "sig": "remove_item(key)",
          "doc": "\n        Calls the browser's `window.localStorage.removeItem(key)`.\n        "
        },
        {
          "method_name": "clear",
          "sig": "clear()",
          "doc": "\n        Calls the browser's `window.localStorage.clear()`, removing all the\n        keys from localStorage.\n        "
        }
      ],
      "superclasses": [],
      "is_mixin": true
    },
    "async_command": {
      "component_type": "class",
      "sig": "async_command(key=None, **prop_kwargs)\n",
      "doc": "\n        This class should not be instantiated directly.\n        ",
      "class_doc": "\n    This component represents the result of calling an asynchronous\n    command. This component is not usable directly, so there is no\n    user-facing need to ever instantiate it.\n\n    It is used by @component(local_storage) and @component(task). When\n    calling a @component(local_storage) function, it returns an\n    `async_command` instance. @component(task) inherits\n    `async_command`.\n\n    This component can be used to inspect the status of calling an\n    asynchronous command, whether it is using @component(task) to call\n    a user-defined asynchronous function, or calling a built-in\n    @component(local_storage) function.\n\n    ```py\n    command = hd.local_storage.get_item(\"test_key\")\n    if command.running:\n        hd.spinner()\n    elif command.done:\n        hd.text(command.result)\n    ```\n\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "running",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the asynchronous command is currently running and has\n not yet finished."
        },
        {
          "prop_name": "done",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": " Whether the asynchronous command has run and finished."
        },
        {
          "prop_name": "error",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([String](/reference/prop-types/String))",
          "prop_doc": " Whether the asynchronous command has run and finished with an error."
        },
        {
          "prop_name": "result",
          "default_value": null,
          "immutable": false,
          "markdown": "[Any](/reference/prop-types/Any)",
          "prop_doc": " The return value of the asynchronous command, if it has finished\n without an error."
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "clear",
          "sig": "clear(self)",
          "doc": "\n        Resets the `done`, `running`, and `error` props, bringing the\n        command to initial state allowing it to re-run.\n        "
        }
      ],
      "superclasses": [
        "BaseState"
      ],
      "is_mixin": false
    },
    "task": {
      "component_type": "class",
      "sig": "task(*, key=None)",
      "doc": null,
      "class_doc": "\n    `task` enables running user functions asynchronously, without\n    occupying the main UI thread. Functions doing significant work\n    or waiting on I/O may be good candidates to run with `task`.\n\n    The task function runs concurrently with the main app\n    function. While a task function is running, the main app function\n    can run and update the UI independently.\n\n    The main app function can inspect the state of the running task\n    using the props `running`, `done`, `error`, `result` and\n    `finished`.\n\n    The task function cannot instantiate UI components like\n    @component(button) -- it cannot create UIs. However, it can update\n    state. You can pass a UI or state component into the task function\n    and the task can read and update its props. The updates propagate\n    immediately and can cause the main app function to re-run, and\n    update the UI, while the task function is still running.\n\n    Tasks can also instantiate global state -- components defined with\n    @component(global_state) -- and inspect/update the global state.\n\n    ## Result Caching\n\n    When running a function with `task`, the return value of the\n    function will be cached in the task's `result` prop. Subsequent\n    calls to `task.run` will not re-run the function, unless you call\n    `rerun` or `clear`. Clearing a task will cause a subsequent call\n    to `run()` to run the function again.\n\n    In this example, when we click `Update`, the app-reruns, and since\n    the task is cleared, `task.run(get_timestamp)` will run the\n    `get_timestamp` function again.\n\n    ```py\n    def get_timestamp():\n        import time\n        return time.time()\n\n    task = hd.task()\n    task.run(get_timestamp)\n\n    hd.text(\"Last timestamp:\", task.result)\n\n    if hd.button(\"Update\").clicked:\n        task.clear()\n    ```\n\n    ## Using `rerun`\n\n    As an alternative to using `run` and `clear`, you can use `rerun`,\n    which clears the task and reruns the task function. `rerun` should\n    be run only in response to an event, like a click or a change\n    event.\n\n    ```py\n    def increment(state):\n        state.count += 1\n\n    state = hd.state(count=0)\n\n    task = hd.task()\n\n    hd.text(\"Count:\", state.count)\n\n    if hd.button(\"Increment\").clicked:\n        task.rerun(increment, state)\n    ```\n\n    ## Async Functions\n\n    `task` supports both normal functions and `async def`\n    functions. Normal functions are run in a threadpool, and `async\n    def` functions are run on an ioloop which runs on a separate\n    \"ioloop thread\".\n\n    ```py\n    async def my_function(state):\n        import asyncio\n        await asyncio.sleep(1)\n        state.count += 1\n\n    state = hd.state(count=0)\n\n    task = hd.task()\n\n    hd.text(\"Count:\", state.count)\n\n    if hd.button(\n        \"Increment\",\n        disabled=task.running\n    ).clicked:\n        task.rerun(my_function, state)\n    ```\n\n    Whenever you click the button, a task is launched that increments\n    the count one second later. This example also shows how to use the\n    task state to display different UI states. In this case, the\n    button is disabled while the task is running.\n\n    ## Displaying Interstitials\n\n    The task state can be used to display \"Loading\" interstitials\n    while the task is running.\n\n    ```py\n    async def get_users():\n        import asyncio\n        await asyncio.sleep(1)\n        return [\"Billy\", \"Molly\"]\n\n    users_task = hd.task()\n    users_task.run(get_users)\n\n    if hd.button(\"Load\").clicked:\n        users_task.clear()\n\n    if not users_task.done:\n        hd.spinner()\n    else:\n        hd.text(users_task.result)\n    ```\n\n    ## Concurrency\n\n    Tasks run concurrently with each other and the app function. Prop\n    reads and writes are automatically protected by a lock, but you\n    may need to use your own locks if you need coarser-granularity\n    locking. You can store a lock in state and pass that state to tasks.\n\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "finished",
          "default_value": false,
          "immutable": false,
          "markdown": "[BoolEvent](/reference/prop-types/BoolEvent)",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "run",
          "sig": "run(self, fn, *args, **kwargs)",
          "doc": "\n        Run `fn(*args, **kwargs)` on a separate thread (or ioloop if the\n        function is `async`).\n        "
        },
        {
          "method_name": "rerun",
          "sig": "rerun(self, fn, *args, **kwargs)",
          "doc": "Just like `run` but calls `self.clear()` before running."
        },
        {
          "method_name": "clear",
          "sig": "clear(self)",
          "doc": "\n        Resets the props of the task to initial values. If the task is\n        `done`, clearing it will allow it to run again. Note that if\n        an instance of the task is running at the time `clear()` is\n        called, that instance will be ignored, but it will still run\n        to completion.\n\n        Note that the `result` prop is not cleared, allowing the app\n        to keep rendering the previous result until the `result` prop\n        is updated with the data of the new run.\n        ",
          "overrides": "async_command"
        }
      ],
      "superclasses": [
        "async_command"
      ],
      "is_mixin": false
    },
    "style": {
      "component_type": "class",
      "sig": "style(**kwargs)\n",
      "doc": null,
      "class_doc": "A component holding the props for a style part.",
      "tag": null,
      "props": [],
      "style_parts": [],
      "slots": [],
      "methods": [
        {
          "method_name": "props_as_dict",
          "sig": "props_as_dict(self, **default_values)",
          "doc": null
        }
      ],
      "superclasses": [
        "BaseState",
        "Styled",
        "Boxy"
      ],
      "is_mixin": false
    },
    "animation": {
      "component_type": "class",
      "sig": "animation(*, key=None, collect=True, **prop_kwargs)",
      "doc": null,
      "class_doc": "\n    <sl-badge variant=\"danger\">Experimental</sl-badge>\n    ",
      "tag": "sl-animation",
      "props": [
        {
          "prop_name": "name",
          "default_value": "fadeIn",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('wobble', 'none', 'backOutDown', 'rotateInDownRight', 'fadeOutTopRight', 'lightSpeedOutRight', 'fadeOutDownBig', 'zoomIn', 'zoomOutUp', 'fadeInLeftBig', 'slideInDown', 'fadeOutBottomLeft', 'fadeInRightBig', 'bounceOutRight', 'slideOutRight', 'slideInLeft', 'fadeOutUp', 'jello', 'bounceInRight', 'backInUp', 'fadeOutRight', 'backOutLeft', 'rollIn', 'jackInTheBox', 'zoomOutLeft', 'flipOutX', 'hinge', 'flip', 'lightSpeedInRight', 'bounceOut', 'fadeOutRightBig', 'fadeInDownBig', 'fadeInLeft', 'fadeInTopLeft', 'rollOut', 'fadeInTopRight', 'zoomOutDown', 'rotateInUpRight', 'backInLeft', 'flash', 'fadeOut', 'swing', 'rotateInDownLeft', 'rotateIn', 'rubberBand', 'shake', 'bounceOutUp', 'zoomInLeft', 'slideOutLeft', 'bounceInDown', 'slideInRight', 'zoomOut', 'headShake', 'zoomInRight', 'fadeOutTopLeft', 'rotateOut', 'bounce', 'bounceIn', 'fadeIn', 'flipInY', 'lightSpeedOutLeft', 'fadeInUp', 'zoomInDown', 'slideOutDown', 'fadeOutLeftBig', 'bounceInLeft', 'bounceInUp', 'tada', 'pulse', 'shakeX', 'fadeOutDown', 'flipOutY', 'lightSpeedInLeft', 'rotateInUpLeft', 'rotateOutDownRight', 'fadeInBottomLeft', 'fadeOutUpBig', 'fadeOutLeft', 'slideInUp', 'backOutUp', 'fadeInRight', 'flipInX', 'fadeOutBottomRight', 'bounceOutLeft', 'zoomOutRight', 'heartBeat', 'bounceOutDown', 'zoomInUp', 'rotateOutUpLeft', 'fadeInDown', 'rotateOutDownLeft', 'slideOutUp', 'rotateOutUpRight', 'backOutRight', 'shakeY', 'backInDown', 'fadeInBottomRight', 'backInRight', 'fadeInUpBig')",
          "prop_doc": null
        },
        {
          "prop_name": "play",
          "default_value": false,
          "immutable": false,
          "markdown": "[Bool](/reference/prop-types/Bool)",
          "prop_doc": null
        },
        {
          "prop_name": "easing",
          "default_value": "linear",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('easeInOutExpo', 'easeInQuad', 'easeOutCirc', 'easeOutSine', 'easeInSine', 'easeOutExpo', 'ease', 'easeOutQuart', 'easeIn', 'easeInBack', 'easeInQuart', 'easeInOutCirc', 'easeInOutBack', 'linear', 'easeInOutCubic', 'easeOut', 'easeOutBack', 'easeOutQuad', 'easeInCubic', 'easeInQuint', 'easeInOutSine', 'easeInOutQuint', 'easeOutCubic', 'easeInExpo', 'easeInOutQuart', 'easeOutQuint', 'easeInOutQuad', 'easeInCirc', 'easeInOut')",
          "prop_doc": null
        },
        {
          "prop_name": "direction",
          "default_value": "normal",
          "immutable": false,
          "markdown": "[OneOf](/reference/prop-types/OneOf)('alternate', 'alternate-reverse', 'normal', 'reverse')",
          "prop_doc": null
        },
        {
          "prop_name": "delay",
          "default_value": 0,
          "immutable": false,
          "markdown": "[ClampedInt](/reference/prop-types/ClampedInt)(low=0)",
          "prop_doc": null
        },
        {
          "prop_name": "duration",
          "default_value": 300,
          "immutable": false,
          "markdown": "[ClampedInt](/reference/prop-types/ClampedInt)(low=0)",
          "prop_doc": null
        },
        {
          "prop_name": "end_delay",
          "default_value": 0,
          "immutable": false,
          "markdown": "[ClampedInt](/reference/prop-types/ClampedInt)(low=0)",
          "prop_doc": null
        },
        {
          "prop_name": "fill",
          "default_value": "auto",
          "immutable": false,
          "markdown": "[String](/reference/prop-types/String)",
          "prop_doc": null
        },
        {
          "prop_name": "iterations",
          "default_value": 1,
          "immutable": false,
          "markdown": "[Union](/reference/prop-types/Union)([Constant](/reference/prop-types/Constant)('Infinity'), [ClampedInt](/reference/prop-types/ClampedInt)(low=0))",
          "prop_doc": null
        },
        {
          "prop_name": "iteration_start",
          "default_value": 0,
          "immutable": false,
          "markdown": "[ClampedFloat](/reference/prop-types/ClampedFloat)(low=0, high=1)",
          "prop_doc": null
        },
        {
          "prop_name": "playback_rate",
          "default_value": 1,
          "immutable": false,
          "markdown": "[Int](/reference/prop-types/Int)",
          "prop_doc": null
        },
        {
          "prop_name": "keyframes",
          "default_value": null,
          "immutable": false,
          "markdown": "[Optional](/reference/prop-types/Optional)([List](/reference/prop-types/List)([Keyframe](/reference/prop-types/Keyframe)))",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "Component",
        "Slottable"
      ],
      "is_mixin": false
    },
    "keyframe": {
      "component_type": "class",
      "sig": "keyframe(key=None, **prop_kwargs)\n",
      "doc": "\n        This class should not be instantiated directly.\n        ",
      "class_doc": "\n    <sl-badge variant=\"danger\">Experimental</sl-badge>\n    ",
      "tag": null,
      "props": [
        {
          "prop_name": "width",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": null
        },
        {
          "prop_name": "height",
          "default_value": null,
          "immutable": false,
          "markdown": "[Size](/reference/prop-types/Size)",
          "prop_doc": null
        }
      ],
      "style_parts": [],
      "slots": [],
      "methods": [],
      "superclasses": [
        "BaseState"
      ],
      "is_mixin": false
    }
  }
}